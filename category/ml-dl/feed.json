{
    "version": "https://jsonfeed.org/version/1",
    "title": "Supernova • All posts by \"ml-dl\" category",
    "description": "小派过气画家",
    "home_page_url": "https://www.kitx86.com",
    "items": [
        {
            "id": "https://www.kitx86.com/2022/04/07/ml-dl-you-hua-suan-fa-yi-wen/",
            "url": "https://www.kitx86.com/2022/04/07/ml-dl-you-hua-suan-fa-yi-wen/",
            "title": "ML-DL-优化算法疑问",
            "date_published": "2022-04-07T09:14:18.000Z",
            "content_html": "<h4 id=\"优化算法疑问\"><a href=\"#优化算法疑问\" class=\"headerlink\" title=\"优化算法疑问\"></a>优化算法疑问</h4>",
            "tags": [
                "SGD",
                "RMSProp",
                "Adam"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/02/ml-dl-readingpaper/",
            "url": "https://www.kitx86.com/2022/04/02/ml-dl-readingpaper/",
            "title": "ML-DL-ReadingPaper",
            "date_published": "2022-04-02T03:41:23.000Z",
            "content_html": "<h2 id=\"Awesome-Deep-Learning-amp-Quantum-Computing\"><a href=\"#Awesome-Deep-Learning-amp-Quantum-Computing\" class=\"headerlink\" title=\"Awesome Deep Learning &amp; Quantum Computing\"></a>Awesome Deep Learning &amp; Quantum Computing</h2><p>我的小仓库😎😎 : <a href=\"https://www.aliyundrive.com/s/CELiSXuKc8e\">https://www.aliyundrive.com/s/CELiSXuKc8e</a></p>\n<p>不错的github地址：</p>\n<p><u>深度学习</u></p>\n<p><a href=\"https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap\">https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap</a></p>\n<p><a href=\"https://github.com/mli/paper-reading\">https://github.com/mli/paper-reading</a></p>\n<p><u>量子计算</u></p>\n<p><a href=\"https://github.com/desireevl/awesome-quantum-computing\">https://github.com/desireevl/awesome-quantum-computing</a></p>\n<h3 id=\"一、Convolutional-Neural-Networks-CNN\"><a href=\"#一、Convolutional-Neural-Networks-CNN\" class=\"headerlink\" title=\"一、Convolutional Neural Networks - CNN\"></a>一、Convolutional Neural Networks - CNN</h3><h3 id=\"二、Recurrent-Neural-Network-RNN\"><a href=\"#二、Recurrent-Neural-Network-RNN\" class=\"headerlink\" title=\"二、Recurrent Neural Network - RNN\"></a>二、Recurrent Neural Network - RNN</h3><h3 id=\"三、Reinforcement-Learning-RNN\"><a href=\"#三、Reinforcement-Learning-RNN\" class=\"headerlink\" title=\"三、Reinforcement Learning - RNN\"></a>三、Reinforcement Learning - RNN</h3><h3 id=\"四、Graph-Neural-Learning-GNN\"><a href=\"#四、Graph-Neural-Learning-GNN\" class=\"headerlink\" title=\"四、Graph Neural Learning - GNN\"></a>四、Graph Neural Learning - GNN</h3>",
            "tags": [
                "paper",
                "deep learning",
                "neural network"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/28/ml-dl-xun-huan-shen-jing-wang-luo/",
            "url": "https://www.kitx86.com/2022/03/28/ml-dl-xun-huan-shen-jing-wang-luo/",
            "title": "ML-DL-循环神经网络",
            "date_published": "2022-03-28T06:37:08.000Z",
            "content_html": "",
            "tags": [
                "RNN",
                "循环神经网络"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/26/ml-dl-pytorch-shi-xian/",
            "url": "https://www.kitx86.com/2022/03/26/ml-dl-pytorch-shi-xian/",
            "title": "ML-DL-Pytorch实现",
            "date_published": "2022-03-26T14:35:40.000Z",
            "content_html": "<h4 id=\"Declaration-：借鉴了-d2l-https-zh-d2l-ai-的pytorch实现\"><a href=\"#Declaration-：借鉴了-d2l-https-zh-d2l-ai-的pytorch实现\" class=\"headerlink\" title=\"Declaration ：借鉴了 d2l (https://zh.d2l.ai)的pytorch实现\"></a>Declaration ：借鉴了 d2l (<a href=\"https://zh.d2l.ai)的pytorch实现/\">https://zh.d2l.ai)的pytorch实现</a></h4>",
            "tags": [
                "pytorch",
                "深度学习",
                "机器学习"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/26/ml-dl-juan-ji-shen-jing-wang-luo/",
            "url": "https://www.kitx86.com/2022/03/26/ml-dl-juan-ji-shen-jing-wang-luo/",
            "title": "ML-DL-卷积神经网络",
            "date_published": "2022-03-26T07:28:39.000Z",
            "content_html": "<h2 id=\"一、卷积神经网络类\"><a href=\"#一、卷积神经网络类\" class=\"headerlink\" title=\"一、卷积神经网络类\"></a>一、卷积神经网络类</h2><h4 id=\"1、简要解释\"><a href=\"#1、简要解释\" class=\"headerlink\" title=\"1、简要解释\"></a>1、简要解释</h4><p>用途-处理图像数据、表格数据</p>\n<p><u>kaggle竞赛选择：图像识别，目标检测-边缘检测，语义分割</u></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 构造一个二维卷积层，它具有1个输出通道和形状为（1，2）的卷积核</span>\n\n<span class=\"token comment\"># 二维卷积核 参数形式 (批量大小，通道，高度，宽度)</span>\nconv2d <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>特性：空间不变性</p>\n<ol>\n<li><em>平移不变性</em>（translation invariance）：不管检测对象出现在图像中的哪个位置，神经网络的前面几层应该对相同的图像区域具有相似的反应，即为“平移不变性”。</li>\n<li><em>局部性</em>（locality）：神经网络的前面几层应该只探索输入图像中的局部区域，而不过度在意图像中相隔较远区域的关系，这就是“局部性”原则。最终，可以聚合这些局部特征，以在整个图像级别进行预测。</li>\n</ol>\n<p>输出的卷积层 - 》 特征映射</p>\n<p>感受野：指前向传播中可能影响 x 计算的所有元素</p>\n<p>“卷积”被定义为 $$(f * g)(\\mathbf{x}) = \\int f(\\mathbf{z}) g(\\mathbf{x}-\\mathbf{z}) d\\mathbf{z}.$$</p>\n<h4 id=\"2、卷积神经网络——LeNet\"><a href=\"#2、卷积神经网络——LeNet\" class=\"headerlink\" title=\"2、卷积神经网络——LeNet\"></a>2、卷积神经网络——LeNet</h4><p>LeNet（LeNet-5）由两个部分组成：</p>\n<ul>\n<li>卷积编码器：由两个卷积层组成;</li>\n<li>全连接层密集块：由三个全连接层组成。</li>\n</ul>\n<p><img src=\"/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/lenet.svg\" alt=\"lenet\"></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>卷积神经网络（CNN）是一类使用卷积层的网络。</li>\n<li>在卷积神经网络中，我们组合使用卷积层、非线性激活函数和汇聚层。</li>\n<li>为了构造高性能的卷积神经网络，我们通常对卷积层进行排列，逐渐降低其表示的空间分辨率，同时增加通道数。</li>\n<li>在传统的卷积神经网络中，卷积块编码得到的表征在输出之前需由一个或多个全连接层进行处理。</li>\n<li>LeNet是最早发布的卷积神经网络之一。</li>\n</ul>\n<h4 id=\"考查\"><a href=\"#考查\" class=\"headerlink\" title=\"考查\"></a>考查</h4><ol>\n<li><p>将平均汇聚层替换为最大汇聚层，会发生什么？</p>\n</li>\n<li><p>尝试构建一个基于LeNet的更复杂的网络，以提高其准确性。</p>\n<ol>\n<li>调整卷积窗口大小。</li>\n<li>调整输出通道的数量。</li>\n<li>调整激活函数（如ReLU）。</li>\n<li>调整卷积层的数量。</li>\n<li>调整全连接层的数量。</li>\n<li>调整学习率和其他训练细节（例如，初始化和轮数）。</li>\n</ol>\n</li>\n<li><p>在MNIST数据集上尝试以上改进的网络。</p>\n</li>\n<li><p>显示不同输入（例如毛衣和外套）时，LeNet第一层和第二层的激活值。</p>\n</li>\n</ol>\n<h2 id=\"二、现代卷积神经网络\"><a href=\"#二、现代卷积神经网络\" class=\"headerlink\" title=\"二、现代卷积神经网络\"></a>二、现代卷积神经网络</h2><h3 id=\"1、AlexNet\"><a href=\"#1、AlexNet\" class=\"headerlink\" title=\"1、AlexNet\"></a>1、AlexNet</h3><ul>\n<li><p>AlexNet。它是第一个在大规模视觉竞赛中击败传统计算机视觉模型的大型神经网络；</p>\n</li>\n<li><p>使用重复块的网络（VGG）。它利用许多重复的神经网络块；</p>\n</li>\n<li><p>网络中的网络（NiN）。它重复使用由卷积层和1×1卷积层（用来代替全连接层）来构建深层网络;</p>\n</li>\n<li><p>含并行连结的网络（GoogLeNet）。它使用并行连结的网络，通过不同窗口大小的卷积层和最大汇聚层来并行抽取信息；</p>\n</li>\n<li><p>残差网络（ResNet）。它通过残差块构建跨层的数据通道，是计算机视觉中最流行的体系架构；</p>\n</li>\n<li><p>稠密连接网络（DenseNet）。它的计算成本很高，但给我们带来了更好的效果。</p>\n</li>\n</ul>\n<p>学习表征观摩图</p>\n<p><img src=\"/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/filters.png\" alt=\"filters\"></p>\n<p><img src=\"/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/alexnet.svg\" alt=\"alexnet\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn\n<span class=\"token keyword\">from</span> d2l <span class=\"token keyword\">import</span> torch <span class=\"token keyword\">as</span> d2l\n\nnet <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n    <span class=\"token comment\"># 这里，我们使用一个11*11的更大窗口来捕捉对象。</span>\n    <span class=\"token comment\"># 同时，步幅为4，以减少输出的高度和宽度。</span>\n    <span class=\"token comment\"># 另外，输出通道的数目远大于LeNet</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 减小卷积窗口，使用填充为2来使得输入与输出的高和宽一致，且增大输出通道数</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 使用三个连续的卷积层和较小的卷积窗口。</span>\n    <span class=\"token comment\"># 除了最后的卷积层，输出通道的数量进一步增加。</span>\n    <span class=\"token comment\"># 在前两个卷积层之后，汇聚层不用于减少输入的高度和宽度</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 这里，全连接层的输出数量是LeNet中的好几倍。使用dropout层来减轻过拟合</span>\n    nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">6400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 最后是输出层。由于这里使用Fashion-MNIST，所以用类别数为10，而非论文中的1000</span>\n    nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>观察网络每一层输出架构</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> layer <span class=\"token keyword\">in</span> net<span class=\"token punctuation\">:</span>\n    X<span class=\"token operator\">=</span>layer<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">,</span><span class=\"token string\">'output shape:\\t'</span><span class=\"token punctuation\">,</span>X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">Conv2d output shape:\t torch.Size([1, 96, 54, 54])\nReLU output shape:\t torch.Size([1, 96, 54, 54])\nMaxPool2d output shape:\t torch.Size([1, 96, 26, 26])\nConv2d output shape:\t torch.Size([1, 256, 26, 26])\nReLU output shape:\t torch.Size([1, 256, 26, 26])\nMaxPool2d output shape:\t torch.Size([1, 256, 12, 12])\nConv2d output shape:\t torch.Size([1, 384, 12, 12])\nReLU output shape:\t torch.Size([1, 384, 12, 12])\nConv2d output shape:\t torch.Size([1, 384, 12, 12])\nReLU output shape:\t torch.Size([1, 384, 12, 12])\nConv2d output shape:\t torch.Size([1, 256, 12, 12])\nReLU output shape:\t torch.Size([1, 256, 12, 12])\nMaxPool2d output shape:\t torch.Size([1, 256, 5, 5])\nFlatten output shape:\t torch.Size([1, 6400])\nLinear output shape:\t torch.Size([1, 4096])\nReLU output shape:\t torch.Size([1, 4096])\nDropout output shape:\t torch.Size([1, 4096])\nLinear output shape:\t torch.Size([1, 4096])\nReLU output shape:\t torch.Size([1, 4096])\nDropout output shape:\t torch.Size([1, 4096])\nLinear output shape:\t torch.Size([1, 10])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>使用更小的学习速率训练，这是因为网络更深更广、图像分辨率更高，训练卷积神经网络就更昂贵。</p>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>AlexNet的架构与LeNet相似，但使用了更多的卷积层和更多的参数来拟合大规模的ImageNet数据集。</li>\n<li>今天，AlexNet已经被更有效的架构所超越，但它是从浅层网络到深层网络的关键一步。</li>\n<li>尽管AlexNet的代码只比LeNet多出几行，但学术界花了很多年才接受深度学习这一概念，并应用其出色的实验结果。这也是由于缺乏有效的计算工具。</li>\n<li>Dropout、ReLU和预处理是提升计算机视觉任务性能的其他关键步骤。</li>\n</ul>\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><ol>\n<li>试着增加迭代轮数。对比LeNet的结果有什么不同？为什么？</li>\n<li>AlexNet对于Fashion-MNIST数据集来说可能太复杂了。<ol>\n<li>尝试简化模型以加快训练速度，同时确保准确性不会显著下降。</li>\n<li>设计一个更好的模型，可以直接在28×28图像上工作。</li>\n</ol>\n</li>\n<li>修改批量大小，并观察模型精度和GPU显存变化。</li>\n<li>分析了AlexNet的计算性能。<ol>\n<li>在AlexNet中主要是哪部分占用显存？</li>\n<li>在AlexNet中主要是哪部分需要更多的计算？</li>\n<li>计算结果时显存带宽如何？</li>\n</ol>\n</li>\n<li>将dropout和ReLU应用于LeNet-5，效果有提升吗？再试试预处理会怎么样？</li>\n</ol>\n<h3 id=\"2、使用块的网络：-VGG-和AlexNet-没有很大的差别\"><a href=\"#2、使用块的网络：-VGG-和AlexNet-没有很大的差别\" class=\"headerlink\" title=\"2、使用块的网络： VGG (和AlexNet 没有很大的差别)\"></a>2、使用块的网络： VGG (和AlexNet 没有很大的差别)</h3><p><img src=\"/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/vgg.svg\" alt=\"vgg\"></p>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>VGG-11使用可复用的卷积块构造网络。不同的VGG模型可通过每个块中卷积层数量和输出通道数量的差异来定义。</li>\n<li>块的使用导致网络定义的非常简洁。使用块可以有效地设计复杂的网络。</li>\n<li>在VGG论文中，Simonyan和Ziserman尝试了各种架构。特别是他们发现深层且窄的卷积（即3×3）比较浅层且宽的卷积更有效。</li>\n</ul>\n<h4 id=\"3、网络中的网络-NiN\"><a href=\"#3、网络中的网络-NiN\" class=\"headerlink\" title=\"3、网络中的网络 - NiN\"></a>3、网络中的网络 - NiN</h4>",
            "tags": [
                "CNN"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/25/ml-dl-zhen-ming-ji-jiu/",
            "url": "https://www.kitx86.com/2022/03/25/ml-dl-zhen-ming-ji-jiu/",
            "title": "Ml-Dl-朕命急救",
            "date_published": "2022-03-25T10:35:26.000Z",
            "content_html": "<h4 id=\"一、竞赛预处理-整理的样板\"><a href=\"#一、竞赛预处理-整理的样板\" class=\"headerlink\" title=\"一、竞赛预处理-整理的样板\"></a>一、竞赛预处理-整理的样板</h4><h5 id=\"1、导入常见库\"><a href=\"#1、导入常见库\" class=\"headerlink\" title=\"1、导入常见库\"></a>1、导入常见库</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np  <span class=\"token comment\"># Linear algebra</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd <span class=\"token comment\"># data processing, CSV file I/O</span>\n\n\n——————————————————————————————图像数据处理部分———————————————————————————\n<span class=\"token comment\"># 内嵌绘图，可以省略 plt.show()</span>\n<span class=\"token operator\">%</span>matplotlib inline \n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt  \n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>image <span class=\"token keyword\">as</span> mpimg\n\n<span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\nplt<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">(</span><span class=\"token string\">'seaborn'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 显示风格</span>\nsns<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>style<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">=</span><span class=\"token string\">'notebook'</span><span class=\"token punctuation\">,</span> palette<span class=\"token operator\">=</span><span class=\"token string\">'deep'</span><span class=\"token punctuation\">)</span>\n\n——————————————————————————语言token处理部分——————————————————————————\n<span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS\n\n —————————————————————————可添加补充—————————————————————————————————    \n<span class=\"token keyword\">from</span> IPython<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>interactiveshell <span class=\"token keyword\">import</span> InteractiveShell <span class=\"token comment\"># idk</span>\nInteractiveShell<span class=\"token punctuation\">.</span>ast_node_interactivity <span class=\"token operator\">=</span> <span class=\"token string\">\"all\"</span> <span class=\"token comment\"># idk</span>\nplt<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'figure.figsize'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span>\nplt<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">(</span><span class=\"token string\">'fivethirtyeight'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 科学计算用的库，包含很多数学和算法的实例，吐槽~哪有这么多科学计算库</span>\n<span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> stats \n\n<span class=\"token comment\"># 数据集环境</span>\n<span class=\"token keyword\">for</span> dirname<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> filenames <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span><span class=\"token string\">'/kaggle/input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> filenmae <span class=\"token keyword\">in</span> filenames<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              \n<span class=\"token keyword\">def</span> <span class=\"token function\">highlight_max</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> props <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> np<span class=\"token punctuation\">.</span>nanmax<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># idk</span>\n\n\n\n<span class=\"token comment\"># 辅助工具</span>\n <span class=\"token comment\"># 迭代进度条，只是为了好看</span>\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm \n<span class=\"token comment\"># 看起来有点老的样子</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image \n\n        \n————————————————————————————————————————————————————————————————————\n<span class=\"token comment\"># 系统局部环境</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token comment\"># 垃圾回收机制</span>\n<span class=\"token keyword\">import</span> gc \n\n<span class=\"token comment\"># 建立深度模型所需要的</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Sequential \n<span class=\"token keyword\">from</span> keras <span class=\"token keyword\">import</span>  backend <span class=\"token keyword\">as</span> K <span class=\"token comment\"># idk</span>\n\n—————————————————————————————图像部分模型层的简易解释——————————————————————————————————\n<span class=\"token comment\"># Conv2D : 二维卷积层，互相关运算，可使用填充、步幅和多通道输入/输出</span>\n<span class=\"token comment\"># Dense : 稠密层</span>\n<span class=\"token comment\"># Dropout : 丢弃层</span>\n<span class=\"token comment\"># pool2d : 2维汇聚层，对汇聚窗口所有元素计算最大值或平均值，可使用填充、步幅和多通道输入/输出</span>\n<span class=\"token comment\"># Flatten : 平滑层</span>\n<span class=\"token comment\"># MaxPool2D : 二维汇聚计算最大值</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dense <span class=\"token punctuation\">,</span> Dropout <span class=\"token punctuation\">,</span> Lambda<span class=\"token punctuation\">,</span> Flatten Conv2D<span class=\"token punctuation\">,</span> MaxPool2D \n\n<span class=\"token comment\"># 优化函数 rmsprop_v2 , adam_v2</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>optimizers <span class=\"token keyword\">import</span> Adam <span class=\"token punctuation\">,</span>RMSprop\n<span class=\"token comment\"># 训练、验证数据分离</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split \n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> confusion_matrix <span class=\"token comment\"># idk</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>preprocessing<span class=\"token punctuation\">.</span>image <span class=\"token keyword\">import</span> ImageDataGenerator <span class=\"token comment\"># idk</span>\n\n——————————————————————————语言模型的部分解释—————————————————————————————————\n\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> LabelEncoder <span class=\"token comment\"># idk</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> StratifiedKFold <span class=\"token comment\"># idk</span>\n\n<span class=\"token keyword\">from</span> transformers <span class=\"token keyword\">import</span> AutoTokenizer<span class=\"token punctuation\">,</span> AutoConfig<span class=\"token punctuation\">,</span> AutoModel<span class=\"token punctuation\">,</span> get_linear_schedule_with_warmup \n\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>optim <span class=\"token keyword\">import</span> AdamW\n———————————————————————————————————————————————————————————————————————————\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>callbacks <span class=\"token keyword\">import</span> ReduceLROnPlateau <span class=\"token comment\"># idk</span>\n———————————————————————————————————忽略包环境的警告——————————————————————————\n<span class=\"token keyword\">import</span> warnings\nwarnings<span class=\"token punctuation\">.</span>filterwarnings<span class=\"token punctuation\">(</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span>\n\ndevice <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、检查环境状况</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> subprocess <span class=\"token keyword\">import</span> check_output\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../input\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"二、检查数据\"><a href=\"#二、检查数据\" class=\"headerlink\" title=\"二、检查数据\"></a>二、检查数据</h4><h5 id=\"1、加载提供的数据\"><a href=\"#1、加载提供的数据\" class=\"headerlink\" title=\"1、加载提供的数据\"></a>1、加载提供的数据</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/train.csv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 读入训练数据</span>\ntest <span class=\"token operator\">=</span> pd <span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/test.csv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 读入测试数据</span>\n\ntrain<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查看前面5行的信息</span>\ntrain<span class=\"token punctuation\">.</span>shape <span class=\"token comment\"># 返回整体 data 的 的信息</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Shape Dtrain:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Shape Dtest: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unique elements per column\"</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">.</span>nunique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Missing Value?\"</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n————————————————————————图像数据处理方法————————————————————————————\nX_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 形成array数组 </span>\ny_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 28*28 的值</span>\nX_test <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n\n\n———————————————————————————— 技巧 <span class=\"token punctuation\">(</span>tricks<span class=\"token punctuation\">)</span> ————————————————————————\n<span class=\"token comment\"># 一些技巧 - tricks</span>\n<span class=\"token keyword\">del</span> train <span class=\"token comment\"># can free some space ?</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2、数据可视化\"><a href=\"#2、数据可视化\" class=\"headerlink\" title=\"2、数据可视化\"></a>2、数据可视化</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># method 1</span>\nX_train <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 转变数据为图片，重新组织形状</span>\n\n<span class=\"token comment\"># method 2 : Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)</span>\nX_train <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n————————————————————————————————————————————————————————————————\nY_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 只取值的那一列标签</span>\nX_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span>labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 不要值的那一列作为训练数据</span>\ncount <span class=\"token operator\">=</span> sns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>Y_train<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计算 1-10 的数量</span>\nY_train<span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 柱状图显示 1 - 10 的数量</span>\n————————————————————————————————————————————————————————————————\n\ntop <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>anc <span class=\"token keyword\">for</span> anc <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Counter 计数标签'anchor'</span>\ntop <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取得前面 50 个</span>\n\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 绘制图表尺寸</span>\n\nsns<span class=\"token punctuation\">.</span>barplot<span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> palette <span class=\"token operator\">=</span> <span class=\"token string\">'hls'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 调色板为 hls</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>rotation <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x 轴标签可以做出一些调整</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Top 50 First Phrases (Anchor)\"</span><span class=\"token punctuation\">,</span> fontsize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n————————————————————————————————————————————————————————————————<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404083846939.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntext_len <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nsns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>text_len<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">'Word Count Distribution'</span><span class=\"token punctuation\">,</span>size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这还要取设置大小？</span>\n\navg_word_len <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 看起来这位小哥很喜欢 用 lambda 演算，分离 anchor 里的词向量来计算平均长度</span>\nsns<span class=\"token punctuation\">.</span>histplot<span class=\"token punctuation\">(</span>avg_word_len<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kde <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'#ffa408'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># kde 是开启核密度函数？,我只是看到一条线啊</span>\nax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">'Average Word Length Distribution'</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404091257020.png\"></p>\n<h2 id=\"时尚词云的display，需要配合图片组合\"><a href=\"#时尚词云的display，需要配合图片组合\" class=\"headerlink\" title=\"时尚词云的display，需要配合图片组合\"></a>时尚词云的display，需要配合图片组合</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntext <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'./img.png'</span>\n<span class=\"token comment\"># url = 'https://static.vecteezy.com/system/resources/previews/000/263/280/non_2x/vector-open-book.jpg'</span>\n<span class=\"token comment\"># 我不知道为什么链接不能有效打开</span>\nim <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 所以我只能用我自己的方式来打开</span>\n<span class=\"token comment\"># im = np.array(Image.open(requests.get(url, stream=True).raw))</span>\ncloud <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span>stopwords <span class=\"token operator\">=</span> STOPWORDS<span class=\"token punctuation\">,</span>\n                  background_color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span>\n                  mask <span class=\"token operator\">=</span> im<span class=\"token punctuation\">,</span>\n                  max_words <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>cloud<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093146238.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 针对上面的 anchor 的特征来对 target 的信息抽取</span>\n<span class=\"token comment\"># 只需要把 anchor 替换成 taraget ,action ! </span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093640583.png\"></p>\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093717734.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 看起来这个好像是 cm 来计量的</span>\nsns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">'context'</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> train<span class=\"token punctuation\">,</span> palette <span class=\"token operator\">=</span> <span class=\"token string\">'hls'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 又来计算 context 的信息，但看起来特征 context 的信息有点多啊</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>rotation <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Distribution of Context'</span><span class=\"token punctuation\">,</span> fontsize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404094416376.png\"></p>\n<h6 id=\"3、特征标准化\"><a href=\"#3、特征标准化\" class=\"headerlink\" title=\"3、特征标准化\"></a>3、特征标准化</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># method 1 : </span>\nmean_px <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 求其均值作为 np 的 float32 格式</span>\nstd_px <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span> \t\t<span class=\"token comment\"># 求其标准差作为 np 的 float32 格式</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">standardize</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>mean_px<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>std_px\n\n<span class=\"token comment\"># method 2 : Normalize the data</span>\nX_train <span class=\"token operator\">=</span> X_train <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span>\ntest <span class=\"token operator\">=</span> test <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"4、检查数据和缺失值\"><a href=\"#4、检查数据和缺失值\" class=\"headerlink\" title=\"4、检查数据和缺失值\"></a>4、检查数据和缺失值</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Check the data</span>\nX_train<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Encode labels to one hot vectors (ex : 2 -&gt; [0,0,1,0,0,0,0,0,0,0])</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>np_utils <span class=\"token keyword\">import</span> to_categorica\nY_train <span class=\"token operator\">=</span> to_categorical<span class=\"token punctuation\">(</span>Y_train<span class=\"token punctuation\">,</span> num_classes <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Set the random seed</span>\nrandom_seed <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\"># Split the train and the validation set for the fitting</span>\nX_train<span class=\"token punctuation\">,</span> X_val<span class=\"token punctuation\">,</span> Y_train<span class=\"token punctuation\">,</span> Y_val <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> Y_train<span class=\"token punctuation\">,</span> test_size <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span>random_seed<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 查看一个例子</span>\ng <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n——————————————————————————————————————————————————————————————————USPPM\nencoder <span class=\"token operator\">=</span> LabelEncoder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">[</span><span class=\"token string\">'score_encoded'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">[</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这里的 0 对应于 label 是 0，0.25 对应于 1 ，0.5 对应于 2。以此类推...</span>\nskf <span class=\"token operator\">=</span> StratifiedKFold<span class=\"token punctuation\">(</span>n_splits <span class=\"token operator\">=</span> CONFIG<span class=\"token punctuation\">.</span>num_fold<span class=\"token punctuation\">,</span>shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>random_state <span class=\"token operator\">=</span> CONFIG<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 分层k折</span>\n<span class=\"token comment\"># num_fold = 5, seed = 2022</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> val_ind<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>skf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>X <span class=\"token operator\">=</span> train<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'score_encoded'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># enumerate 中分离出来的数据是 下标 加上 train 中的值</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_ind<span class=\"token punctuation\">)</span> <span class=\"token comment\"># idk</span>\n    train<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>val_ind<span class=\"token punctuation\">,</span><span class=\"token string\">'fold'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k <span class=\"token comment\"># 将 val_ind 的下标分别 贴上 k 标志</span>\n    <span class=\"token comment\"># 通过行索引 index 中的具体值来取行数据</span>\n    <span class=\"token comment\"># iloc 是通过 行号来取行数据</span>\n<span class=\"token comment\">################# 效果还不错 ###################</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">2</span>    <span class=\"token number\">11</span>    <span class=\"token number\">13</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36468</span> <span class=\"token number\">36469</span> <span class=\"token number\">36470</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">0</span>     <span class=\"token number\">3</span>     <span class=\"token number\">5</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36459</span> <span class=\"token number\">36464</span> <span class=\"token number\">36467</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">6</span>    <span class=\"token number\">10</span>    <span class=\"token number\">14</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36465</span> <span class=\"token number\">36471</span> <span class=\"token number\">36472</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">4</span>    <span class=\"token number\">21</span>    <span class=\"token number\">26</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36457</span> <span class=\"token number\">36462</span> <span class=\"token number\">36466</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">1</span>     <span class=\"token number\">8</span>     <span class=\"token number\">9</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36455</span> <span class=\"token number\">36456</span> <span class=\"token number\">36460</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">###############################################</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"7-添加数据标签\"><a href=\"#7-添加数据标签\" class=\"headerlink\" title=\"7.添加数据标签\"></a>7.添加数据标签</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train<span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'context'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>df_cpc<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"我认为比较重要的数据集类\"><a href=\"#我认为比较重要的数据集类\" class=\"headerlink\" title=\"我认为比较重要的数据集类\"></a>我认为比较重要的数据集类</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dataset</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Dataset(data)\n      data (np.array or list-like): input_ids and y\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>max_length <span class=\"token operator\">=</span> max_length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Padding to max_length</span>\n        d <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">)</span>\n\n        input_ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        input_ids<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span>\n\n        attention_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        attention_mask<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">:</span> input_ids<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'attention_mask'</span><span class=\"token punctuation\">:</span> attention_mask<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Tokenize\"><a href=\"#Tokenize\" class=\"headerlink\" title=\"Tokenize\"></a>Tokenize</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_data</span><span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">,</span> tokenizer<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Create input_ids and label array y\n\n    Args:\n      train (pd.DataFrame)\n\n    Returns: list[dict]\n      input_ids (np.array[int])\n      n (int): seq length or number of tokens\n    \"\"\"</span>\n    sep <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>sep_token_id\n    <span class=\"token keyword\">if</span> tokenizer<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__ <span class=\"token operator\">==</span> <span class=\"token string\">'RobertaTokenizerFast'</span><span class=\"token punctuation\">:</span>\n        nsep <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        nsep <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        \n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> r <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">.</span>iterrows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        text <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>pn_history\n        feature_text <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>feature_text\n\n        o <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> feature_text<span class=\"token punctuation\">,</span>\n                      add_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span>max_length<span class=\"token punctuation\">,</span>\n                      truncation<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                      return_offsets_mapping<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Input ids</span>\n        input_ids <span class=\"token operator\">=</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_ids<span class=\"token punctuation\">)</span>\n\n        input_ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>input_ids <span class=\"token operator\">==</span> sep<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nsep  <span class=\"token comment\"># text and feature_text seperated by [SEP]; sep sep for roberta</span>\n        \n        <span class=\"token comment\"># Attention mask</span>\n        attention_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">'attention_mask'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>attention_mask <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'row_id'</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">:</span> input_ids<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'offset_mapping'</span><span class=\"token punctuation\">:</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">'offset_mapping'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> model_dir<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> dropout<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> pretrained<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        config <span class=\"token operator\">=</span> AutoConfig<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>model_dir<span class=\"token punctuation\">,</span> add_pooling_layer<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> pretrained<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> AutoModel<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>model_dir<span class=\"token punctuation\">,</span> config<span class=\"token operator\">=</span>config<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> AutoModel<span class=\"token punctuation\">.</span>from_config<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>fc_dropout <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>dropout<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>_init_weights<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_init_weights</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        module<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>normal_<span class=\"token punctuation\">(</span>mean<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>initializer_range<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> module<span class=\"token punctuation\">.</span>bias <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            module<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>zero_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_ids<span class=\"token punctuation\">,</span> attention_mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">(</span>input_ids<span class=\"token punctuation\">,</span> attention_mask<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> out<span class=\"token punctuation\">[</span><span class=\"token string\">'last_hidden_state'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># batch_size x max_length (512) x 768</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc_dropout<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"三、建立模型（CNN、\"><a href=\"#三、建立模型（CNN、\" class=\"headerlink\" title=\"三、建立模型（CNN、)\"></a>三、建立模型（CNN、)</h4><h5 id=\"1、model\"><a href=\"#1、model\" class=\"headerlink\" title=\"1、model\"></a>1、model</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># A CNN model example</span>\nmodel <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>MaxPool2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>MaxPool2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">\"relu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">\"softmax\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2、后续运作步骤\"><a href=\"#2、后续运作步骤\" class=\"headerlink\" title=\"2、后续运作步骤\"></a>2、后续运作步骤</h5><p>一旦我们的层被添加到模型中，我们需要设置一个评分函数、一个损失函数和一个优化算法。<br>我们定义损失函数来衡量我们的模型在具有已知标签的图像上的表现有多差。它是观察到的标签和预测的标签之间的错误率。我们使用称为“categorical crossentropy”的分类分类（&gt;2 类）的特定形式。<br>最重要的功能是优化器。这个函数将迭代地改进参数（过滤核值、权重和神经元的偏差……）以最小化损失。<br>我选择了 RMSprop（带有默认值），它是一个非常有效的优化器。 RMSProp 更新以一种非常简单的方式调整 Adagrad 方法，试图降低其激进的、单调递减的学习率。我们也可以使用随机梯度下降 (‘sgd’) 优化器，但它比 RMSprop 慢。<br>度量函数“准确度”用于评估我们模型的性能。该度量函数类似于损失函数，只是在训练模型时不使用度量评估的结果（仅用于评估）。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># Define the optimizer\noptimizer = rmsprop_v2(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0) # 这里有一点问题，不能正常运行\n\n# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了使优化器更快收敛并最接近损失函数的全局最小值，我使用了学习率（LR）的退火方法。<br>LR 是优化器遍历“损失情况”的步骤。 LR越高，步数越大，收敛越快。然而，高 LR 的采样非常差，优化器可能会陷入局部最小值。<br>最好在训练期间降低学习率，以有效地达到损失函数的全局最小值。<br>为了保持高 LR 的快速计算时间的优势，我每 X 步（时期）动态降低 LR，这取决于是否有必要（当精度没有提高时）。<br>使用 Keras.callbacks 中的 ReduceLROnPlateau 函数，如果 3 个 epoch 后精度没有提高，我选择将 LR 减少一半。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Set a learning rate annealer</span>\nlearning_rate_reduction <span class=\"token operator\">=</span> ReduceLROnPlateau<span class=\"token punctuation\">(</span>monitor<span class=\"token operator\">=</span><span class=\"token string\">'val_acc'</span><span class=\"token punctuation\">,</span> \n                                            patience<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> \n                                            verbose<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n                                            factor<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> \n                                            min_lr<span class=\"token operator\">=</span><span class=\"token number\">0.00001</span><span class=\"token punctuation\">)</span>\nepochs <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># Turn epochs to 30 to get 0.9967 accuracy</span>\nbatch_size <span class=\"token operator\">=</span> <span class=\"token number\">86</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"3、数据增加\"><a href=\"#3、数据增加\" class=\"headerlink\" title=\"3、数据增加\"></a>3、数据增加</h5><p>为了避免过拟合问题，我们需要人为地扩展我们的手写数字数据集。我们可以使您现有的数据集更大。这个想法是通过小的转换来改变训练数据，以重现当有人写数字时发生的变化。<br>比如数字不居中 比例不一样（有些人用大/小数字写） 图像旋转…<br>以改变数组表示同时保持标签相同的方式改变训练数据的方法被称为数据增强技术。人们使用的一些流行的增强是灰度、水平翻转、垂直翻转、随机裁剪、颜色抖动、平移、旋转等等。<br>通过将这些转换中的几个应用于我们的训练数据，我们可以轻松地将训练示例的数量增加一倍或三倍，并创建一个非常强大的模型。<br>改进很重要：<br>在没有数据增强的情况下，我获得了 98.114% 的准确率<br>通过数据增强，我达到了 99.67% 的准确率</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># With data augmentation to prevent overfitting (accuracy 0.99286)</span>\n\ndatagen <span class=\"token operator\">=</span> ImageDataGenerator<span class=\"token punctuation\">(</span>\n        featurewise_center<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># set input mean to 0 over the dataset</span>\n        samplewise_center<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># set each sample mean to 0</span>\n        featurewise_std_normalization<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># divide inputs by std of the dataset</span>\n        samplewise_std_normalization<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># divide each input by its std</span>\n        zca_whitening<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># apply ZCA whitening</span>\n        rotation_range<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly rotate images in the range (degrees, 0 to 180)</span>\n        zoom_range <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># Randomly zoom image </span>\n        width_shift_range<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly shift images horizontally (fraction of total width)</span>\n        height_shift_range<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly shift images vertically (fraction of total height)</span>\n        horizontal_flip<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly flip images</span>\n        vertical_flip<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># randomly flip images</span>\n\n\ndatagen<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于数据扩充，我选择：<br>将一些训练图像随机旋转 10 度<br>一些训练图像随机缩放 10%<br>将图像水平随机移动 10% 的宽度<br>随机将图像垂直移动 10% 的高度<br>我没有应用vertical_flip 或horizontal_flip，因为它可能导致错误分类对称数字，例如6 和9。<br>一旦我们的模型准备好，我们就可以拟合训练数据集。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Fit the model</span>\nhistory <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>fit_generator<span class=\"token punctuation\">(</span>datagen<span class=\"token punctuation\">.</span>flow<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span>Y_train<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                              epochs <span class=\"token operator\">=</span> epochs<span class=\"token punctuation\">,</span> validation_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>X_val<span class=\"token punctuation\">,</span>Y_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                              verbose <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> steps_per_epoch<span class=\"token operator\">=</span>X_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> batch_size\n                              <span class=\"token punctuation\">,</span> callbacks<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>learning_rate_reduction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"四、评估模型\"><a href=\"#四、评估模型\" class=\"headerlink\" title=\"四、评估模型\"></a>四、评估模型</h4><h5 id=\"1、训练和验证曲线-Training-and-validation-curves\"><a href=\"#1、训练和验证曲线-Training-and-validation-curves\" class=\"headerlink\" title=\"1、训练和验证曲线-Training and validation curves\"></a>1、训练和验证曲线-Training and validation curves</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2.混淆矩阵</p>\n<p>混淆矩阵对于查看您的模型缺陷非常有帮助。<br>我绘制了验证结果的混淆矩阵。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] &gt; thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这里我们可以看到，考虑到验证集（4200 张图像）的大小，我们的 CNN 在所有数字上的表现都非常好，几乎没有错误。<br>但是，我们的 CNN 似乎在 4 位上有一些小问题，嘿嘿被误分类为 9。有时当曲线平滑时很难捕捉到 4 和 9 之间的差异。</p>\n<p>让我们调查一下错误。<br>我想看看最重要的错误。为此，我需要得到结果中实际值概率与预测值概率之间的差异。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Display some error results </span>\n\n<span class=\"token comment\"># Errors are difference between predicted labels and true labels</span>\nerrors <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Y_pred_classes <span class=\"token operator\">-</span> Y_true <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nY_pred_classes_errors <span class=\"token operator\">=</span> Y_pred_classes<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nY_pred_errors <span class=\"token operator\">=</span> Y_pred<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nY_true_errors <span class=\"token operator\">=</span> Y_true<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nX_val_errors <span class=\"token operator\">=</span> X_val<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">display_errors</span><span class=\"token punctuation\">(</span>errors_index<span class=\"token punctuation\">,</span>img_errors<span class=\"token punctuation\">,</span>pred_errors<span class=\"token punctuation\">,</span> obs_errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" This function shows 6 images with their predicted and real labels\"\"\"</span>\n    n <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    nrows <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    ncols <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>nrows<span class=\"token punctuation\">,</span>ncols<span class=\"token punctuation\">,</span>sharex<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>sharey<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>nrows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ncols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            error <span class=\"token operator\">=</span> errors_index<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n            ax<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>img_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            ax<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Predicted label :{}\\nTrue label :{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>pred_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>obs_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\"># Probabilities of the wrong predicted numbers</span>\nY_pred_errors_prob <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>Y_pred_errors<span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Predicted probabilities of the true values in the error set</span>\ntrue_prob_errors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>diagonal<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>take<span class=\"token punctuation\">(</span>Y_pred_errors<span class=\"token punctuation\">,</span> Y_true_errors<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Difference between the probability of the predicted label and the true label</span>\ndelta_pred_true_errors <span class=\"token operator\">=</span> Y_pred_errors_prob <span class=\"token operator\">-</span> true_prob_errors\n\n<span class=\"token comment\"># Sorted list of the delta prob errors</span>\nsorted_dela_errors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>delta_pred_true_errors<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Top 6 errors </span>\nmost_important_errors <span class=\"token operator\">=</span> sorted_dela_errors<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Show the top 6 errors</span>\ndisplay_errors<span class=\"token punctuation\">(</span>most_important_errors<span class=\"token punctuation\">,</span> X_val_errors<span class=\"token punctuation\">,</span> Y_pred_classes_errors<span class=\"token punctuation\">,</span> Y_true_errors<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最重要的错误也是最狡猾的。<br>对于这六个案例，该模型并不荒谬。其中一些错误也可能是人为的，特别是对于非常接近 4 的 9。最后的 9 也很容易产生误导，对我来说似乎是 0。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># predict results</span>\nresults <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># select the indix with the maximum probability</span>\nresults <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nresults <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Label\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">submission <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"ImageId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>results<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nsubmission<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"cnn_mnist_datagen.csv\"</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "kaggle",
                "常见数据处理"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/17/ml-dl-asamplemodel/",
            "url": "https://www.kitx86.com/2022/03/17/ml-dl-asamplemodel/",
            "title": "ML-DL-ASampleModel",
            "date_published": "2022-03-17T04:08:09.000Z",
            "content_html": "<h4 id=\"在-kaggle-上写的一个简陋模型\"><a href=\"#在-kaggle-上写的一个简陋模型\" class=\"headerlink\" title=\"在 kaggle 上写的一个简陋模型\"></a>在 kaggle 上写的一个简陋模型</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np <span class=\"token comment\"># linear algebra</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd <span class=\"token comment\"># data processing, CSV file I/O (e.g. pd.read_csv)</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeRegressor  <span class=\"token comment\"># 决策树</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_absolute_error <span class=\"token comment\"># 绝对均值误差</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split <span class=\"token comment\"># 训练测试分离</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> RandomForestRegressor <span class=\"token comment\"># 随机森林</span>\n\n<span class=\"token comment\"># 读入数据</span>\ntrain <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'./train.csv'</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'./test.csv'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 训练集的统计</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">test<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 要预测  SalePrice</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train<span class=\"token punctuation\">.</span>columns  <span class=\"token comment\"># check columns infos</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">test<span class=\"token punctuation\">.</span>columns <span class=\"token comment\"># here have benn means to  predict \"SalePrice\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">feature_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"LotArea\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"YearBuilt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1stFlrSF\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2ndFlrSF\"</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token string\">\"FullBath\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BedroomAbvGr\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"TotRmsAbvGrd\"</span><span class=\"token punctuation\">]</span>\nX <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span>feature_names<span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>SalePrice<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">wrong_model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># build model</span>\n\n<span class=\"token comment\"># fit the model</span>\nwrong_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># make predictions</span>\npredictions <span class=\"token operator\">=</span> wrong_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>predictions<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># split in and uncomment</span>\ntrain_X<span class=\"token punctuation\">,</span> val_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">,</span> val_y <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># specify the model</span>\nafter_model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># fit after_model with training data.</span>\nafter_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">val_predictions <span class=\"token operator\">=</span> after_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_predictions<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">val_mae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">,</span>val_predictions<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_mae<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># we will write the mean_absolute_error as a function</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_mae</span><span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token punctuation\">,</span>train_X<span class=\"token punctuation\">,</span>val_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">,</span>val_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token operator\">=</span>max_leaf_nodes<span class=\"token punctuation\">,</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">)</span>\n    preds_val <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\n    mae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">,</span>preds_val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mae<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">candidate_max_leaf_nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># write loop to find the ideal tree size</span>\n<span class=\"token comment\"># intermediate for loop writing</span>\n\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>leaf_size<span class=\"token punctuation\">:</span> get_mae<span class=\"token punctuation\">(</span>leaf_size<span class=\"token punctuation\">,</span>train_X<span class=\"token punctuation\">,</span>val_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">,</span>val_y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> leaf_size <span class=\"token keyword\">in</span> candidate_max_leaf_nodes<span class=\"token punctuation\">}</span>\nbest_tree_size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">,</span>key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> scores<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>best_tree_size<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># write the final model with fill n arguments</span>\nfinal_model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token operator\">=</span>best_tree_size<span class=\"token punctuation\">,</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nfinal_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\nfinal_test <span class=\"token operator\">=</span> final_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\nfinal_test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># try use the rf-model</span>\nrf_model <span class=\"token operator\">=</span> RandomForestRegressor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrf_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># this is me write down a corresponding right trick</span>\nrf_val_mae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>rf_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>val_y<span class=\"token punctuation\">)</span>\nrf_val_mae<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">final_predictions <span class=\"token operator\">=</span> rf_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># check the predictions</span>\nfinal_predictions<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">output <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Id'</span><span class=\"token punctuation\">:</span> test_data<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span>\n                       <span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">:</span> test_preds<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\noutput<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'submission.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4>",
            "tags": [
                "kaggle",
                "ML"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/11/ml-dl-logistic-hui-gui-ji-ben-gai-nian/",
            "url": "https://www.kitx86.com/2022/03/11/ml-dl-logistic-hui-gui-ji-ben-gai-nian/",
            "title": "ML-DL-logistic回归基本概念",
            "date_published": "2022-03-10T16:14:31.000Z",
            "content_html": "<h4 id=\"logistic回归\"><a href=\"#logistic回归\" class=\"headerlink\" title=\"logistic回归\"></a>logistic回归</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">##  基础函数库</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np \n\n<span class=\"token comment\">## 导入画图库</span>\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\n\n<span class=\"token comment\">## 导入逻辑回归模型函数</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LogisticRegression<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/09/ml-dl-kaggle-part1/",
            "url": "https://www.kitx86.com/2022/03/09/ml-dl-kaggle-part1/",
            "title": "ML-DL-kaggle-Part1",
            "date_published": "2022-03-08T17:48:41.000Z",
            "content_html": "<h4 id=\"kaggle里要如何融合模型及一般的操作方式\"><a href=\"#kaggle里要如何融合模型及一般的操作方式\" class=\"headerlink\" title=\"kaggle里要如何融合模型及一般的操作方式\"></a>kaggle里要如何融合模型及一般的操作方式</h4><p>原址：kaggle上找不到了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy  <span class=\"token comment\"># linear algebra</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token comment\"># 数据清洗，初阶工作部分来处理csv部分</span>\n<span class=\"token keyword\">import</span> os <span class=\"token comment\"># 读取文件路径</span>\n\n\n<span class=\"token comment\"># 此场景用于kaggle提供的notebook</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">'../input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntrain <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/(kaggle competition name)/train.csv'</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/(kaggle competition name)/test.csv'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 查看数据的维度</span>\ntrain<span class=\"token punctuation\">.</span>shape <span class=\"token comment\"># print('Train set size:',train.shape)</span>\n<span class=\"token comment\"># 对于一些无效的数据需要进行不可避免的处理,比如扔掉</span>\ntrain<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'标签列'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#导入计算模块，对模块大致功能注解：</span>\n<span class=\"token comment\">#numpy支持矩阵运算</span>\n<span class=\"token comment\">#pandas用来做数据清洗，像是python中的excel（支持将数据以.csv格式输出至本地）</span>\n<span class=\"token comment\">#sklearn用来进一步制作数据集（支持数据的导入和数据的导出），含有SVM支持向量机、DT决策树、KNN近邻、LR逻辑回归等封装好的模型，支持对数据进行交叉验证以调参。</span>\n<span class=\"token comment\">#mlxtend用来实现集成学习：bagging, boosting, stacking</span>\n<span class=\"token comment\">#lightgbm内有boosting tree（相比xgboost，改进了生成节点的方式）</span>\n<span class=\"token comment\">#xgboost内有boosting tree</span>\n<span class=\"token comment\">#os用来读取文件</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np  <span class=\"token comment\"># linear algebra</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd  <span class=\"token comment\">#</span>\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">import</span> skew  <span class=\"token comment\"># for some statistics</span>\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>special <span class=\"token keyword\">import</span> boxcox1p\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">import</span> boxcox_normmax\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> ElasticNetCV<span class=\"token punctuation\">,</span> LassoCV<span class=\"token punctuation\">,</span> RidgeCV\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> GradientBoostingRegressor\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>svm <span class=\"token keyword\">import</span> SVR\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>pipeline <span class=\"token keyword\">import</span> make_pipeline\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> RobustScaler\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> KFold<span class=\"token punctuation\">,</span> cross_val_score\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_squared_error\n<span class=\"token keyword\">from</span> mlxtend<span class=\"token punctuation\">.</span>regressor <span class=\"token keyword\">import</span> StackingCVRegressor\n<span class=\"token keyword\">from</span> xgboost <span class=\"token keyword\">import</span> XGBRegressor\n<span class=\"token keyword\">from</span> lightgbm <span class=\"token keyword\">import</span> LGBMRegressor\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token comment\">#######################################################数据导入和特征提取-【开始】################################################################################</span>\n<span class=\"token comment\">#显示当前编译器的Draft Environment下的文件；将文件夹下的对应名称csv文件储存为矩阵对象。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"../input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntrain <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/house-prices-advanced-regression-techniques/train.csv'</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/house-prices-advanced-regression-techniques/test.csv'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#显示矩阵对象的维数，核查是否导入成功</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Train set size:\"</span><span class=\"token punctuation\">,</span> train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test set size:\"</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#记录运算开始的时间</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'START data processing'</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#取出train矩阵（或者称之为“数据帧”dataframe）中title为'Id'的列，赋值给train_ID。所以train_ID是一维列向量了。test_ID类似。</span>\n<span class=\"token comment\">#train_ID和test_ID根本就没有使用，完全可以删除。</span>\n<span class=\"token comment\">#train_ID = train['Id']</span>\n<span class=\"token comment\">#test_ID = test['Id']</span>\n\n<span class=\"token comment\">##################删除训练集和测试集中的标签列-【开始】#################</span>\n<span class=\"token comment\">#将train矩阵中的'Id'列删除（原地删除，故将inplace设为true），因为原始数据中的数据索引和预测模型的构建没有关系。</span>\n<span class=\"token comment\">#test矩阵类似。</span>\ntrain<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ntest<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">##################删除训练集和测试集中的标签列-【结束】#################</span>\n\n<span class=\"token comment\">###############删除训练集中的极端值和进行数据index更新-【开始】#########</span>\n<span class=\"token comment\">#使用条件筛选操作，通过覆值的方式剔除原始数据train矩阵中的极端值（极端值也被称为outliers），帮助预防房价预测模型出现过拟合。剔除操作也可以视为前剪枝。</span>\ntrain <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">.</span>GrLivArea <span class=\"token operator\">&lt;</span> <span class=\"token number\">4500</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#由于删去了部分行，故此时train矩阵中的index列并不连续。使用reset_index命令，在固定非index数据的顺序的前提下（inplace=True），重新对index编号（drop=True）。</span>\ntrain<span class=\"token punctuation\">.</span>reset_index<span class=\"token punctuation\">(</span>drop<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">###############删除训练集中的极端值和进行数据index更新-【结束】#########</span>\n\n<span class=\"token comment\">##########对预测目标数值进行对数变换和特征矩阵对象的创建-【开始】#######</span>\n<span class=\"token comment\"># log1p就是log(1+x)，用来对房价数据进行数据预处理，它的好处是转化后的数据更加服从高斯分布，有利于后续的分类结果。</span>\n<span class=\"token comment\"># 需要注意，最后需要将预测出的平滑数据还原，而还原过程就是log1p的逆运算expm1。</span>\ntrain<span class=\"token punctuation\">[</span><span class=\"token string\">\"SalePrice\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>log1p<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">[</span><span class=\"token string\">\"SalePrice\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#单独取出训练数据中的房价列信息，存入y对象。</span>\n<span class=\"token comment\">#y = train.SalePrice.reset_index(drop=True) #.reset_index(drop=True)方法：在原有的索引列重置索引，不再另外添加新列。有必要使用reset_index吗？有必要的，不这样做y将有两套index，作为df的y将有两列。</span>\ny <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>reset_index<span class=\"token punctuation\">(</span>drop<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#对上式的改写</span>\n<span class=\"token comment\">#沿着水平的方向寻找列名为'SalePrice'的列（们），把它们对应的列统统删掉。得到了单纯的特征矩阵，存入train_features对象中。</span>\ntrain_features <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#test本来就没有房价列，所以它本来就是单纯的特征矩阵。</span>\ntest_features <span class=\"token operator\">=</span> test\n<span class=\"token comment\">##########对预测目标数值进行对数变换和特征矩阵对象的创建-【结束】#######</span>\n\n<span class=\"token comment\">##合并训练数据特征矩阵与测试数据特征矩阵，以便统一进行特征处理-【开始】##</span>\n<span class=\"token comment\">#将训练数据中的特征矩阵和测试数据中的特征矩阵合并（.concat[矩阵1,矩阵2]），并对合并后的矩阵index重新编号（.reset_index(drop=True)）。</span>\nfeatures <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>train_features<span class=\"token punctuation\">,</span> test_features<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reset_index<span class=\"token punctuation\">(</span>drop<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#检查合并后的矩阵的维数，核查合并结果。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"剔除训练数据中的极端值后，将其特征矩阵和测试数据中的特征矩阵合并，维度为:\"</span><span class=\"token punctuation\">,</span>features<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">##合并训练数据特征矩阵与测试数据特征矩阵，以便统一进行特征处理-【结束】##</span>\n<span class=\"token comment\">#######################################################数据导入和特征提取-【结束】################################################################################</span>\n\n<span class=\"token comment\">##############################################################特征处理-【开始】###################################################################################</span>\n<span class=\"token comment\">#对于列名为'MSSubClass'、'YrSold'、'MoSold'的特征列，将列中的数据类型转化为string格式。</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'MSSubClass'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'MSSubClass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'YrSold'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'YrSold'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'MoSold'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'MoSold'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">###############################填充空值-【开始】##########################</span>\n<span class=\"token comment\">#按照以下各个特征列的实际情况，依次处理各个特征列中的空值（.fillna()方法）</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'Functional'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'Functional'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token string\">'Typ'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#空值填充为str型数据'Typ'</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'Electrical'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'Electrical'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token string\">\"SBrkr\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#空值填充为str型数据\"SBrkr\"</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'KitchenQual'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'KitchenQual'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token string\">\"TA\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#空值填充为str型数据\"TA\"</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">\"PoolQC\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">\"PoolQC\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token string\">\"None\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#空值填充为str型数据\"None\"</span>\n\n<span class=\"token comment\">#对于列名为'Exterior1st'、'Exterior2nd'、'SaleType'的特征列，使用列中的众数填充空值。</span>\n<span class=\"token comment\">#\t1.先查找数据列中的众数：使用df.mode()[]方法</span>\n<span class=\"token comment\">#\t  解释：df.mode(0或1,0表示对列查找，1表示对行查找)[需要查找众数的df列的index（就是df中的第几列）]，将返回数据列中的众数</span>\n<span class=\"token comment\">#\t2.使用.fillna()方法进行填充</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'Exterior1st'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'Exterior1st'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'Exterior1st'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'Exterior2nd'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'Exterior2nd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'Exterior2nd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'SaleType'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'SaleType'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'SaleType'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#对于列名为'GarageYrBlt', 'GarageArea', 'GarageCars'的特征列，使用0填充空值。</span>\n<span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'GarageYrBlt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GarageArea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GarageCars'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    features<span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#对于列名为'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'的特征列，使用字符串'None'填充空值。</span>\n<span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GarageType'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GarageFinish'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GarageQual'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GarageCond'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    features<span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token string\">'None'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#对于列名为'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'的特征列，使用字符串'None'填充空值。</span>\n<span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'BsmtQual'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BsmtCond'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BsmtExposure'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BsmtFinType1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BsmtFinType2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    features<span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token string\">'None'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#聚合函数（按某一列关键字分组）groupby，它的特点是：将返回与传入方法的矩阵维度相同的单个序列。</span>\n<span class=\"token comment\">#transform是与groupby（pandas中最有用的操作之一）通常组合使用，它对传入方法的矩阵进行维度不变的变换。具体变换方法写在括号中，通常会使用匿名函数，对传入矩阵的所有元素进行操作。</span>\n<span class=\"token comment\">#对于features矩阵，按照'MSSubClass'列中的元素分布进行分组，被分组的数据列是'MSZoning'列。feature.groupby(被作为索引的列的名称)[被分组的数据列的名称]</span>\n<span class=\"token comment\">#features.groupby('MSSubClass')['MSZoning']后，得到的是一个以'MSSubClass'为索引，以'MSZoning'为数据列的矩阵。</span>\n<span class=\"token comment\">#.transform()方法将对'MSZoning'数据列进行()内的变换，它将返回和传入矩阵同样维度的矩阵。</span>\n<span class=\"token comment\">#括号内是匿名函数，将对传入矩阵中的空值进行填充，使用的填充元素是传入矩阵中的众数。</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'MSZoning'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'MSSubClass'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'MSZoning'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#判断出features矩阵中列为对象的列，将列名存入objects叔祖。对于features矩阵中的各个列对象，将其列中的空值填充为'None'</span>\nobjects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> features<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> features<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dtype <span class=\"token operator\">==</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n        objects<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span>objects<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token string\">'None'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#使用传入矩阵（'LotFrontage'列）的中位数对传入矩阵中的空值进行填充。</span>\n<span class=\"token comment\">#先以'Neighborhood'为标签，以'LotFrontage'为被汇总序列。然后使用被汇总序列中的中位数，对原始矩阵'LotFrontage'列中的空值进行填充。</span>\n<span class=\"token comment\">#transform的特性是同维操作，最后输出结果的顺序和原始数据在序号上完全匹配。</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'LotFrontage'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'Neighborhood'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'LotFrontage'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>median<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#对于整型和浮点型数据列，使用0填充其中的空值。</span>\nnumeric_dtypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'int16'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int64'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'float16'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'float32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'float64'</span><span class=\"token punctuation\">]</span>\nnumerics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> features<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> features<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dtype <span class=\"token keyword\">in</span> numeric_dtypes<span class=\"token punctuation\">:</span>\n        numerics<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span>numerics<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">###############################填充空值-【结束】##########################</span>\n\n<span class=\"token comment\">######################数字型数据列偏度校正-【开始】#######################</span>\n<span class=\"token comment\">#使用skew()方法，计算所有整型和浮点型数据列中，数据分布的偏度（skewness）。</span>\n<span class=\"token comment\">#偏度是统计数据分布偏斜方向和程度的度量，是统计数据分布非对称程度的数字特征。亦称偏态、偏态系数。 </span>\nnumeric_dtypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'int16'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int64'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'float16'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'float32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'float64'</span><span class=\"token punctuation\">]</span>\nnumerics2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> features<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> features<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dtype <span class=\"token keyword\">in</span> numeric_dtypes<span class=\"token punctuation\">:</span>\n        numerics2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nskew_features <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span>numerics2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> skew<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>ascending<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#以0.5作为基准，统计偏度超过此数值的高偏度分布数据列，获取这些数据列的index。</span>\nhigh_skew <span class=\"token operator\">=</span> skew_features<span class=\"token punctuation\">[</span>skew_features <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span>\nskew_index <span class=\"token operator\">=</span> high_skew<span class=\"token punctuation\">.</span>index\n\n<span class=\"token comment\">#对高偏度数据进行处理，将其转化为正态分布。</span>\n<span class=\"token comment\">#Box和Cox提出的变换可以使线性回归模型满足线性性、独立性、方差齐次以及正态性的同时，又不丢失信息。</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> skew_index<span class=\"token punctuation\">:</span>\n    features<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> boxcox1p<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> boxcox_normmax<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#这是boxcox1p的使用方法，参数的具体意义暂时不解释</span>\n<span class=\"token comment\">######################数字型数据列偏度校正-【结束】#######################</span>\n\n<span class=\"token comment\">######################特征删除和融合创建新特征-【开始】###################</span>\n<span class=\"token comment\">#删除一些特征。df.drop（‘列名’, axis=1）代表将‘列名’对应的列标签（们）沿着水平的方向依次删掉。</span>\nfeatures <span class=\"token operator\">=</span> features<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Utilities'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Street'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PoolQC'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#融合多个特征，生成新特征。</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'YrBltAndRemod'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'YearBuilt'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'YearRemodAdd'</span><span class=\"token punctuation\">]</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'TotalSF'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'TotalBsmtSF'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'1stFlrSF'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'2ndFlrSF'</span><span class=\"token punctuation\">]</span>\n\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'Total_sqr_footage'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'BsmtFinSF1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'BsmtFinSF2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n                                 features<span class=\"token punctuation\">[</span><span class=\"token string\">'1stFlrSF'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'2ndFlrSF'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'Total_Bathrooms'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'FullBath'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'HalfBath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                               features<span class=\"token punctuation\">[</span><span class=\"token string\">'BsmtFullBath'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'BsmtHalfBath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'Total_porch_sf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">[</span><span class=\"token string\">'OpenPorchSF'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'3SsnPorch'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n                              features<span class=\"token punctuation\">[</span><span class=\"token string\">'EnclosedPorch'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'ScreenPorch'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n                              features<span class=\"token punctuation\">[</span><span class=\"token string\">'WoodDeckSF'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#简化特征。对于某些分布单调（比如100个数据中有99个的数值是0.9，另1个是0.1）的数字型数据列，进行01取值处理。</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'haspool'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'PoolArea'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'has2ndfloor'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'2ndFlrSF'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'hasgarage'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'GarageArea'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'hasbsmt'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'TotalBsmtSF'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nfeatures<span class=\"token punctuation\">[</span><span class=\"token string\">'hasfireplace'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> features<span class=\"token punctuation\">[</span><span class=\"token string\">'Fireplaces'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#检查特征处理后，特征矩阵的维数，核查特征处理结果。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除了3个特征，又融合创建了10个新特征，处理之后的特征矩阵维度为:\"</span><span class=\"token punctuation\">,</span>features<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">######################特征删除和融合创建新特征-【结束】###################</span>\n\n<span class=\"token comment\">####################特征投影、特征矩阵拆解和截取-【开始】#################</span>\n<span class=\"token comment\">#使用.get_dummies()方法对特征矩阵进行类似“坐标投影”操作。获得在新空间下的特征表达。</span>\nfinal_features <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>get_dummies<span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reset_index<span class=\"token punctuation\">(</span>drop<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#打印新空间下的特征维数，也是新空间的维数。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用get_dummies()方法“投影”特征矩阵，即分解出更多特征，得到更多列。投影后的特征矩阵维度为:\"</span><span class=\"token punctuation\">,</span>final_features<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#进行特征空间降阶。截取前len(y)行，存入X阵（因为之前进行了训练数据和测试数据的合并，所以从合并矩阵中取出前len(y)行，就得到了训练数据集的处理后的特征矩阵）。</span>\n<span class=\"token comment\">#截取剩余部分，即从序号为len(y)的行开始，至矩阵结尾的各行，存入X_sub阵。此为完成特征变换后的测试集特征矩阵。</span>\n<span class=\"token comment\">#注：len(df)是行计数方法</span>\nX <span class=\"token operator\">=</span> final_features<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\t<span class=\"token comment\">#y是列向量，存储了训练数据中的房价列信息。截取后得到的X阵的维度是len(y)*(final_features的列数)。</span>\nX_sub <span class=\"token operator\">=</span> final_features<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#使用len命令，求矩阵X的长度，得到的是矩阵对象的长度，即有矩阵中有多少列，而不是每列上有多少行。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除了3个特征，又融合创建了10个新特征，处理之后的特征矩阵维度为:\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> <span class=\"token string\">'X_sub'</span><span class=\"token punctuation\">,</span> X_sub<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#在新生特征空间中，剔除X阵和y阵中有着极端值的各行数据（因为X和y阵在水平方向上是一致的，所以要一起删除同样的行）。outliers数值中给出了极端值的列序号。</span>\n<span class=\"token comment\">#df.drop(df.index[序号])将删除指定序号的各行。再使用=对df覆值。</span>\noutliers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">631</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1322</span><span class=\"token punctuation\">]</span>\nX <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span>outliers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#因为X阵是经过对特征矩阵进行类似“坐标投影”操作后得到的，列向量y中的行号对应着X阵中的列号。</span>\ny <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span>outliers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">####################特征投影、特征矩阵拆解和截取-【结束】#################</span>\n\n<span class=\"token comment\">######################消除截取后特征矩阵的过拟合-【开始】#######################  这一步的目的是处理X阵和X_sub阵。</span>\n<span class=\"token comment\">#在新生特征空间中，删除将产生过拟合的数据列。</span>\n\n<span class=\"token comment\">#这种数据列具有如下特征：</span>\noverfit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#用来记录产生过拟合的数据列的序号</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> X<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">:</span><span class=\"token comment\">#遍历截取后特征矩阵的每一列</span>\n    counts <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#使用.value_counts()方法，查看在X矩阵的第i列中，不同的取值分别出现了多少次，默认按次数最高到最低做降序排列。返回一个df。</span>\n    zeros <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#通过行号索引行数据，取出counts列中第一个元素，即出现次数最多的取值到底是出现了多少次，存入zeros</span>\n    <span class=\"token keyword\">if</span> zeros <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">99.94</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#判断某一列是否将产生过拟合的条件：</span>\n<span class=\"token comment\">#截取后的特征矩阵有len(X)列，如果某一列中的某个值出现的次数除以特征矩阵的列数超过99.94%，即其几乎在被投影的各个维度上都有着同样的取值，并不具有“主成分”的性质，则记为过拟合列。</span>\n        overfit<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#找到将产生过拟合的数据列的位置后，在特征矩阵中进行删除操作。</span>\noverfit <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>overfit<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#overfit.append('MSZoning_C (all)')#这条语句有用吗？是要把训练数据特征矩阵X中的列标签为'MSZoning_C (all)'的列也删除吗？但是训练数据中并没有任何一个列标签名称为MSZoning_C (all)。</span>\nX <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span>overfit<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#.copy()#删除截取后特征矩阵X中的过拟合列。因为drop并不影响原数据，所以使用copy。直接覆值应该也可以。</span>\nX_sub <span class=\"token operator\">=</span> X_sub<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span>overfit<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#.copy()</span>\n<span class=\"token comment\">######################消除截取后特征矩阵的过拟合-【结束】#######################</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除极端值及过拟合列后，训练数据特征矩阵的维数为，特征：\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> <span class=\"token string\">'对应于特征的对数变换后的房价y'</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> <span class=\"token string\">'测试数据的特征矩阵（它应该在行、列上未被删减）X_sub'</span><span class=\"token punctuation\">,</span> X_sub<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">##############################################################特征处理-【结束】###################################################################################</span>\n\n<span class=\"token comment\">##############################################################机器学习-【开始】###################################################################################</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'特征处理已经完成。开始对训练数据进行机器学习'</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#设置k折交叉验证的参数。</span>\nkfolds <span class=\"token operator\">=</span> KFold<span class=\"token punctuation\">(</span>n_splits<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#定义均方根对数误差（Root Mean Squared Logarithmic Error ，RMSLE）</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">rmsle</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>mean_squared_error<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#创建模型评分函数，根据不同模型的表现打分</span>\n<span class=\"token comment\">#cv表示Cross-validation,交叉验证的意思。</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">cv_rmse</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> X<span class=\"token operator\">=</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rmse <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>cross_val_score<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> scoring<span class=\"token operator\">=</span><span class=\"token string\">\"neg_mean_squared_error\"</span><span class=\"token punctuation\">,</span> cv<span class=\"token operator\">=</span>kfolds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>rmse<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#############个体机器学习模型的创建（即模型声明和参数设置）-【开始】############</span>\nalphas_alt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">14.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15.5</span><span class=\"token punctuation\">]</span>\nalphas2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5e-05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0006</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0007</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0008</span><span class=\"token punctuation\">]</span>\ne_alphas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0006</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0007</span><span class=\"token punctuation\">]</span>\ne_l1ratio <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.85</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#定义ridge岭回归模型（使用二范数作为正则化项。不论是使用一范数还是二范数，正则化项的引入均是为了降低过拟合风险。）</span>\n<span class=\"token comment\">#注：正则化项如果使用二范数，那么对于任何需要寻优的参数值，在寻优终止时，它都无法将某些参数值变为严格的0，尽管某些参数估计值变得非常小以至于可以忽略。即使用二范数会保留变量的所有信息，不会进行类似PCA的变量凸显。</span>\n<span class=\"token comment\">#注：正则化项如果使用一范数，它比L2范数更易于获得“稀疏(sparse)”解，即它的求解结果会有更多的零分量。</span>\nridge <span class=\"token operator\">=</span> make_pipeline<span class=\"token punctuation\">(</span>RobustScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RidgeCV<span class=\"token punctuation\">(</span>alphas<span class=\"token operator\">=</span>alphas_alt<span class=\"token punctuation\">,</span> cv<span class=\"token operator\">=</span>kfolds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#定义LASSO收缩模型（使用L1范数作为正则化项）（由于对目标函数的求解结果中将得到很多的零分量，它也被称为收缩模型。）</span>\n<span class=\"token comment\">#注：正则化项如果使用二范数，那么对于任何需要寻优的参数值，在寻优终止时，它都无法将某些参数值变为严格的0，尽管某些参数估计值变得非常小以至于可以忽略。即使用二范数会保留变量的所有信息，不会进行类似PCA的变量凸显。</span>\n<span class=\"token comment\">#注：正则化项如果使用一范数，它比L2范数更易于获得“稀疏(sparse)”解，即它的求解结果会有更多的零分量。\t\t\t\t\t\t\t\t\t\t</span>\nlasso <span class=\"token operator\">=</span> make_pipeline<span class=\"token punctuation\">(</span>RobustScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LassoCV<span class=\"token punctuation\">(</span>max_iter<span class=\"token operator\">=</span><span class=\"token number\">1e7</span><span class=\"token punctuation\">,</span> alphas<span class=\"token operator\">=</span>alphas2<span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> cv<span class=\"token operator\">=</span>kfolds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#定义elastic net弹性网络模型（弹性网络实际上是结合了岭回归和lasso的特点，同时使用了L1和L2作为正则化项。）\t\t\t\t\t\t\t\t\t</span>\nelasticnet <span class=\"token operator\">=</span> make_pipeline<span class=\"token punctuation\">(</span>RobustScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ElasticNetCV<span class=\"token punctuation\">(</span>max_iter<span class=\"token operator\">=</span><span class=\"token number\">1e7</span><span class=\"token punctuation\">,</span> alphas<span class=\"token operator\">=</span>e_alphas<span class=\"token punctuation\">,</span> cv<span class=\"token operator\">=</span>kfolds<span class=\"token punctuation\">,</span> l1_ratio<span class=\"token operator\">=</span>e_l1ratio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#定义SVM支持向量机模型                                     </span>\nsvr <span class=\"token operator\">=</span> make_pipeline<span class=\"token punctuation\">(</span>RobustScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SVR<span class=\"token punctuation\">(</span>C<span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> epsilon<span class=\"token operator\">=</span> <span class=\"token number\">0.008</span><span class=\"token punctuation\">,</span> gamma<span class=\"token operator\">=</span><span class=\"token number\">0.0003</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#定义GB梯度提升模型（展开到一阶导数）\t\t\t\t\t\t\t\t\t</span>\ngbr <span class=\"token operator\">=</span> GradientBoostingRegressor<span class=\"token punctuation\">(</span>n_estimators<span class=\"token operator\">=</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> max_depth<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> max_features<span class=\"token operator\">=</span><span class=\"token string\">'sqrt'</span><span class=\"token punctuation\">,</span> min_samples_leaf<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> min_samples_split<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> loss<span class=\"token operator\">=</span><span class=\"token string\">'huber'</span><span class=\"token punctuation\">,</span> random_state <span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>                             \n\n<span class=\"token comment\">#定义lightgbm模型\t\t\t\t\t\t\t\t\t</span>\nlightgbm <span class=\"token operator\">=</span> LGBMRegressor<span class=\"token punctuation\">(</span>objective<span class=\"token operator\">=</span><span class=\"token string\">'regression'</span><span class=\"token punctuation\">,</span> \n                                       num_leaves<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n                                       learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> \n                                       n_estimators<span class=\"token operator\">=</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n                                       max_bin<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> \n                                       bagging_fraction<span class=\"token operator\">=</span><span class=\"token number\">0.75</span><span class=\"token punctuation\">,</span>\n                                       bagging_freq<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> \n                                       bagging_seed<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n                                       feature_fraction<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>\n                                       feature_fraction_seed<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n                                       verbose<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                                       <span class=\"token comment\">#min_data_in_leaf=2,</span>\n                                       <span class=\"token comment\">#min_sum_hessian_in_leaf=11</span>\n                                       <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#定义xgboost模型（展开到二阶导数）                                      </span>\nxgboost <span class=\"token operator\">=</span> XGBRegressor<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> n_estimators<span class=\"token operator\">=</span><span class=\"token number\">3460</span><span class=\"token punctuation\">,</span>\n                                     max_depth<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> min_child_weight<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                                     gamma<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> subsample<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span>\n                                     colsample_bytree<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span>\n                                     objective<span class=\"token operator\">=</span><span class=\"token string\">'reg:linear'</span><span class=\"token punctuation\">,</span> nthread<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                                     scale_pos_weight<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> seed<span class=\"token operator\">=</span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span>\n                                     reg_alpha<span class=\"token operator\">=</span><span class=\"token number\">0.00006</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#############个体机器学习模型的创建（即模型声明和参数设置）-【结束】############</span>\n\n<span class=\"token comment\">###########################集成多个个体学习器-【开始】##########################</span>\n<span class=\"token comment\">###！！！！！！！！！！！！</span>\n<span class=\"token comment\">###！！！！！！！！！！！！</span>\n<span class=\"token comment\">###！！！regressors=(...)中并没有纳入前面的svr模型,怎么回事？</span>\n<span class=\"token comment\">###！！！！！！！！！！！！</span>\n<span class=\"token comment\">###！！！！！！！！！！！！</span>\nstack_gen <span class=\"token operator\">=</span> StackingCVRegressor<span class=\"token punctuation\">(</span>regressors<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ridge<span class=\"token punctuation\">,</span> lasso<span class=\"token punctuation\">,</span> elasticnet<span class=\"token punctuation\">,</span> gbr<span class=\"token punctuation\">,</span> xgboost<span class=\"token punctuation\">,</span> lightgbm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                meta_regressor<span class=\"token operator\">=</span>xgboost<span class=\"token punctuation\">,</span>\n                                use_features_in_secondary<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#regressors=(...)中并没有纳入前面的svr模型</span>\n<span class=\"token comment\">###########################集成多个个体学习器-【结束】##########################                             </span>\n\n<span class=\"token comment\">############################进行交叉验证打分-【开始】###########################</span>\n<span class=\"token comment\">#进行交叉验证，并对不同模型的表现打分</span>\n<span class=\"token comment\">#（由于是交叉验证，将使用不同的数据集对同一模型进行评分，故每个模型对应一个得分序列。展示模型得分序列的平均分、标准差）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'进行交叉验证，计算不同模型的得分TEST score on CV'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打印二范数rideg岭回归模型的得分</span>\nscore <span class=\"token operator\">=</span> cv_rmse<span class=\"token punctuation\">(</span>ridge<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二范数rideg岭回归模型的得分: {:.4f} ({:.4f})\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打印一范数LASSO收缩模型的得分</span>\nscore <span class=\"token operator\">=</span> cv_rmse<span class=\"token punctuation\">(</span>lasso<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一范数LASSO收缩模型的得分: {:.4f} ({:.4f})\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打印elastic net弹性网络模型的得分</span>\nscore <span class=\"token operator\">=</span> cv_rmse<span class=\"token punctuation\">(</span>elasticnet<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elastic net弹性网络模型的得分: {:.4f} ({:.4f})\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打印SVR支持向量机模型的得分</span>\nscore <span class=\"token operator\">=</span> cv_rmse<span class=\"token punctuation\">(</span>svr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SVR支持向量机模型的得分: {:.4f} ({:.4f})\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打印lightgbm轻梯度提升模型的得分</span>\nscore <span class=\"token operator\">=</span> cv_rmse<span class=\"token punctuation\">(</span>lightgbm<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lightgbm轻梯度提升模型的得分: {:.4f} ({:.4f})\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打印gbr梯度提升回归模型的得分</span>\nscore <span class=\"token operator\">=</span> cv_rmse<span class=\"token punctuation\">(</span>gbr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gbr梯度提升回归模型的得分: {:.4f} ({:.4f})\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打印xgboost模型的得分</span>\nscore <span class=\"token operator\">=</span> cv_rmse<span class=\"token punctuation\">(</span>xgboost<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xgboost模型的得分: {:.4f} ({:.4f})\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">############################进行交叉验证打分-【结束】###########################</span>\n\n<span class=\"token comment\">#########使用训练数据特征矩阵作为输入，训练数据对数处理后的预测房价作为输出，进行各个模型的训练-【开始】#########</span>\n<span class=\"token comment\">#开始集合所有模型，使用stacking方法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'进行模型参数训练 START Fit'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'对stack_gen集成器模型进行参数训练'</span><span class=\"token punctuation\">)</span>\nstack_gen_model <span class=\"token operator\">=</span> stack_gen<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'对elasticnet弹性网络模型进行参数训练'</span><span class=\"token punctuation\">)</span>\nelastic_model_full_data <span class=\"token operator\">=</span> elasticnet<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'对一范数lasso收缩模型进行参数训练'</span><span class=\"token punctuation\">)</span>\nlasso_model_full_data <span class=\"token operator\">=</span> lasso<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'对二范数ridge岭回归模型进行参数训练'</span><span class=\"token punctuation\">)</span>\nridge_model_full_data <span class=\"token operator\">=</span> ridge<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'对svr支持向量机模型进行参数训练'</span><span class=\"token punctuation\">)</span>\nsvr_model_full_data <span class=\"token operator\">=</span> svr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'对GradientBoosting梯度提升模型进行参数训练'</span><span class=\"token punctuation\">)</span>\ngbr_model_full_data <span class=\"token operator\">=</span> gbr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'对xgboost二阶梯度提升模型进行参数训练'</span><span class=\"token punctuation\">)</span>\nxgb_model_full_data <span class=\"token operator\">=</span> xgboost<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'对lightgbm轻梯度提升模型进行参数训练'</span><span class=\"token punctuation\">)</span>\nlgb_model_full_data <span class=\"token operator\">=</span> lightgbm<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#########使用训练数据特征矩阵作为输入，训练数据对数处理后的预测房价作为输出，进行各个模型的训练-【结束】#########</span>\n\n<span class=\"token comment\">############################进行交叉验证打分-【结束】###########################</span>\n\n<span class=\"token comment\">########定义个体学习器的预测值融合函数，检测预测值融合策略的效果-【开始】#######</span>\n<span class=\"token comment\">#综合多个模型产生的预测值，作为多模型组合学习器的预测值</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">blend_models_predict</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> elastic_model_full_data<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span> <span class=\"token operator\">*</span> lasso_model_full_data<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> ridge_model_full_data<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> svr_model_full_data<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> gbr_model_full_data<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0.15</span> <span class=\"token operator\">*</span> xgb_model_full_data<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> lgb_model_full_data<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span> <span class=\"token operator\">*</span> stack_gen_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#打印在上述模型配比下，多模型组合学习器的均方根对数误差（Root Mean Squared Logarithmic Error ，RMSLE）</span>\n<span class=\"token comment\">#使用训练数据对创造的模型进行k折交叉验证，以训练创造出的模型的参数配置。交叉验证训练过程结束后，将得到模型的参数配置。使用得出的参数配置下，在全体训练数据上进行验证，验证模型对全体训练数据重构的误差。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'融合后的训练模型对原数据重构时的均方根对数误差RMSLE score on train data:'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rmsle<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> blend_models_predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">########定义个体学习器的预测值融合函数，检测预测值融合策略的效果-【结束】#######</span>\n\n<span class=\"token comment\">########将测试集的特征矩阵作为输入，传入训练好的模型，得出的输出写入.csv文件的第2列-【开始】########</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用测试集特征进行房价预测 Predict submission'</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\nsubmission <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"../input/house-prices-advanced-regression-techniques/sample_submission.csv\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#函数注释：.iloc[:,1]是基于索引位来选取数据集，[索引1:索引2]，左闭右开。</span>\nsubmission<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>expm1<span class=\"token punctuation\">(</span>blend_models_predict<span class=\"token punctuation\">(</span>X_sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">########将测试集的特征矩阵作为输入，传入训练好的模型，得出的输出写入.csv文件的第2列-【结束】########</span>\n\n<span class=\"token comment\">#---------------------------------------------------------------------------------------------------------------------------#</span>\n<span class=\"token comment\">#---------------------------------------------------------------------------------------------------------------------------#</span>\n<span class=\"token comment\">#---------------------------------------------------------------------------------------------------------------------------#</span>\n\n<span class=\"token comment\"># 当对平台未公开的测试集进行预测时，前述模型的误差是0.114 this kernel gave a score 0.114</span>\n<span class=\"token comment\"># 为了提高模型的得分，引入其他模型的优秀预测结果，与前述模型的预测结果进行混合（有点类似抄别人的答案，但实质是扩大集成模型的规模，引入更多的模型） let's up it by mixing with the top kernels</span>\n\n<span class=\"token comment\">######################模型输出结果融合-【开始】#############################</span>\n<span class=\"token comment\">#在多模型集成学习器预测结果的基础上，融合其他优秀模型（即平台上其他均方根对数误差小的模型）的预测结果。</span>\n<span class=\"token comment\">#这步操作是为了降低多模型集成学习器的方差。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'融合其他优秀模型的预测结果 Blend with Top Kernals submissions'</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\nsub_1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/top-10-0-10943-stacking-mice-and-brutal-force/House_Prices_submit.csv'</span><span class=\"token punctuation\">)</span>\nsub_2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/hybrid-svm-benchmark-approach-0-11180-lb-top-2/hybrid_solution.csv'</span><span class=\"token punctuation\">)</span>\nsub_3 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/lasso-model-for-regression-problem/lasso_sol22_Median.csv'</span><span class=\"token punctuation\">)</span>\nsubmission<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>expm1<span class=\"token punctuation\">(</span>blend_models_predict<span class=\"token punctuation\">(</span>X_sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \n                                <span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span> <span class=\"token operator\">*</span> sub_1<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \n                                <span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span> <span class=\"token operator\">*</span> sub_2<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \n                                <span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span> <span class=\"token operator\">*</span> sub_3<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">######################模型输出结果融合-【结束】#############################      </span>\n\n<span class=\"token comment\">####################融合结果的极端值剔除-【开始】###########################  </span>\n<span class=\"token comment\">#处理融合后结果中的极端值。把太大的数值（降序排列时，位于顶部往下0.005的数值，就是只有0.005的数比它大）缩小一点（乘以0.77），把太小的数值（降序排列时，位于顶部往下0.99的数值）放大一点（乘以1.1）</span>\nq1 <span class=\"token operator\">=</span> submission<span class=\"token punctuation\">[</span><span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quantile<span class=\"token punctuation\">(</span><span class=\"token number\">0.005</span><span class=\"token punctuation\">)</span>\nq2 <span class=\"token operator\">=</span> submission<span class=\"token punctuation\">[</span><span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quantile<span class=\"token punctuation\">(</span><span class=\"token number\">0.995</span><span class=\"token punctuation\">)</span>\nsubmission<span class=\"token punctuation\">[</span><span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> submission<span class=\"token punctuation\">[</span><span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token keyword\">if</span> x <span class=\"token operator\">&gt;</span> q1 <span class=\"token keyword\">else</span> x<span class=\"token operator\">*</span><span class=\"token number\">0.77</span><span class=\"token punctuation\">)</span>\nsubmission<span class=\"token punctuation\">[</span><span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> submission<span class=\"token punctuation\">[</span><span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> q2 <span class=\"token keyword\">else</span> x<span class=\"token operator\">*</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">####################融合结果的极端值剔除-【结束】###########################</span>\n\n<span class=\"token comment\">#以csv文件的形式输出预测值</span>\nsubmission<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"House_price_submission.csv\"</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'融合结果.csv文件输出成功 Save submission'</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n",
            "tags": [
                "kaggle"
            ]
        }
    ]
}