<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PE-不务专业的三两事</title>
      <link href="/2022/05/29/pe-bu-wu-zhuan-ye-de-san-liang-shi/"/>
      <url>/2022/05/29/pe-bu-wu-zhuan-ye-de-san-liang-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="节时：写一本推理悬疑小说"><a href="#节时：写一本推理悬疑小说" class="headerlink" title="节时：写一本推理悬疑小说"></a>节时：写一本推理悬疑小说</h4><h4 id="一、动机"><a href="#一、动机" class="headerlink" title="一、动机"></a>一、动机</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近肝了一个来自日本的番剧，不对，番剧这个词的由来可能就是日本，名字叫《夏日重现》，是一部很不戳的连续动画剧，确实被深深的吸引了，特别是它那个说不上来的旋律一直在我的脑袋里盘旋，久久未散。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以，我想写一本推理小说，应该不会太厚，我本来就不是写小说的，我可是未来的研究员呀，其实为什么我想要尝试去写一本这样的小说，其一是因为我想专注于有价值的事情上，无论是给某一研究领域推动了什么进展，还是给观众带来了什么优秀的作品，这些都是很棒的行为。</p><h4 id="二、行动"><a href="#二、行动" class="headerlink" title="二、行动"></a>二、行动</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进一步的是我想在这本推理小说里展现的主题是什么？我的设想是它的内容要丰满立体，情节要让人意想不到，在推理悬疑里这些设定是合理的。</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思绪远方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-update-5</title>
      <link href="/2022/05/28/pe-update-5/"/>
      <url>/2022/05/28/pe-update-5/</url>
      
        <content type="html"><![CDATA[<h3 id="内篇-人间世"><a href="#内篇-人间世" class="headerlink" title="内篇-人间世"></a>内篇-人间世</h3><p>现在已经是早上接近了9点，回想昨天的那个colab 内核运行过程，到现在仍然觉得不可思议，那可是一个量子级的计算啊，虽然说是模拟的环境里只需两个 qubit 就可以去用于测验，还有一套机器学习的融合，似乎有许久没有这种激动澎湃的心情了，目前所了解的机器学习，在主流方向里并没有让我有另眼刮目相看的本质内容，无论是视觉还是语言处理，又或者是语音，过几年我可能会爱上这套统计学习的理论，但不是现在，我没有那种闲工夫去研究这些没有前景的方向，至于动机是什么？那仅仅是一个被时代所唤醒的躁动不安的心。</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-nlp竞赛数据处理</title>
      <link href="/2022/05/25/ml-dl-nlp-jing-sai-shu-ju-chu-li/"/>
      <url>/2022/05/25/ml-dl-nlp-jing-sai-shu-ju-chu-li/</url>
      
        <content type="html"><![CDATA[<h3 id="kaggle-天池竞赛环境"><a href="#kaggle-天池竞赛环境" class="headerlink" title="kaggle/天池竞赛环境"></a>kaggle/天池竞赛环境</h3><p>1.设置一个训练、推理随机种子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">seed_everything</span><span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'PYTHONHASHSEED'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TF_CUDNN_DETERMINISTIC'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>set_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    seed_everything<span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在nlp中大多数都是使用 deberta系列来完成训练的，很傻瓜只需要会用 model 来训练就好了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># tokenizer 在推理时是非常重要的</span>tokenizer <span class="token operator">=</span> transformers<span class="token punctuation">.</span>AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>config<span class="token punctuation">.</span>model_name<span class="token punctuation">)</span><span class="token comment"># Context tokens. </span>test<span class="token punctuation">[</span><span class="token string">'context_token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'['</span> <span class="token operator">+</span> test<span class="token punctuation">.</span>context <span class="token operator">+</span> <span class="token string">']'</span>test<span class="token punctuation">[</span><span class="token string">'sep_token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'[SEP]'</span>test<span class="token punctuation">[</span><span class="token string">'cls_token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'[CLS]'</span>context_tokens <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>context_token<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tokenizer<span class="token punctuation">.</span>add_special_tokens<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'additional_special_tokens'</span><span class="token punctuation">:</span> context_tokens<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kaggle </tag>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-数据降维中的PCA和LDA</title>
      <link href="/2022/05/17/ml-dl-shu-ju-jiang-wei-zhong-de-pca-he-lda/"/>
      <url>/2022/05/17/ml-dl-shu-ju-jiang-wei-zhong-de-pca-he-lda/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-统计之三只松鼠</title>
      <link href="/2022/05/17/ml-dl-tong-ji-zhi-san-zhi-song-shu/"/>
      <url>/2022/05/17/ml-dl-tong-ji-zhi-san-zhi-song-shu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QC-LoG边缘检测</title>
      <link href="/2022/05/17/qc-log-bian-yuan-jian-ce/"/>
      <url>/2022/05/17/qc-log-bian-yuan-jian-ce/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> 图像检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QC-衍生边缘检测算法</title>
      <link href="/2022/05/17/qc-yan-sheng-bian-yuan-jian-ce-suan-fa/"/>
      <url>/2022/05/17/qc-yan-sheng-bian-yuan-jian-ce-suan-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> 图像检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-谈一谈爱情里的那些事</title>
      <link href="/2022/05/15/pe-tan-tan-wo-dui-ai-qing-de-kan-fa/"/>
      <url>/2022/05/15/pe-tan-tan-wo-dui-ai-qing-de-kan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="内篇-amp-amp-逍遥游"><a href="#内篇-amp-amp-逍遥游" class="headerlink" title="内篇&amp;&amp;逍遥游"></a>内篇&amp;&amp;逍遥游</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学会成长，在自我损耗中及时制止，磨砺自己迟钝的刃片，学会爱，学会主动去爱一个人，借此摆脱人性的淡漠。</p><p>~~</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但我还是学不会主动喜欢一个人，甚至爱一个人，只能爱我自己，其实这是自私的一种表现，爱自己尤为严重时就难以对异性产生好感，我比较清楚这种现象是来自我所接触的人太少才导致的，但吐槽一下自己又何妨呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回想起对避讳不及的感情过渡是一次不成熟且狼狈的来自过往的现式表白，我想那应该是我对自己情感履历的一场终结，接下来的日子里我抱有清晰的目标，还有远大看起来渺小的理想，也有对枯燥生活的热情，但之前我都得需要慢慢静下来，4年来说都已经足够了。</p><p>~~</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其次是我也没想过要哪种简便的爱情，太枯燥无聊了，但在缺失的名单里，理解和包容是很重要但可能也无关紧要的，有人在背后支持去做自己热爱的事情总是很快乐的吧，即使我已经学会了独自建立一个王朝，至于我能反馈的，或许我也琢磨不透。</p><p>~~<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个来自无聊但又很有料的人的深夜遐想，没有太多假设，无需太多。</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-update-4</title>
      <link href="/2022/05/15/pe-update-4/"/>
      <url>/2022/05/15/pe-update-4/</url>
      
        <content type="html"><![CDATA[<h3 id="内篇-amp-amp-人间世"><a href="#内篇-amp-amp-人间世" class="headerlink" title="内篇&amp;&amp;人间世"></a>内篇&amp;&amp;人间世</h3><p>最近我想用一些时序模型去做分子生物学/遗传学的相关概念验证，很明显，在深度学习这一领域是不能再产出一个银碗了，但那句”21世纪是生物的世纪”深深吸引了我，基于生命科学，机器学习则与之相融合碰撞出更灿烂的火花，而若有幸成为其中的参与者或推动者，怎么想都是极其兴奋的一件事。<br>我是一个过气的业余爱好者，也是一个独立研究者，似乎有很多让我觉得很无聊，缘由我在清楚不过了，无非就是我想去创业，在青年时期闯荡自己的天地，这才是我本该做的，但我又崇尚自己所喜爱的工作，我是不是太贪心了。<br>我想安安静静的待在大学四年，很多人困于大势所行，做认为挥洒青春的行为，但我也弄不清楚为什么对这些毫无兴趣。</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-在RNN中添加LSTM机制来缓和梯度消失</title>
      <link href="/2022/05/14/ml-dl-zai-rnn-zhong-tian-jia-lstm-ji-zhi-lai-huan-he-ti-du-xiao-shi/"/>
      <url>/2022/05/14/ml-dl-zai-rnn-zhong-tian-jia-lstm-ji-zhi-lai-huan-he-ti-du-xiao-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PE-update-3</title>
      <link href="/2022/05/14/pe-update-3/"/>
      <url>/2022/05/14/pe-update-3/</url>
      
        <content type="html"><![CDATA[<h3 id="内篇-amp-amp-人间世"><a href="#内篇-amp-amp-人间世" class="headerlink" title="内篇&amp;&amp;人间世"></a>内篇&amp;&amp;人间世</h3><p>我内心其实是不太喜欢看书的，想必很多人也这样，这也不需要过多的解释。</p><p>~~</p><p>我想懒洋洋、安心稳妥做好自己分内的事，所以我爱上了画画，绘画多简单轻松呐，握上笔在纸上挥出完美线条的那一刻，就已经放空了自己早已沉重的思绪，不管是爱因斯坦还是费曼或者是hinton，统统消失不见，画作没有派系，都是自己胡编乱造，那是一个纯粹幻想的世界，经不起推敲的事件就会自行消散，为什么要追索想象的世界，归结到底的是工科的学生都有一个通病，那就是死板的很，一套工科化的理论拿来采用却没有任何美妙的新意，这是第二层的状况，第一层是筛选器。</p><p>~~</p><p>我喜欢没有约束的生活，也幻想毫无压力的，这看起来是那批艺术家的生活。在工程师的位置以艺术家的角度审视他们就会觉得好无聊呐，为了一丢丢别人的看法需要去压迫，非得证明自己，却不自知会陷入泥潭，这应该是不太成熟的表现。</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-不熟悉的采样方法</title>
      <link href="/2022/05/13/ml-dl-bu-shou-xi-de-cai-yang-fang-fa/"/>
      <url>/2022/05/13/ml-dl-bu-shou-xi-de-cai-yang-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="我来华丽的简单分类一下"><a href="#我来华丽的简单分类一下" class="headerlink" title="我来华丽的简单分类一下"></a>我来华丽的简单分类一下</h3><p>高斯分布采样</p><p>马尔可夫蒙特卡洛采样</p><p>贝叶斯网络采样</p><p>不均衡样本集采样</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-算法三兄贵之损失函数</title>
      <link href="/2022/05/13/ml-dl-suan-fa-san-xiong-gui-zhi-sun-shi-han-shu/"/>
      <url>/2022/05/13/ml-dl-suan-fa-san-xiong-gui-zhi-sun-shi-han-shu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-优化算法的部分假设</title>
      <link href="/2022/05/13/ml-dl-you-hua-suan-fa-de-bu-fen-jia-she/"/>
      <url>/2022/05/13/ml-dl-you-hua-suan-fa-de-bu-fen-jia-she/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-RNN中又该如何华丽的抹上Dropout</title>
      <link href="/2022/05/13/ml-dl-rnn-zhong-you-gai-ru-he-hua-li-de-mo-shang-dropout/"/>
      <url>/2022/05/13/ml-dl-rnn-zhong-you-gai-ru-he-hua-li-de-mo-shang-dropout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-随RNN权重更新时产生的长期依赖问题</title>
      <link href="/2022/05/13/ml-dl-sui-rnn-quan-chong-geng-xin-shi-chan-sheng-de-chang-qi-yi-lai-wen-ti/"/>
      <url>/2022/05/13/ml-dl-sui-rnn-quan-chong-geng-xin-shi-chan-sheng-de-chang-qi-yi-lai-wen-ti/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-RNN的结构及如何优美的更新权重</title>
      <link href="/2022/05/13/ml-dl-rnn-de-jie-gou-ji-ru-he-you-mei-de-geng-xin-quan-chong/"/>
      <url>/2022/05/13/ml-dl-rnn-de-jie-gou-ji-ru-he-you-mei-de-geng-xin-quan-chong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-Dropout怎样缓解RNN过拟合</title>
      <link href="/2022/05/13/ml-dl-dropout-zen-yang-huan-jie-rnn-guo-ni-he/"/>
      <url>/2022/05/13/ml-dl-dropout-zen-yang-huan-jie-rnn-guo-ni-he/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-集成学习的那些事</title>
      <link href="/2022/05/13/ml-dl-ji-cheng-xue-xi-de-na-xie-shi/"/>
      <url>/2022/05/13/ml-dl-ji-cheng-xue-xi-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XGBoost </tag>
            
            <tag> GBDT </tag>
            
            <tag> 梯度提升树 </tag>
            
            <tag> 基分类器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-模型评估的很多事</title>
      <link href="/2022/05/13/ml-dl-mo-xing-ping-gu-de-hen-duo-shi/"/>
      <url>/2022/05/13/ml-dl-mo-xing-ping-gu-de-hen-duo-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-关于降维我想说</title>
      <link href="/2022/05/13/ml-dl-guan-yu-jiang-wei-wo-xiang-shuo/"/>
      <url>/2022/05/13/ml-dl-guan-yu-jiang-wei-wo-xiang-shuo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-Dl-特征工程的那些破事</title>
      <link href="/2022/05/13/ml-dl-te-zheng-gong-cheng-de-na-xie-po-shi/"/>
      <url>/2022/05/13/ml-dl-te-zheng-gong-cheng-de-na-xie-po-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-audio的那些事</title>
      <link href="/2022/05/11/ml-dl-audio-de-na-xie-shi/"/>
      <url>/2022/05/11/ml-dl-audio-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="内篇-amp-amp-齐物论"><a href="#内篇-amp-amp-齐物论" class="headerlink" title="内篇&amp;&amp;齐物论"></a>内篇&amp;&amp;齐物论</h4><p>源址：<a href="https://gitee.com/mindspore/models/tree/master/research/audio">https://gitee.com/mindspore/models/tree/master/research/audio</a></p><p>下面的几个模型是列在 gitee / audio上面的，我拿来看了前面几个</p><h3 id="1-FastSpeech"><a href="#1-FastSpeech" class="headerlink" title="1.FastSpeech"></a>1.FastSpeech</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>基于神经网络的端到端文本到语音（TTS）显着提高了合成语音的质量。 TTS 方法通常首先从文本生成梅尔谱图，然后使用声码器（如 WaveNet（该工作中的 WaveGlow））从梅尔谱图合成语音。与传统的连接和统计参数方法相比，基于神经网络的端到端模型推理速度慢，合成语音通常鲁棒性不强（即某些单词被跳过或重复）和缺乏可控性（语音速度或韵律控制）。在这项工作中，我们使用基于 Transformer 的前馈网络为 TTS 并行生成梅尔谱图。具体来说，我们使用先前从基于编码器-解码器的教师模型中提取的注意力对齐来进行音素持续时间预测，长度调节器使用该模型来扩展源音素序列以匹配并行梅尔谱图的目标梅尔谱图序列的长度一代。在 LJSpeech 数据集上的实验表明，并行模型在语音质量方面与自回归模型相匹配，在特别困难的情况下几乎消除了跳字和重复的问题，并且可以平滑地调整语音速度。</p><h4 id="模型架构"><a href="#模型架构" class="headerlink" title="模型架构"></a>模型架构</h4><p>FastSpeech 的架构是基于 Transformer 中的自注意力和一维卷积的前馈结构。这种结构称为前馈变压器（FFT）。 Feed-Forward Transformer 堆叠多个 FFT 块用于音素到 mel 谱图的转换，音素侧有 N 个块，mel 谱图侧有 N 个块，中间有一个长度调节器来弥合音素和 mel 之间的长度差距-频谱图序列。每个 FFT 块由一个自注意力和一维卷积网络组成。自注意力网络由一个多头注意力组成，用于提取交叉位置信息。与 Transformer 中的 2 层密集网络不同，FastSpeech 使用带有 ReLU 激活的 2 层 1D 卷积网络。动机是相邻的隐藏状态在语音任务中的字符/音素和梅尔谱图序列中更密切相关。</p><h3 id="2-ctcmodel"><a href="#2-ctcmodel" class="headerlink" title="2.ctcmodel"></a>2.ctcmodel</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>CTCModel利用CTC准则训练RNN模型，完成语素标记任务。CTC 的全称是Connectionist Temporal Classification，中文名称是“连接时序分类”，这个方法主要是解决神经网络label 和output 不对齐的问题，其优点是不用强制对齐标签且标签可变长，仅需输入序列和监督标签序列即可进行训练。 CTC被广泛的应用在语音识别，OCR等任务上，取得了显著的效果</p><h4 id="模型架构-1"><a href="#模型架构-1" class="headerlink" title="模型架构"></a>模型架构</h4><p>一个两层的双向LSTM模型，输入维度为39，即提取出的语音特征的维度<br>一个全连接层，输出维度为62,标签数+1,61代表空白符号</p><h3 id="3-deepspeech2"><a href="#3-deepspeech2" class="headerlink" title="3.deepspeech2"></a>3.deepspeech2</h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>DeepSpeech2是一个使用 CTC 损失训练的语音识别模型。它用神经网络取代了整个手工设计的管道，可以处理各种各样的语音，包括嘈杂的环境、口音和不同的语言。</p><h4 id="模型架构-2"><a href="#模型架构-2" class="headerlink" title="模型架构"></a>模型架构</h4><ul><li>两个卷积层:<ul><li>通道数为 32，内核大小为 41, 11 ，步长为 2, 2</li><li>通道数为 32，内核大小为 41, 11 ，步长为 2, 1</li></ul></li><li>五个双向 LSTM 层（大小为 1024）</li><li>一个投影层【大小为字符数加 1（为CTC空白符号)，29】</li></ul><h3 id="4-dscnn"><a href="#4-dscnn" class="headerlink" title="4.dscnn"></a>4.dscnn</h3><h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><p>DS-CNN 是深度可分离的卷积神经网络，于 2017 年首次用于关键字识别。KWS 应用具有高度受限的功率预算，通常在内存和计算能力有限的微型微控制器上运行。深度可分离卷积在参数数量和操作方面都更有效，这使得即使在资源受限的微控制器设备中也可以实现更深、更宽的架构。</p><h3 id="5-fcn-4"><a href="#5-fcn-4" class="headerlink" title="5.fcn-4"></a>5.fcn-4</h3><h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><p>这个存储库提供了一个脚本和配方来训练 FCN-4 模型以实现最先进的准确性。<br>论文：“Keunwoo Choi、George Fazekas 和 Mark Sandler，“使用深度卷积神经网络进行自动标记”，国际音乐协会信息检索会议。ISMIR，2016 年。</p><h4 id="模型架构-3"><a href="#模型架构-3" class="headerlink" title="模型架构"></a>模型架构</h4><p>FCN-4 是一种卷积神经网络架构，它的名称 FCN-4 来自于它有 4 层的事实。它的层由卷积层、最大池化层、激活层、全连接层组成。</p><h3 id="6-speech-transformer"><a href="#6-speech-transformer" class="headerlink" title="6.speech_transformer"></a>6.speech_transformer</h3><h4 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h4><p>标准的transformer sequence2sequence（编码器，解码器）模型架构用于解决speech2text问题。</p><h4 id="模型架构-4"><a href="#模型架构-4" class="headerlink" title="模型架构"></a>模型架构</h4><p>具体来说，Transformer 包含六个编码器模块和六个解码器模块。每个编码器模块由一个自注意力层和一个前馈层组成，每个解码器模块由一个自注意力层、一个编码器-解码器-注意力层和一个前馈层组成。</p><h3 id="7-tacotron2"><a href="#7-tacotron2" class="headerlink" title="7.tacotron2"></a>7.tacotron2</h3><h4 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h4><p>Tacotron2 是一款 TTS 机型。它包含两个阶段，在第一阶段它使用序列到序列方法从文本序列中预测梅尔频谱图，在第二阶段它应用 WaveNet 作为声码器将梅尔频谱图转换为波形。我们支持在 Ascend 平台上训练和评估 tacotron2 模型。<br>论文：乔纳森等人。通过在梅尔谱图预测上调节 WaveNet 进行自然 TTS 合成。</p><h4 id="模型架构-5"><a href="#模型架构-5" class="headerlink" title="模型架构"></a>模型架构</h4><p>Tacotron2本质上是一个包含编码器和解码器的序列到序列模型，编码器由三个conv层和一个BiLSTM层实现，解码器使用两个LSTM层来解码下一个状态，在编码器之间应用位置感知注意力和解码器，然后将解码后的状态输入到由五个卷积层实现的 postnet 来预测梅尔谱图，最后将预测的梅尔谱图特征输入到 WaveNet 声码器以合成语音信号。</p><h3 id="8-wavenet"><a href="#8-wavenet" class="headerlink" title="8.wavenet"></a>8.wavenet</h3><h4 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h4><p>WaveNet 是一种用于生成原始音频波形的深度神经网络。该模型是完全概率和自回归的，每个音频样本的预测分布都以所有先前的样本为条件。我们支持在 Ascend、GPU 和 CPU 上进行训练和评估。</p><h4 id="模型架构-6"><a href="#模型架构-6" class="headerlink" title="模型架构"></a>模型架构</h4><p>当前模型包括一个预卷积层，然后是几个残差块，这些残差块具有与门控激活单元的残差和跳跃连接。最后，添加后卷积层来预测分布。</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语音处理 </tag>
            
            <tag> model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIO-初探生物学</title>
      <link href="/2022/05/10/bio-chu-tan-sheng-wu-xue/"/>
      <url>/2022/05/10/bio-chu-tan-sheng-wu-xue/</url>
      
        <content type="html"><![CDATA[<h4 id="生物学也很好玩"><a href="#生物学也很好玩" class="headerlink" title="生物学也很好玩"></a>生物学也很好玩</h4><p><em>术语</em></p><p>在之后的时间里我会对这些术语尽可能应用在某个方面</p><p>————————————————————</p><p>先天免疫 </p><p>负反馈</p><p>神经元学说</p><p>新陈代谢</p><p>昼夜节律</p><p>再生</p><p>细胞凋亡 细胞程序性死亡</p><p>同源和同工</p><p>炫光异构体</p><p>生物拟态</p><p>协同进化</p><p>减数分裂</p><p>有丝分裂</p><p>适应性免疫</p><p>联想学习 巴普洛夫条件反射</p><p>病毒 生命形态和化学物质 灰色地带</p><p>生态演替</p><p>印刻效应</p><p>——————————————————————</p><p>略显情形不当这个 entrous:发情期</p>]]></content>
      
      
      <categories>
          
          <category> Biology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-循环神经网络基础</title>
      <link href="/2022/05/09/ml-dl-xun-huan-shen-jing-wang-luo-ji-chu/"/>
      <url>/2022/05/09/ml-dl-xun-huan-shen-jing-wang-luo-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>模型的演变：</p><p>自回归—-隐变量自回归—-</p><p>一元语法，二元语法，三元语法——词元频率</p><p>困惑度</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RNN </tag>
            
            <tag> 循环神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-计算机听觉疑问</title>
      <link href="/2022/05/09/ml-dl-ji-suan-ji-ting-jue-yi-wen/"/>
      <url>/2022/05/09/ml-dl-ji-suan-ji-ting-jue-yi-wen/</url>
      
        <content type="html"><![CDATA[<p>1.音频信息识别常用的数据集有哪些？</p><p>2.音频信息提取特征中常用的梅尔频率倒谱系数的计算</p><p>3.常见的音频识别算法</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> CH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-自然语言处理疑问</title>
      <link href="/2022/05/09/ml-dl-zi-ran-yu-yan-chu-li-yi-wen/"/>
      <url>/2022/05/09/ml-dl-zi-ran-yu-yan-chu-li-yi-wen/</url>
      
        <content type="html"><![CDATA[<p>1.机器翻译任务中如何解决未登录词的翻译问题？</p><p>2.解决翻译任务中双语料不足的方法？</p><p>3.如何使用 CNN 和 RNN 来解决 问题系统任务中的长距离依赖问题？ 对比 Transformer有什么好的新意？</p><p>4.在文本段落编码是如何结合问题信息？好处是什么？</p><p>5.如何对文本中词的位置信息进行编码？</p><p>6.语言模型的任务形式是什么？语言模型如何提升其它自然语言处理任务的效果？</p><p>7.常见的词嵌入模型？它们之间联系和区别？</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-自然语言处理基础</title>
      <link href="/2022/05/09/ml-dl-zi-ran-yu-yan-chu-li-ji-chu/"/>
      <url>/2022/05/09/ml-dl-zi-ran-yu-yan-chu-li-ji-chu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-前向神经网络基础</title>
      <link href="/2022/05/09/ml-dl-qian-xiang-shen-jing-wang-luo-ji-chu/"/>
      <url>/2022/05/09/ml-dl-qian-xiang-shen-jing-wang-luo-ji-chu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-循环神经网络中的部分问题</title>
      <link href="/2022/05/09/ml-dl-xun-huan-shen-jing-wang-luo-zhong-de-bu-fen-wen-ti/"/>
      <url>/2022/05/09/ml-dl-xun-huan-shen-jing-wang-luo-zhong-de-bu-fen-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>1.RNN 的结构及参数更新方式？</p><p>2.使用 CNN 对序列数据建模？</p><p>3.dropout能缓解过拟合？</p><p>4.RNN 怎样去使用 dropout？</p><p>5.RNN 中出现的长期依赖状况？</p><p>6.针对长期以来问题在 RNN 实现 LSTM 功能？</p><p>7.GRU 用两个门控单元就控制了时间序列的记忆及遗忘行为？ </p><p>8.用RNN来实现 Seq2Seq 映射</p><p>9.Seq2Seq 在编码-解码中会存在信息丢失？有什么好的解决方案</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-update-2</title>
      <link href="/2022/05/07/pe-update-2/"/>
      <url>/2022/05/07/pe-update-2/</url>
      
        <content type="html"><![CDATA[<h4 id="内篇-逍遥游"><a href="#内篇-逍遥游" class="headerlink" title="内篇-逍遥游"></a>内篇-逍遥游</h4><p>今天的感jo是没得什么能够拦住我，思绪飘在了固定的方向，有太多太多想去做的啦。</p><p>想建立一个工作室给大家带来快乐，想去创业建立我的时代，想去和那些互联网头目碰撞，想安心在学术氛围浓厚的地方做研究</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-鸟类饲养记</title>
      <link href="/2022/05/04/pe-niao-lei-si-yang-ji/"/>
      <url>/2022/05/04/pe-niao-lei-si-yang-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="叛逆的-Big-Bird："><a href="#叛逆的-Big-Bird：" class="headerlink" title="叛逆的 Big Bird："></a>叛逆的 Big Bird：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;给你取的绰号是来自语言模型里还没有命名的芝麻街系列名字。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;怎么就一天就偷偷跑了呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初次看起来似乎憨态可掬的，却又毫不为我所提供的超六星级豪华别墅所动，满眼都崇尚着外面的点滴一方世界，留不住的也会莫名的流露出一丝丝不忍心。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自私的热切关心并不会改变什么，我并不失落，因为这结果我可以预见，另一种结果是毫不留情直接炖锅吃了，依赖达尔文所说的生物进化的基础是自然选择，这并不残忍。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但为什么产生了一点点空虚呢，解析不出来。</p><p>——————————————————</p><p>从一只蠢鸟的观察联系到人际交流，关心会对一个人付出自己脆落的琉璃心，即使是调皮捣蛋的人也不例外。</p><p><img src="C:\Users\kitx86\blog\source_posts\PE-鸟类饲养记\IMG_20220504_155927.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 饲养记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-朕之旨意</title>
      <link href="/2022/05/02/pe-zhen-zhi-zhi-yi/"/>
      <url>/2022/05/02/pe-zhen-zhi-zhi-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="内篇-amp-amp-逍遥游"><a href="#内篇-amp-amp-逍遥游" class="headerlink" title="内篇&amp;&amp;逍遥游"></a>内篇&amp;&amp;逍遥游</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以后尝试去写几本书</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一本讲机器学习和深度学习的，一定不要写的太厚，因为对于像我这样慢性精读的人来说就非常折磨，还没到跟自己过不去的时候。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一本讲我对量子计算与信息的探索，这是个大课题，得很久啦。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后一本是我的手绘本，想了一个比较中二的名字，[研究者的手绘本：异构认识世界]</p><p>最后的一点点是，即使有想放弃当初的部分热衷，要燃起对自己的热爱，因为还有可能，我可给以无聊的世界带来乐趣。</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微不足道的贡献 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-update-0</title>
      <link href="/2022/05/02/pe-update-0/"/>
      <url>/2022/05/02/pe-update-0/</url>
      
        <content type="html"><![CDATA[<h3 id="内篇-amp-amp-人间世"><a href="#内篇-amp-amp-人间世" class="headerlink" title="内篇&amp;&amp;人间世"></a>内篇&amp;&amp;人间世</h3><p>每天早上迷迷糊糊的起床排队抢显卡显得我很窘迫、多余，现在是早上 0.36，上线排队等 TPU中……</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-update-1</title>
      <link href="/2022/04/26/pe-update-1/"/>
      <url>/2022/04/26/pe-update-1/</url>
      
        <content type="html"><![CDATA[<h3 id="往日续谈"><a href="#往日续谈" class="headerlink" title="往日续谈"></a>往日续谈</h3><p>年轻的时候当然会觉得做 hacker 是最帅的，会写代码负荷攻击，游荡在外面危险而又迷人的神秘背影怎能不让人心动。</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-kFold验证</title>
      <link href="/2022/04/15/ml-dl-kfold-yan-zheng/"/>
      <url>/2022/04/15/ml-dl-kfold-yan-zheng/</url>
      
        <content type="html"><![CDATA[<h3 id="训练方法"><a href="#训练方法" class="headerlink" title="训练方法"></a>训练方法</h3><p>K-fold验证是在训练模型的时候普遍使用的策略，在训练集上随机划分数个模块，一般分为5折，其中一折是验证集，另外四折是训练集，循环迭代5次，最后对做模型集成加权平均，特征工程里对于划分也有很细致的划分，但这里就不详细述说了，有基础的读者应该知道。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_folds</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> num_splits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># we create a new column called kfold and fill it with -1</span>    data<span class="token punctuation">[</span><span class="token string">"fold"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment"># the next step is to randomize the rows of the data</span>    <span class="token comment"># data = data.sample(frac=1).reset_index(drop=True)</span>    <span class="token comment"># calculate number of bins by Sturge's rule</span>    <span class="token comment"># I take the floor of the value, you can also</span>    <span class="token comment"># just round it</span>    <span class="token comment"># num_bins = int(np.floor(1 + np.log2(len(data))))</span>        <span class="token comment"># bin targets</span>    data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token string">"bins"</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>        data<span class="token punctuation">[</span><span class="token string">"score"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">False</span>    <span class="token punctuation">)</span>        <span class="token comment"># initiate the kfold class from model_selection module</span>    kf <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span>num_splits<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>        <span class="token comment"># fill the new kfold column</span>    <span class="token comment"># note that, instead of targets, we use bins!</span>    <span class="token keyword">for</span> f<span class="token punctuation">,</span> <span class="token punctuation">(</span>t_<span class="token punctuation">,</span> v_<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token operator">=</span>data<span class="token punctuation">,</span> y<span class="token operator">=</span>data<span class="token punctuation">.</span>bins<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>v_<span class="token punctuation">,</span> <span class="token string">'fold'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f        <span class="token comment"># drop the bins column</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"bins"</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># return dataframe with folds</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/13/hello-world/"/>
      <url>/2022/04/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-KaggleCompeTem</title>
      <link href="/2022/04/11/ml-dl-kagglecompetem/"/>
      <url>/2022/04/11/ml-dl-kagglecompetem/</url>
      
        <content type="html"><![CDATA[<h2 id="1、The-most-common-classes-CV"><a href="#1、The-most-common-classes-CV" class="headerlink" title="1、The most common classes - CV"></a>1、The most common classes - CV</h2><p>补充细分类别</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 以USPPPM为例子</span><span class="token keyword">class</span> <span class="token class-name">Dataset</span><span class="token punctuation">:</span>        <span class="token keyword">class</span> <span class="token class-name">CFG</span><span class="token punctuation">:</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、The-second-classes-NLP"><a href="#2、The-second-classes-NLP" class="headerlink" title="2、The second classes - NLP"></a>2、The second classes - NLP</h2><p>——————————————————————</p><p>补充细分类别</p><p>——————————————————————</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、Machine-learning-Competitions"><a href="#3、Machine-learning-Competitions" class="headerlink" title="3、Machine learning Competitions"></a>3、Machine learning Competitions</h2>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kaggle </tag>
            
            <tag> 竞赛模板 </tag>
            
            <tag> 常用tricks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-Dl-DataVisualtion</title>
      <link href="/2022/04/08/ml-dl-datavisualtion/"/>
      <url>/2022/04/08/ml-dl-datavisualtion/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">import pandas as pdpd.plotting.register_matplotlib_converters()import matplotlib.pyplot as plt%matplotlib inlineimport seaborn as sns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data vistualtion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-优化算法疑问</title>
      <link href="/2022/04/07/ml-dl-you-hua-suan-fa-yi-wen/"/>
      <url>/2022/04/07/ml-dl-you-hua-suan-fa-yi-wen/</url>
      
        <content type="html"><![CDATA[<h4 id="优化算法疑问"><a href="#优化算法疑问" class="headerlink" title="优化算法疑问"></a>优化算法疑问</h4><p>前段时间了解了用于梯度下降的主流优化算法，可惜有一些疑问没能及时记录下来，不然 arxiv 会诞生出一篇新的关于使用小批量优化梯度的华丽文章</p><p>下面的 code 记录和调包侠行为无异，对于有基础的道友可以快速浏览</p><p>1.朴素的 SGD</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SGD</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>params<span class="token punctuation">,</span>self<span class="token punctuation">.</span>grads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>params<span class="token punctuation">,</span>grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.物理世界的 Momentum</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Momentum</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>momentum <span class="token operator">=</span> momentum        self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>params<span class="token punctuation">,</span>grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>v <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># v point to direct vector</span>            <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>v<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>momentum <span class="token operator">*</span> self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.不知道该怎么描述 Nesterov</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Nesterov</span><span class="token punctuation">:</span>    <span class="token comment"># 这个方法不太熟悉</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>momentum <span class="token operator">=</span> momentum        self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>params<span class="token punctuation">,</span>grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>v <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>v<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>momentum <span class="token operator">*</span> self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.大家普遍使用的 AdaGrad</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AdaGrad</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>params<span class="token punctuation">,</span>grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>h <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>h<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e-7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.也是大家常使用的 RMSprop</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RMSprop</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__int__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>decay_rate<span class="token operator">=</span><span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>decay_rate <span class="token operator">=</span> decay_rate        self<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>params<span class="token punctuation">,</span>grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>h <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>h<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> self<span class="token punctuation">.</span>decay_rate                self<span class="token punctuation">.</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>decay_rate<span class="token punctuation">)</span> <span class="token operator">*</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e-7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.还是大家常使用的 Adam </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Adam</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span>beta1<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>beta2<span class="token operator">=</span><span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>beta1 <span class="token operator">=</span> beta1        self<span class="token punctuation">.</span>beta2 <span class="token operator">=</span> beta2        self<span class="token punctuation">.</span><span class="token builtin">iter</span> <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>params<span class="token punctuation">,</span>grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>m <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>m<span class="token punctuation">,</span> self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>m<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>v<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">iter</span> <span class="token operator">+=</span> <span class="token number">1</span>        lr_t <span class="token operator">=</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>beta2<span class="token operator">**</span>self<span class="token punctuation">.</span><span class="token builtin">iter</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>beta1<span class="token operator">**</span>self<span class="token punctuation">.</span><span class="token builtin">iter</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>beta1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>beta2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>grads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            params <span class="token operator">-=</span> lr_t <span class="token operator">*</span> self<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e-7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p>代码源自：《深度学习进阶：自然语言处理》— 斋藤康毅，有兴趣的道友可去翻看，很好的一本书。</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SGD </tag>
            
            <tag> RMSProp </tag>
            
            <tag> Adam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-论文写作</title>
      <link href="/2022/04/07/pe-lun-wen-xie-zuo/"/>
      <url>/2022/04/07/pe-lun-wen-xie-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="论文写作要求"><a href="#论文写作要求" class="headerlink" title="论文写作要求"></a>论文写作要求</h2><p>1.标题 + 作者</p><p>2.摘要 - Abstract</p><p>3.导言 - Introduction </p><p>4.相关工作 - Related Work</p><p>Example : 5.模型 - Deep Residual Learning - 5.1 &gt; 5.2 …</p><p>6.理论</p><p>7.实验 + 总结 - Experiments + Conclusion</p><p>8.评论</p><p>引用：References</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-python数据处理</title>
      <link href="/2022/04/04/ml-dl-python-shu-ju-chu-li/"/>
      <url>/2022/04/04/ml-dl-python-shu-ju-chu-li/</url>
      
        <content type="html"><![CDATA[<h3 id="内篇-amp-amp-逍遥游"><a href="#内篇-amp-amp-逍遥游" class="headerlink" title="内篇&amp;&amp;逍遥游"></a>内篇&amp;&amp;逍遥游</h3><h3 id="切片操作的小块解释"><a href="#切片操作的小块解释" class="headerlink" title="切片操作的小块解释"></a>切片操作的小块解释</h3><ul><li>[-1]：获取最后一个元素，类似于matlab中的end；</li><li>[:-1]：除了最后一个元素，获取其他所有的元素；</li><li>[::-1]：对第一个到最后一个元素进行倒序之后取出；</li><li>[n::-1]：对第一个到第n个元素进行倒序后取出</li></ul><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><p>enumerate() 函数用于将一个可遍历的数据对象组合成一个索引序列，同时列出数据和数据下标</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_score <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token keyword">del</span> train<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1.广播机制</p><p>2.索引和切片</p><p>3.内存 trick</p><p>二、缺失值处理</p><p>伪降维</p><p>伪降维求和</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-注意力机制</title>
      <link href="/2022/04/02/ml-dl-zhu-yi-li-ji-zhi/"/>
      <url>/2022/04/02/ml-dl-zhu-yi-li-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="注意力机制-Attention-Mechanism"><a href="#注意力机制-Attention-Mechanism" class="headerlink" title="注意力机制 - Attention Mechanism"></a>注意力机制 - Attention Mechanism</h2><h3 id="一、attention-这项工作的出现"><a href="#一、attention-这项工作的出现" class="headerlink" title="一、attention 这项工作的出现"></a>一、attention 这项工作的出现</h3><h3 id="二、针对注意力机制所包含的一些区分"><a href="#二、针对注意力机制所包含的一些区分" class="headerlink" title="二、针对注意力机制所包含的一些区分"></a>二、针对注意力机制所包含的一些区分</h3><p>1、软注意，侧重于吸取的信息相对来说会偏向全面</p><p>2、硬注意，会直接舍弃部分信息来保留计算的轻便</p><p>3、自注意机制，由输入权重来相互作用，其实这样的状况是由内部来决定，</p><p>预训练模型看起来和 Transformer 有着很大的干系，可以说是语言模型的核心网络，</p><p>transformer 在我这里给出的解释是，一段话作为输入，首先将输入中的各个词在self-attention 机制下变成词向量，同时会含有一连串的每一个词的位置向量 （ 不行，我完全是跟着别人走的）</p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 循环神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-ReadingPaper</title>
      <link href="/2022/04/02/ml-dl-readingpaper/"/>
      <url>/2022/04/02/ml-dl-readingpaper/</url>
      
        <content type="html"><![CDATA[<h2 id="Awesome-Deep-Learning-amp-Quantum-Computing"><a href="#Awesome-Deep-Learning-amp-Quantum-Computing" class="headerlink" title="Awesome Deep Learning &amp; Quantum Computing"></a>Awesome Deep Learning &amp; Quantum Computing</h2><p>我的小仓库😎😎 : <a href="https://www.aliyundrive.com/s/CELiSXuKc8e">https://www.aliyundrive.com/s/CELiSXuKc8e</a></p><p>不错的github地址：</p><p><u>深度学习</u></p><p><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap">https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap</a></p><p><a href="https://github.com/mli/paper-reading">https://github.com/mli/paper-reading</a></p><p><u>量子计算</u></p><p><a href="https://github.com/desireevl/awesome-quantum-computing">https://github.com/desireevl/awesome-quantum-computing</a></p>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
            <tag> deep learning </tag>
            
            <tag> neural network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-实习意向</title>
      <link href="/2022/03/26/pe-shi-xi-yi-xiang/"/>
      <url>/2022/03/26/pe-shi-xi-yi-xiang/</url>
      
        <content type="html"><![CDATA[<p>目录</p><ul><li><p>一、AI for Design研发实习生</p></li><li><p>二、Graph Neural Network Research研发实习生</p></li><li><p>三、上海AI系统研究实习生</p></li><li><p>四、机器学习组AI for Science实习生</p></li><li><p>五、上海AI系统开发实习生</p></li><li><p>六、机器学习+计算化学/计算物理算法实习生</p></li><li><p>七、强化学习算法应用实习生</p></li></ul><p>——————————————————————————————</p><p>一、AI for Design研发实习生</p><ul><li>招聘人数： 1-2</li><li>工作地点： 北京</li></ul><p><strong>组别简介：</strong></p><p>微软亚洲研究院DKI (Data, Knowledge &amp; Intelligence) Area 致力于人工智能、数据分析、数据交互。数据可视化的研究。探索全新的数据分析，展示，交互技术，让数据和数据中的发现故事被高效地理解、广泛地传播。数据智能是一个典型的交叉领域，综合了自然语言处理、多维数据分析、机器学习、数据可视化、人机交互、计算机视觉等多个领域。团队与微软核心产品（如Excel，PowerPoint等）深度合作，并常年在各个领域的顶级会议和期刊上发表具有影响力的论文。</p><p><strong>项目简介：</strong></p><p>主要从事将人工智能与平面设计相结合的研究工作，探索使得平面设计更加自动化和智能化的深度学习模型和方法。这是一个跨领域的研究课题，涉及到深度学习、计算机视觉、自然语言处理、平面设计、软件工程等研究领域。</p><p><strong>工作职责：</strong></p><ul><li>积极跟进和关注深度学习、自然语言处理、计算机视觉的前沿研究</li><li>模型与算法设计和改进，数据的收集与处理，大规模模型的训练与调试，实验结果分析与总结，等等</li><li>撰写高水平论文</li><li>原型系统的实现</li></ul><p><strong>任职要求：</strong></p><ol><li>相关专业硕士及以上全日制在读学生</li><li>熟悉Python，精通 Huggingface, Fairseq, DeepSpeed等DNN框架与工具</li><li>有较强的数学基础，较强的编程能力，能独立进行数据分析</li><li>具备深度学习、自然语言处理、计算机视觉的相关知识</li><li>需要对GAN、CLIP、DALL-E、GPT、T5、BART等工作及相关研究中的一个或多个非常了解</li><li>拥有论文快速检索和阅读能力</li><li>有在计算机视觉或NLP方向国际会议发表论文经历，或编程比赛经历的同学优先。</li><li>有技术类博客文章撰写习惯的优先</li></ol><p>二、Graph Neural Network Research研发实习生</p><ul><li>招聘人数： 1-2</li><li>工作地点： 北京</li></ul><p><strong>组别简介：</strong></p><p>Data Analytics Research是微软亚洲研究院DKI (Data, Knowledge &amp; Intelligence) Area 下专注于数据分析的研究团队，深度参与了微软多个产品（如Excel, Forms, Bing, Azure, Power BI等）中数据分析和智能的研发工作，深刻改变了亿万用户分析理解各领域数据的方式，并在数据挖掘、人工智能、机器学习、软件工程等领域常年发表具有影响力的工作。</p><p><strong>项目简介：</strong></p><p>主要从事图神经网络相关的研究工作，着眼于图神经网络模型的设计与理解，致力于提高模型的泛化能力以及可解释性，包括但不仅限于图神经网络新架构设计，图模型普适性分析，基于图性质的问题空间划分，图迁移学习，等等。此外，基于对图模型的理解，我们也探索图网络在更广泛问题场景下的应用前景，用图网络技术赋能更多领域。</p><p><strong>工作职责：</strong></p><ul><li>积极跟进和关注图网络学习的前沿研究</li><li>进行图网络模型研究，包括设计新的图模型架构与学习算法，图模型可解释性研究，新领域下的图模型应用，等等</li><li>撰写高水平论文并在顶级会议和期刊上进行发表</li></ul><p><strong>任职要求：</strong></p><ol><li>熟悉Python，精通 Pytorch或Tensorflow</li><li>具备机器学习、深度学习的相关知识</li><li>拥有论文快速检索和阅读能力</li><li>有在国际会议发表论文经历、ACM或其他编程比赛经历的同学优先。</li></ol><p>三、上海AI系统研究实习生</p><ul><li>招聘人数： 2-4</li><li>工作地点： 上海</li></ul><p><strong>工作职责：</strong></p><p>在 MSRA研究员们的指导下，进行人工智能系统前沿技术的研究，具体研究方向包括但不限于：</p><ul><li>针对大模型、系数模型、动态模型等前沿模型的训练及推理优化</li><li>针对各种端侧和云侧设备进行自动化部署优化，包括编译优化，模型架构优化与压缩，面向硬件的高效模型设计等</li><li>面向深度学习负载的集群设计，包括调度优化，数据与通信优化等</li></ul><p><strong>任职要求：</strong></p><ul><li>硕士或博士研究生，专业为计算机、电子信息等相关专业，具有较强的英文听说读写能力。</li><li>有强烈的意愿做世界先进的科学研究并且在顶级会议或期刊发表论文。</li><li>具备良好的动手能力，以及分析问题解决问题的能力，能够快速地规划出解决方案，并进行验证</li><li>有团队协作精神，有责任心</li></ul><p><strong>加分项：</strong></p><ul><li>有深度学习基础，至少对一种深度学习框架（PyTorch 优先，TensorFlow等）具有深入理解；对AI算法有一定了解，有在相关领域顶会上发表过论文者优先</li><li>对GPU架构具有一定了解，并有优化经验者优先</li><li>对分布式系统或数据库系统有一定基础，具有相关研究经验者优先</li><li>具有AI加速器（ASIC/FPGA等）研究经验者优先</li><li>参加过学术界工业界机器学习相关比赛，CCPC/ICPC 等程序设计竞赛，电子设计大赛等竞赛并获得优异成绩者优先</li><li></li></ul><p>四、机器学习组AI for Science实习生</p><ul><li>招聘人数： 3-5</li><li>工作地点： 北京</li></ul><p><strong>组别简介：</strong></p><p>微软亚洲研究院机器学习组致力于从算法、应用和理论层面推进人工智能前沿研究，加速人工智能在自然科学和产业应用中的探索。机器学习组开发了Graphormer，LightGBM等多个受欢迎的开源工具包，多次夺得国际比赛冠军，并持续产出高质量学术论文。</p><p><strong>工作职责：</strong></p><p>参与AI for Science项目科研项目，撰写高质量论文，完成前沿算法的落地与部署，开发、维护开源工具包。具体方向包括但不限于：</p><ol><li>基于深度学习的分子模拟，如分子动力学，分子性质预测，分子生成，逆合成等。</li><li>深度学习模型在算法及理论层面的创新，如图神经网络、大规模预训练算法等。</li><li>深度学习在材料发现、药物发现等中的应用。</li><li>机器学习与湿实验相结合。</li><li>使用机器学习加速密度泛函理论等。</li></ol><p><strong>任职要求：</strong></p><ol><li>扎实的数理基础知识。</li><li>任一相关方向扎实的背景知识。</li><li>熟练使用PyTorch/Tensorflow等深度学习库。</li></ol><p>加分项：</p><ol><li>有机器学习方向顶会论文发表。或</li><li>有丰富的计算物理、化学、生物知识，会熟练使用相关量子化学软件等。</li><li>实习时间一年及以上。</li></ol><p>五、上海AI系统开发实习生</p><ul><li>招聘人数： 2-4</li><li>工作地点： 上海</li></ul><p><strong>工作职责：</strong></p><p>与 MSRA的研究员们合作，共同研究AI前沿技术，设计开发人工智能系统与工具，维护开源项目，并将开发成果应用于实际场景。其具体内容包括：</p><ul><li>在深入理解前沿算法（如NAS，Model Compression，sparsity）的基础上，探索未来的发展方向</li><li>参与MSRA 开源项目（如 NNI、nn-meter等）的设计和开发，包括接口设计，算法实现，用户交互等</li><li>与团队合作探索项目的更多应用场景，并将系统与工具运用于实际产品中</li></ul><p><strong>任职要求：</strong></p><ul><li>有计算机科学、数据科学或相关专业背景，本科及以上学历在校学生</li><li>有 Python等语言的编程经验，对 Tensorflow/PyTorch 等深度学习框架有一定了解</li><li>具备良好的工程能力，以及分析问题解决问题的能力，能够快速地规划出解决方案，并将想法落地</li><li>有团队协作精神，有责任心</li></ul><p><strong>加分项：</strong></p><ul><li>对AI算法（AutoML/NAS/Compression等）有一定了解，有在相关领域顶会上发表过论文者优先</li><li>参加过学术界工业界机器学习相关比赛并获得优异成绩者优先</li><li>具有深度学习项目经验者优先，熟悉分布式训练者优先</li><li>有 CCPC/ICPC 等程序设计竞赛的获奖经历者优先</li><li>有开源项目开发或维护经历者优先</li></ul><p>六、机器学习+计算化学/计算物理算法实习生</p><ul><li>招聘人数： 2-4</li></ul><p><strong>组别简介：</strong></p><p>微软亚洲研究院机器学习领域从理论、算法、应用等不同层面推动机器学习的前沿。我们的研究兴趣包含：深度学习、强化学习、图学习、梯度提升树、在线学习、预训练、动态学习、学习理论等。同时， 我们也在积极探索人工智能在自然科学和产业应用中的价值，从而为科学工作者和传统工业赋能（具体见研究概况）。在过去的十几年间，我们在顶级国际会议和期刊上发表了大量被高度引用的高质量论文，向微软的产品部门转化了大量核心技术，并帮助众多的企业合作伙伴实现了数字化转型。我们也向开源社区贡献了大量高质量开源工具，例如 LightGBM、LigthLDA、微软图引擎，多智能体资源优化平台“群策 MARO“，业内首个AI量化投资平台“微矿Qlib”，以及最新的时空预测平台”FOST”。</p><p><strong>工作职责：</strong></p><ol><li>复现已有论文</li><li>改进现有代码、性能优化</li></ol><p>工作方向（选其一）</p><ul><li>利用图神经网络等相关方法进行分子材料表征</li><li>使用生成模型、强化学习等方法完成分子材料设计</li><li>利用神经网络加速偏微分方程求解</li><li>利用神经网络完成积分方程求解</li><li>利用cuda语言加速</li></ul><p><strong>任职要求：</strong></p><ol><li>计算机、电子、化学、物理或相关专业（本科/硕士/博士）</li><li>扎实的数据结构/算法基础</li><li>熟悉常见的机器学习算法，熟悉使用PyTorch或TensorFlow等</li><li>熟练的编程能力</li><li>快速学习能力,良好的沟通与合作能力</li></ol><p>七、强化学习算法应用实习生</p><ul><li>招聘人数： 2-4</li></ul><p><strong>组别简介：</strong></p><p>微软亚洲研究院机器学习领域从理论、算法、应用等不同层面推动机器学习的前沿。我们的研究兴趣包含：深度学习、强化学习、图学习、梯度提升树、在线学习、预训练、动态学习、学习理论等。同时， 我们也在积极探索人工智能在自然科学和产业应用中的价值，从而为科学工作者和传统工业赋能（具体见研究概况）。在过去的十几年间，我们在顶级国际会议和期刊上发表了大量被高度引用的高质量论文，向微软的产品部门转化了大量核心技术，并帮助众多的企业合作伙伴实现了数字化转型。我们也向开源社区贡献了大量高质量开源工具，例如 LightGBM、LigthLDA、微软图引擎，多智能体资源优化平台“群策 MARO“，业内首个AI量化投资平台“微矿Qlib”，以及最新的时空预测平台”FOST”。</p><p><strong>工作职责：</strong></p><ol><li>积极跟进和关注强化学习算法的前沿研究；</li><li>参与机器学习算法，特别是强化学习相关算法的研究；</li><li>参与强化学习算法在物流、能源、工业控制等领域的落地应用。</li></ol><p><strong>任职要求：</strong></p><ol><li>计算机或相关专业硕士或以上学历，有较强编程能力的优秀本科生也欢迎申请；</li><li>具备良好的数学基础，机器学习知识；</li><li>具有较强的编程实现能力，良好的沟通能力和团队协作精神；</li><li>加分项：有强化学习算法的开发和研究经历；顶级AI会议文章；熟练掌握深度学习框架(PyTorch, TensorFlow 等)；有开源软件开发经历等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSRA </tag>
            
            <tag> 微软亚洲研究院 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-卷积神经网络</title>
      <link href="/2022/03/26/ml-dl-juan-ji-shen-jing-wang-luo/"/>
      <url>/2022/03/26/ml-dl-juan-ji-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h3 id="一、卷积神经网络的诞生"><a href="#一、卷积神经网络的诞生" class="headerlink" title="一、卷积神经网络的诞生"></a>一、卷积神经网络的诞生</h3><p>1.对该类型网络的研究都源于其他人的，一样的内容就不在过多的赘述：[图像学的内容不太感兴趣]</p><p>主要用途：处理图像数据、表格数据等等</p><p><u>竞赛可选择：图像识别，目标检测-边缘检测，语义分割</u></p><p>在对 DNN 的架构添加了 卷积 layer 后就是 CNN ，这就是 CNN 的由来，但 卷积的操作方式有些奇怪的行为让人大跌眼镜</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 构造一个二维卷积层，它具有1个输出通道和形状为（1，2）的卷积核</span><span class="token comment"># 二维卷积核 参数形式 (批量大小，通道，高度，宽度)</span>conv2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>特性：空间不变性</p><ol><li><em>平移不变性</em>（translation invariance）：不管检测对象出现在图像中的哪个位置，神经网络的前面几层应该对相同的图像区域具有相似的反应，即为“平移不变性”。</li><li><em>局部性</em>（locality）：神经网络的前面几层应该只探索输入图像中的局部区域，而不过度在意图像中相隔较远区域的关系，这就是“局部性”原则。最终，可以聚合这些局部特征，以在整个图像级别进行预测。</li></ol><p>输出的卷积层 &gt; 特征映射</p><p>感受野：指前向传播中可能影响 x 计算的所有元素</p><p>2、卷积神经网络之LeNet</p><p>LeNet（LeNet-5）由两个部分组成：</p><ul><li>卷积编码器：由两个卷积层组成;</li><li>全连接层密集块：由三个全连接层组成。</li></ul><p><img src="/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/lenet.svg" alt="lenet"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>卷积神经网络（CNN）是一类使用卷积层的网络。</li><li>在卷积神经网络中，我们组合使用卷积层、非线性激活函数和汇聚层。</li><li>为了构造高性能的卷积神经网络，我们通常对卷积层进行排列，逐渐降低其表示的空间分辨率，同时增加通道数。</li><li>在传统的卷积神经网络中，卷积块编码得到的表征在输出之前需由一个或多个全连接层进行处理。</li><li>LeNet是最早发布的卷积神经网络之一。</li></ul><h4 id="考查"><a href="#考查" class="headerlink" title="考查"></a>考查</h4><ol><li><p>将平均汇聚层替换为最大汇聚层，会发生什么？</p></li><li><p>尝试构建一个基于LeNet的更复杂的网络，以提高其准确性。</p><ol><li>调整卷积窗口大小。</li><li>调整输出通道的数量。</li><li>调整激活函数（如ReLU）。</li><li>调整卷积层的数量。</li><li>调整全连接层的数量。</li><li>调整学习率和其他训练细节（例如，初始化和轮数）。</li></ol></li><li><p>在MNIST数据集上尝试以上改进的网络。</p></li><li><p>显示不同输入（例如毛衣和外套）时，LeNet第一层和第二层的激活值。</p></li></ol><h2 id="二、现代卷积神经网络"><a href="#二、现代卷积神经网络" class="headerlink" title="二、现代卷积神经网络"></a>二、现代卷积神经网络</h2><h3 id="1、AlexNet"><a href="#1、AlexNet" class="headerlink" title="1、AlexNet"></a>1、AlexNet</h3><ul><li><p>AlexNet。它是第一个在大规模视觉竞赛中击败传统计算机视觉模型的大型神经网络；</p></li><li><p>使用重复块的网络（VGG）。它利用许多重复的神经网络块；</p></li><li><p>网络中的网络（NiN）。它重复使用由卷积层和1×1卷积层（用来代替全连接层）来构建深层网络;</p></li><li><p>含并行连结的网络（GoogLeNet）。它使用并行连结的网络，通过不同窗口大小的卷积层和最大汇聚层来并行抽取信息；</p></li><li><p>残差网络（ResNet）。它通过残差块构建跨层的数据通道，是计算机视觉中最流行的体系架构；</p></li><li><p>稠密连接网络（DenseNet）。它的计算成本很高，但给我们带来了更好的效果。</p></li></ul><p>学习表征观摩图</p><p><img src="/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/filters.png" alt="filters"></p><p><img src="/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/alexnet.svg" alt="alexnet"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> d2l <span class="token keyword">import</span> torch <span class="token keyword">as</span> d2lnet <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    <span class="token comment"># 这里，我们使用一个11*11的更大窗口来捕捉对象。</span>    <span class="token comment"># 同时，步幅为4，以减少输出的高度和宽度。</span>    <span class="token comment"># 另外，输出通道的数目远大于LeNet</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 减小卷积窗口，使用填充为2来使得输入与输出的高和宽一致，且增大输出通道数</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 使用三个连续的卷积层和较小的卷积窗口。</span>    <span class="token comment"># 除了最后的卷积层，输出通道的数量进一步增加。</span>    <span class="token comment"># 在前两个卷积层之后，汇聚层不用于减少输入的高度和宽度</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 这里，全连接层的输出数量是LeNet中的好几倍。使用dropout层来减轻过拟合</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">6400</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 最后是输出层。由于这里使用Fashion-MNIST，所以用类别数为10，而非论文中的1000</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察网络每一层输出架构</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token keyword">for</span> layer <span class="token keyword">in</span> net<span class="token punctuation">:</span>    X<span class="token operator">=</span>layer<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span><span class="token string">'output shape:\t'</span><span class="token punctuation">,</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Conv2d output shape: torch.Size([1, 96, 54, 54])ReLU output shape: torch.Size([1, 96, 54, 54])MaxPool2d output shape: torch.Size([1, 96, 26, 26])Conv2d output shape: torch.Size([1, 256, 26, 26])ReLU output shape: torch.Size([1, 256, 26, 26])MaxPool2d output shape: torch.Size([1, 256, 12, 12])Conv2d output shape: torch.Size([1, 384, 12, 12])ReLU output shape: torch.Size([1, 384, 12, 12])Conv2d output shape: torch.Size([1, 384, 12, 12])ReLU output shape: torch.Size([1, 384, 12, 12])Conv2d output shape: torch.Size([1, 256, 12, 12])ReLU output shape: torch.Size([1, 256, 12, 12])MaxPool2d output shape: torch.Size([1, 256, 5, 5])Flatten output shape: torch.Size([1, 6400])Linear output shape: torch.Size([1, 4096])ReLU output shape: torch.Size([1, 4096])Dropout output shape: torch.Size([1, 4096])Linear output shape: torch.Size([1, 4096])ReLU output shape: torch.Size([1, 4096])Dropout output shape: torch.Size([1, 4096])Linear output shape: torch.Size([1, 10])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用更小的学习速率训练，这是因为网络更深更广、图像分辨率更高，训练卷积神经网络就更昂贵。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>AlexNet的架构与LeNet相似，但使用了更多的卷积层和更多的参数来拟合大规模的ImageNet数据集。</li><li>今天，AlexNet已经被更有效的架构所超越，但它是从浅层网络到深层网络的关键一步。</li><li>尽管AlexNet的代码只比LeNet多出几行，但学术界花了很多年才接受深度学习这一概念，并应用其出色的实验结果。这也是由于缺乏有效的计算工具。</li><li>Dropout、ReLU和预处理是提升计算机视觉任务性能的其他关键步骤。</li></ul><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol><li>试着增加迭代轮数。对比LeNet的结果有什么不同？为什么？</li><li>AlexNet对于Fashion-MNIST数据集来说可能太复杂了。<ol><li>尝试简化模型以加快训练速度，同时确保准确性不会显著下降。</li><li>设计一个更好的模型，可以直接在28×28图像上工作。</li></ol></li><li>修改批量大小，并观察模型精度和GPU显存变化。</li><li>分析了AlexNet的计算性能。<ol><li>在AlexNet中主要是哪部分占用显存？</li><li>在AlexNet中主要是哪部分需要更多的计算？</li><li>计算结果时显存带宽如何？</li></ol></li><li>将dropout和ReLU应用于LeNet-5，效果有提升吗？再试试预处理会怎么样？</li></ol><h3 id="2、使用块的网络：-VGG-和AlexNet-没有很大的差别"><a href="#2、使用块的网络：-VGG-和AlexNet-没有很大的差别" class="headerlink" title="2、使用块的网络： VGG (和AlexNet 没有很大的差别)"></a>2、使用块的网络： VGG (和AlexNet 没有很大的差别)</h3><p><img src="/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/vgg.svg" alt="vgg"></p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>VGG-11使用可复用的卷积块构造网络。不同的VGG模型可通过每个块中卷积层数量和输出通道数量的差异来定义。</li><li>块的使用导致网络定义的非常简洁。使用块可以有效地设计复杂的网络。</li><li>在VGG论文中，Simonyan和Ziserman尝试了各种架构。特别是他们发现深层且窄的卷积（即3×3）比较浅层且宽的卷积更有效。</li></ul><h4 id="3、网络中的网络-NiN"><a href="#3、网络中的网络-NiN" class="headerlink" title="3、网络中的网络 - NiN"></a>3、网络中的网络 - NiN</h4>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> 卷积神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ml-DL-朕命急救</title>
      <link href="/2022/03/25/ml-dl-zhen-ming-ji-jiu/"/>
      <url>/2022/03/25/ml-dl-zhen-ming-ji-jiu/</url>
      
        <content type="html"><![CDATA[<h4 id="一、竞赛预处理-样例"><a href="#一、竞赛预处理-样例" class="headerlink" title="一、竞赛预处理-样例"></a>一、竞赛预处理-样例</h4><h5 id="1、导入常见库"><a href="#1、导入常见库" class="headerlink" title="1、导入常见库"></a>1、导入常见库</h5><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def seed_everything(seed=42):    random.seed(seed)    os.environ['PYTHONHASHSEED'] = str(seed)    os.environ['TF_CUDNN_DETERMINISTIC'] = '1'    np.random.seed(seed)    tf.random.set_seed(seed)seed_everything(seed=42)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># Linear algebra</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token comment"># data processing, CSV file I/O</span>————————————————————————————————————————————————————————————<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment"># TPU config</span>    tpu <span class="token operator">=</span> tf<span class="token punctuation">.</span>distribute<span class="token punctuation">.</span>cluster_resolver<span class="token punctuation">.</span>TPUClusterResolver<span class="token punctuation">(</span><span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>config<span class="token punctuation">.</span>experimental_connect_to_cluster<span class="token punctuation">(</span>tpu<span class="token punctuation">)</span>    tf<span class="token punctuation">.</span>tpu<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>initialize_tpu_system<span class="token punctuation">(</span>tpu<span class="token punctuation">)</span>    strategy <span class="token operator">=</span> tf<span class="token punctuation">.</span>distribute<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>TPUStrategy<span class="token punctuation">(</span>tpu<span class="token punctuation">)</span>    auto <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>AUTOTUNE    replicas <span class="token operator">=</span> strategy<span class="token punctuation">.</span>num_replicas_in_sync    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'TPU: </span><span class="token interpolation"><span class="token punctuation">{</span>tpu<span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    strategy <span class="token operator">=</span> tf<span class="token punctuation">.</span>distribute<span class="token punctuation">.</span>get_strategy<span class="token punctuation">(</span><span class="token punctuation">)</span>    auto <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>AUTOTUNE    replicas <span class="token operator">=</span> strategy<span class="token punctuation">.</span>num_replicas_in_sync<span class="token comment"># XLA acceleartion</span>tf<span class="token punctuation">.</span>config<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>set_jit<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Replicas: </span><span class="token interpolation"><span class="token punctuation">{</span>replicas<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>———————————————————————————————————————————————————————————————————————————————————————图像数据处理部分—————————————————————————<span class="token operator">%</span>matplotlib inline <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>image <span class="token keyword">as</span> mpimg <span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snsplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'seaborn'</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token string">'notebook'</span><span class="token punctuation">,</span> palette<span class="token operator">=</span><span class="token string">'deep'</span><span class="token punctuation">)</span>——————————————————————————语言token处理部分——————————————————————————<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud<span class="token punctuation">,</span> STOPWORDS —————————————————————————添加补充——————————————————————————    <span class="token keyword">from</span> IPython<span class="token punctuation">.</span>core<span class="token punctuation">.</span>interactiveshell <span class="token keyword">import</span> InteractiveShell <span class="token comment"># idk</span>InteractiveShell<span class="token punctuation">.</span>ast_node_interactivity <span class="token operator">=</span> <span class="token string">"all"</span> <span class="token comment"># idk</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token number">10</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'fivethirtyeight'</span><span class="token punctuation">)</span><span class="token keyword">from</span> scipy <span class="token keyword">import</span> stats <span class="token keyword">for</span> dirname<span class="token punctuation">,</span> _<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'/kaggle/input'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> filenmae <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirname<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">highlight_max</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>s <span class="token operator">==</span> np<span class="token punctuation">.</span>nanmax<span class="token punctuation">(</span>s<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment"># idk</span><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm <span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image ————————————————————————————————————————————————————————————————————<span class="token keyword">import</span> os<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> gc <span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential <span class="token keyword">from</span> keras <span class="token keyword">import</span>  backend <span class="token keyword">as</span> K <span class="token comment"># idk</span>—————————————————————————————图像部分模型层的简易解释——————————————————————————————————<span class="token comment"># Conv2D : 二维卷积层，互相关运算，可使用填充、步幅和多通道输入/输出</span><span class="token comment"># Dense : 稠密层</span><span class="token comment"># Dropout : 丢弃层</span><span class="token comment"># pool2d : 2维汇聚层，对汇聚窗口所有元素计算最大值或平均值，可使用填充、步幅和多通道输入/输出</span><span class="token comment"># Flatten : 平滑层</span><span class="token comment"># MaxPool2D : 二维汇聚计算最大值</span><span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense <span class="token punctuation">,</span> Dropout <span class="token punctuation">,</span> Lambda<span class="token punctuation">,</span> Flatten Conv2D<span class="token punctuation">,</span> MaxPool2D <span class="token comment"># 优化函数 rmsprop_v2 , adam_v2</span><span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> Adam <span class="token punctuation">,</span>RMSprop<span class="token comment"># 训练、验证数据分离</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> confusion_matrix <span class="token comment"># idk</span><span class="token keyword">from</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>image <span class="token keyword">import</span> ImageDataGenerator <span class="token comment"># idk</span>——————————————————————————语言模型的部分解释—————————————————————————————————<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder <span class="token comment"># idk</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> StratifiedKFold <span class="token comment"># idk</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token punctuation">,</span> AutoConfig<span class="token punctuation">,</span> AutoModel<span class="token punctuation">,</span> get_linear_schedule_with_warmup <span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> AdamW———————————————————————————————————————————————————————————————————————————<span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> ReduceLROnPlateau <span class="token comment"># idk</span>———————————————————————————————————忽略包环境的警告——————————————————————————<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、检查环境状况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> subprocess <span class="token keyword">import</span> check_output<span class="token keyword">print</span><span class="token punctuation">(</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token string">"../input"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="二、检查数据"><a href="#二、检查数据" class="headerlink" title="二、检查数据"></a>二、检查数据</h4><h5 id="1、加载提供的数据"><a href="#1、加载提供的数据" class="headerlink" title="1、加载提供的数据"></a>1、加载提供的数据</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/train.csv'</span><span class="token punctuation">)</span> <span class="token comment"># 读入训练数据</span>test <span class="token operator">=</span> pd <span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/test.csv'</span><span class="token punctuation">)</span> <span class="token comment"># 读入测试数据</span>train<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 查看前面5行的信息</span>train<span class="token punctuation">.</span>shape <span class="token comment"># 返回整体 data 的 的信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Shape Dtrain:</span><span class="token interpolation"><span class="token punctuation">{</span>train<span class="token punctuation">.</span>shape<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Shape Dtest: </span><span class="token interpolation"><span class="token punctuation">{</span>test<span class="token punctuation">.</span>shape<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Unique elements per column"</span><span class="token punctuation">)</span>train<span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Missing Value?"</span><span class="token punctuation">)</span>train<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>————————————————————————图像数据处理方法————————————————————————————X_train <span class="token operator">=</span> <span class="token punctuation">(</span>train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token comment"># 形成array数组 </span>y_train <span class="token operator">=</span> train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int32'</span><span class="token punctuation">)</span> <span class="token comment"># 28*28 的值</span>X_test <span class="token operator">=</span> test<span class="token punctuation">.</span>values<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>———————————————————————————— 技巧 <span class="token punctuation">(</span>tricks<span class="token punctuation">)</span> ————————————————————————<span class="token comment"># 一些技巧 - tricks</span><span class="token keyword">del</span> train <span class="token comment"># can free some space ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、数据可视化"><a href="#2、数据可视化" class="headerlink" title="2、数据可视化"></a>2、数据可视化</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># method 1</span>X_train <span class="token operator">=</span> X_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token comment"># 转变数据为图片，重新组织形状</span><span class="token comment"># method 2 : Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)</span>X_train <span class="token operator">=</span> X_train<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>test <span class="token operator">=</span> test<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>————————————————————————————————————————————————————————————————Y_train <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token comment"># 只取值的那一列标签</span>X_train <span class="token operator">=</span> train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 不要值的那一列作为训练数据</span>count <span class="token operator">=</span> sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>Y_train<span class="token punctuation">)</span> <span class="token comment"># 计算 1-10 的数量</span>Y_train<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 柱状图显示 1 - 10 的数量</span>————————————————————————————————————————————————————————————————top <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>anc <span class="token keyword">for</span> anc <span class="token keyword">in</span> train<span class="token punctuation">[</span><span class="token string">'anchor'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Counter 计数标签'anchor'</span>top <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 取得前面 50 个</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 绘制图表尺寸</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> palette <span class="token operator">=</span> <span class="token string">'hls'</span><span class="token punctuation">)</span> <span class="token comment"># 调色板为 hls</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token comment"># x 轴标签可以做出一些调整</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Top 50 First Phrases (Anchor)"</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>————————————————————————————————————————————————————————————————<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404083846939.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>text_len <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'anchor'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>text_len<span class="token punctuation">,</span> ax <span class="token operator">=</span> ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Word Count Distribution'</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># 这还要取设置大小？</span>avg_word_len <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'anchor'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 看起来这位小哥很喜欢 用 lambda 演算，分离 anchor 里的词向量来计算平均长度</span>sns<span class="token punctuation">.</span>histplot<span class="token punctuation">(</span>avg_word_len<span class="token punctuation">,</span> ax <span class="token operator">=</span> ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kde <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'#ffa408'</span><span class="token punctuation">)</span> <span class="token comment"># kde 是开启核密度函数？,我只是看到一条线啊</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Average Word Length Distribution'</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404091257020.png"></p><h2 id="时尚词云的display，需要配合图片组合"><a href="#时尚词云的display，需要配合图片组合" class="headerlink" title="时尚词云的display，需要配合图片组合"></a>时尚词云的display，需要配合图片组合</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>text <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'anchor'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuesurl <span class="token operator">=</span> <span class="token string">'./img.png'</span><span class="token comment"># url = 'https://static.vecteezy.com/system/resources/previews/000/263/280/non_2x/vector-open-book.jpg'</span><span class="token comment"># 我不知道为什么链接不能有效打开</span>im <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 所以我只能用我自己的方式来打开</span><span class="token comment"># im = np.array(Image.open(requests.get(url, stream=True).raw))</span>cloud <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>stopwords <span class="token operator">=</span> STOPWORDS<span class="token punctuation">,</span>                  background_color <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">,</span>                  mask <span class="token operator">=</span> im<span class="token punctuation">,</span>                  max_words <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>cloud<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093146238.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 针对上面的 anchor 的特征来对 target 的信息抽取</span><span class="token comment"># 只需要把 anchor 替换成 taraget ,action ! </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093640583.png"></p><p><img src="/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093717734.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 看起来这个好像是 cm 来计量的</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'context'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> train<span class="token punctuation">,</span> palette <span class="token operator">=</span> <span class="token string">'hls'</span><span class="token punctuation">)</span> <span class="token comment"># 又来计算 context 的信息，但看起来特征 context 的信息有点多啊</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Distribution of Context'</span><span class="token punctuation">,</span> fontsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404094416376.png"></p><h6 id="3、特征标准化"><a href="#3、特征标准化" class="headerlink" title="3、特征标准化"></a>3、特征标准化</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python">mean_px <span class="token operator">=</span> X_train<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    std_px <span class="token operator">=</span> X_train<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>     float32 格式<span class="token keyword">def</span> <span class="token function">standardize</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>mean_px<span class="token punctuation">)</span><span class="token operator">/</span>std_pxX_train <span class="token operator">=</span> X_train <span class="token operator">/</span> <span class="token number">255.0</span>test <span class="token operator">=</span> test <span class="token operator">/</span> <span class="token number">255.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、检查数据和缺失值"><a href="#4、检查数据和缺失值" class="headerlink" title="4、检查数据和缺失值"></a>4、检查数据和缺失值</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">X_train<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Encode labels to one hot vectors (ex : 2 -&gt; [0,0,1,0,0,0,0,0,0,0])</span><span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>np_utils <span class="token keyword">import</span> to_categoricaY_train <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>Y_train<span class="token punctuation">,</span> num_classes <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Set the random seed</span>random_seed <span class="token operator">=</span> <span class="token number">2</span><span class="token comment"># Split the train and the validation set for the fitting</span>X_train<span class="token punctuation">,</span> X_val<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> Y_val <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> test_size <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>random_seed<span class="token punctuation">)</span><span class="token comment"># 查看一个例子</span>g <span class="token operator">=</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>——————————————————————————————————————————————————————————————————USPPMencoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'score_encoded'</span><span class="token punctuation">]</span> <span class="token operator">=</span> encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 这里的 0 对应于 label 是 0，0.25 对应于 1 ，0.5 对应于 2。以此类推...</span>skf <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits <span class="token operator">=</span> CONFIG<span class="token punctuation">.</span>num_fold<span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>random_state <span class="token operator">=</span> CONFIG<span class="token punctuation">.</span>seed<span class="token punctuation">)</span><span class="token comment"># 分层k折</span><span class="token comment"># num_fold = 5, seed = 2022</span><span class="token keyword">for</span> k<span class="token punctuation">,</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> val_ind<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>skf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X <span class="token operator">=</span> train<span class="token punctuation">,</span> y <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'score_encoded'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># enumerate 中分离出来的数据是 下标 加上 train 中的值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>val_ind<span class="token punctuation">)</span> <span class="token comment"># idk</span>    train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_ind<span class="token punctuation">,</span><span class="token string">'fold'</span><span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token comment"># 将 val_ind 的下标分别 贴上 k 标志</span>    <span class="token comment"># 通过行索引 index 中的具体值来取行数据</span>    <span class="token comment"># iloc 是通过 行号来取行数据</span><span class="token comment">################# 效果还不错 ###################</span><span class="token punctuation">[</span>    <span class="token number">2</span>    <span class="token number">11</span>    <span class="token number">13</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">36468</span> <span class="token number">36469</span> <span class="token number">36470</span><span class="token punctuation">]</span><span class="token punctuation">[</span>    <span class="token number">0</span>     <span class="token number">3</span>     <span class="token number">5</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">36459</span> <span class="token number">36464</span> <span class="token number">36467</span><span class="token punctuation">]</span><span class="token punctuation">[</span>    <span class="token number">6</span>    <span class="token number">10</span>    <span class="token number">14</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">36465</span> <span class="token number">36471</span> <span class="token number">36472</span><span class="token punctuation">]</span><span class="token punctuation">[</span>    <span class="token number">4</span>    <span class="token number">21</span>    <span class="token number">26</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">36457</span> <span class="token number">36462</span> <span class="token number">36466</span><span class="token punctuation">]</span><span class="token punctuation">[</span>    <span class="token number">1</span>     <span class="token number">8</span>     <span class="token number">9</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">36455</span> <span class="token number">36456</span> <span class="token number">36460</span><span class="token punctuation">]</span><span class="token comment">###############################################</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-添加数据标签"><a href="#7-添加数据标签" class="headerlink" title="7.添加数据标签"></a>7.添加数据标签</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'context'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>df_cpc<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我认为比较重要的数据集类"><a href="#我认为比较重要的数据集类" class="headerlink" title="我认为比较重要的数据集类"></a>我认为比较重要的数据集类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dataset</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Dataset(data)      data (np.array or list-like): input_ids and y    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>max_length <span class="token operator">=</span> max_length    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Padding to max_length</span>        d <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        n <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>max_length<span class="token punctuation">)</span>        input_ids <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_length<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>        input_ids<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span>        attention_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_length<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>        attention_mask<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'input_ids'</span><span class="token punctuation">:</span> input_ids<span class="token punctuation">,</span>                <span class="token string">'attention_mask'</span><span class="token punctuation">:</span> attention_mask<span class="token punctuation">,</span>                <span class="token string">'n'</span><span class="token punctuation">:</span> n<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tokenize"><a href="#Tokenize" class="headerlink" title="Tokenize"></a>Tokenize</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_data</span><span class="token punctuation">(</span>train<span class="token punctuation">,</span> tokenizer<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Create input_ids and label array y    Args:      train (pd.DataFrame)    Returns: list[dict]      input_ids (np.array[int])      n (int): seq length or number of tokens    """</span>    sep <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>sep_token_id    <span class="token keyword">if</span> tokenizer<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'RobertaTokenizerFast'</span><span class="token punctuation">:</span>        nsep <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        nsep <span class="token operator">=</span> <span class="token number">2</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token keyword">in</span> train<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> r<span class="token punctuation">.</span>pn_history        feature_text <span class="token operator">=</span> r<span class="token punctuation">.</span>feature_text        o <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>text<span class="token punctuation">,</span> feature_text<span class="token punctuation">,</span>                      add_special_tokens<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span>max_length<span class="token punctuation">,</span>                      truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                      return_offsets_mapping<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># Input ids</span>        input_ids <span class="token operator">=</span> o<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_ids<span class="token punctuation">)</span>        input_ids <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>o<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>input_ids <span class="token operator">==</span> sep<span class="token punctuation">)</span> <span class="token operator">==</span> nsep  <span class="token comment"># text and feature_text seperated by [SEP]; sep sep for roberta</span>        <span class="token comment"># Attention mask</span>        attention_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>o<span class="token punctuation">[</span><span class="token string">'attention_mask'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> np<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>attention_mask <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'row_id'</span><span class="token punctuation">:</span> r<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token string">'input_ids'</span><span class="token punctuation">:</span> input_ids<span class="token punctuation">,</span>             <span class="token string">'text'</span><span class="token punctuation">:</span> text<span class="token punctuation">,</span>             <span class="token string">'n'</span><span class="token punctuation">:</span> n<span class="token punctuation">,</span>             <span class="token string">'offset_mapping'</span><span class="token punctuation">:</span> o<span class="token punctuation">[</span><span class="token string">'offset_mapping'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model_dir<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        config <span class="token operator">=</span> AutoConfig<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">,</span> add_pooling_layer<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>transformer <span class="token operator">=</span> AutoModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_dir<span class="token punctuation">,</span> config<span class="token operator">=</span>config<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>transformer <span class="token operator">=</span> AutoModel<span class="token punctuation">.</span>from_config<span class="token punctuation">(</span>config<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc_dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>config<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_init_weights<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc<span class="token punctuation">,</span> config<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_init_weights</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">:</span>        module<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> std<span class="token operator">=</span>config<span class="token punctuation">.</span>initializer_range<span class="token punctuation">)</span>        <span class="token keyword">if</span> module<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            module<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_ids<span class="token punctuation">,</span> attention_mask<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>transformer<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> attention_mask<span class="token punctuation">)</span>        x <span class="token operator">=</span> out<span class="token punctuation">[</span><span class="token string">'last_hidden_state'</span><span class="token punctuation">]</span>  <span class="token comment"># batch_size x max_length (512) x 768</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc_dropout<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、建立模型（CNN、"><a href="#三、建立模型（CNN、" class="headerlink" title="三、建立模型（CNN、)"></a>三、建立模型（CNN、)</h4><h5 id="1、model"><a href="#1、model" class="headerlink" title="1、model"></a>1、model</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># A CNN model example</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span>filters <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding <span class="token operator">=</span> <span class="token string">'Same'</span><span class="token punctuation">,</span>                  activation <span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span> input_shape <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span>filters <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding <span class="token operator">=</span> <span class="token string">'Same'</span><span class="token punctuation">,</span>                  activation <span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span>filters <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding <span class="token operator">=</span> <span class="token string">'Same'</span><span class="token punctuation">,</span>                  activation <span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span>filters <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding <span class="token operator">=</span> <span class="token string">'Same'</span><span class="token punctuation">,</span>                  activation <span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> activation <span class="token operator">=</span> <span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation <span class="token operator">=</span> <span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、后续运作步骤"><a href="#2、后续运作步骤" class="headerlink" title="2、后续运作步骤"></a>2、后续运作步骤</h5><p>一旦我们的层被添加到模型中，我们需要设置一个评分函数、一个损失函数和一个优化算法。<br>我们定义损失函数来衡量我们的模型在具有已知标签的图像上的表现有多差。它是观察到的标签和预测的标签之间的错误率。我们使用称为“categorical crossentropy”的分类分类（&gt;2 类）的特定形式。<br>最重要的功能是优化器。这个函数将迭代地改进参数（过滤核值、权重和神经元的偏差……）以最小化损失。<br>我选择了 RMSprop（带有默认值），它是一个非常有效的优化器。 RMSProp 更新以一种非常简单的方式调整 Adagrad 方法，试图降低其激进的、单调递减的学习率。我们也可以使用随机梯度下降 (‘sgd’) 优化器，但它比 RMSprop 慢。<br>度量函数“准确度”用于评估我们模型的性能。该度量函数类似于损失函数，只是在训练模型时不使用度量评估的结果（仅用于评估）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Define the optimizer</span>optimizer <span class="token operator">=</span> rmsprop_v2<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> rho<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> epsilon<span class="token operator">=</span><span class="token number">1e-08</span><span class="token punctuation">,</span> decay<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token comment"># 这里有一点问题，不能正常运行</span><span class="token comment"># Compile the model</span>model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer <span class="token operator">=</span> optimizer <span class="token punctuation">,</span> loss <span class="token operator">=</span> <span class="token string">"categorical_crossentropy"</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"accuracy"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了使优化器更快收敛并最接近损失函数的全局最小值，我使用了学习率（LR）的退火方法。<br>LR 是优化器遍历“损失情况”的步骤。 LR越高，步数越大，收敛越快。然而，高 LR 的采样非常差，优化器可能会陷入局部最小值。<br>最好在训练期间降低学习率，以有效地达到损失函数的全局最小值。<br>为了保持高 LR 的快速计算时间的优势，我每 X 步（时期）动态降低 LR，这取决于是否有必要（当精度没有提高时）。<br>使用 Keras.callbacks 中的 ReduceLROnPlateau 函数，如果 3 个 epoch 后精度没有提高，我选择将 LR 减少一半。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Set a learning rate annealer</span>learning_rate_reduction <span class="token operator">=</span> ReduceLROnPlateau<span class="token punctuation">(</span>monitor<span class="token operator">=</span><span class="token string">'val_acc'</span><span class="token punctuation">,</span>                                             patience<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                                             verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                             factor<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                                             min_lr<span class="token operator">=</span><span class="token number">0.00001</span><span class="token punctuation">)</span>epochs <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># Turn epochs to 30 to get 0.9967 accuracy</span>batch_size <span class="token operator">=</span> <span class="token number">86</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、数据增加"><a href="#3、数据增加" class="headerlink" title="3、数据增加"></a>3、数据增加</h5><p>为了避免过拟合问题，我们需要人为地扩展我们的手写数字数据集。我们可以使您现有的数据集更大。这个想法是通过小的转换来改变训练数据，以重现当有人写数字时发生的变化。<br>比如数字不居中 比例不一样（有些人用大/小数字写） 图像旋转…<br>以改变数组表示同时保持标签相同的方式改变训练数据的方法被称为数据增强技术。人们使用的一些流行的增强是灰度、水平翻转、垂直翻转、随机裁剪、颜色抖动、平移、旋转等等。<br>通过将这些转换中的几个应用于我们的训练数据，我们可以轻松地将训练示例的数量增加一倍或三倍，并创建一个非常强大的模型。<br>改进很重要：<br>在没有数据增强的情况下，我获得了 98.114% 的准确率<br>通过数据增强，我达到了 99.67% 的准确率</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># With data augmentation to prevent overfitting (accuracy 0.99286)</span>datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>        featurewise_center<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># set input mean to 0 over the dataset</span>        samplewise_center<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># set each sample mean to 0</span>        featurewise_std_normalization<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># divide inputs by std of the dataset</span>        samplewise_std_normalization<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># divide each input by its std</span>        zca_whitening<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># apply ZCA whitening</span>        rotation_range<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment"># randomly rotate images in the range (degrees, 0 to 180)</span>        zoom_range <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token comment"># Randomly zoom image </span>        width_shift_range<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>  <span class="token comment"># randomly shift images horizontally (fraction of total width)</span>        height_shift_range<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>  <span class="token comment"># randomly shift images vertically (fraction of total height)</span>        horizontal_flip<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># randomly flip images</span>        vertical_flip<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># randomly flip images</span>datagen<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于数据扩充，我选择：<br>将一些训练图像随机旋转 10 度<br>一些训练图像随机缩放 10%<br>将图像水平随机移动 10% 的宽度<br>随机将图像垂直移动 10% 的高度<br>我没有应用vertical_flip 或horizontal_flip，因为它可能导致错误分类对称数字，例如6 和9。<br>一旦我们的模型准备好，我们就可以拟合训练数据集。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Fit the model</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_generator<span class="token punctuation">(</span>datagen<span class="token punctuation">.</span>flow<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>Y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">,</span>                              epochs <span class="token operator">=</span> epochs<span class="token punctuation">,</span> validation_data <span class="token operator">=</span> <span class="token punctuation">(</span>X_val<span class="token punctuation">,</span>Y_val<span class="token punctuation">)</span><span class="token punctuation">,</span>                              verbose <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> steps_per_epoch<span class="token operator">=</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">//</span> batch_size                              <span class="token punctuation">,</span> callbacks<span class="token operator">=</span><span class="token punctuation">[</span>learning_rate_reduction<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、评估模型"><a href="#四、评估模型" class="headerlink" title="四、评估模型"></a>四、评估模型</h4><h5 id="1、训练和验证曲线-Training-and-validation-curves"><a href="#1、训练和验证曲线-Training-and-validation-curves" class="headerlink" title="1、训练和验证曲线-Training and validation curves"></a>1、训练和验证曲线-Training and validation curves</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Plot the loss and accuracy curves for training and validation </span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'loss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Training loss"</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'val_loss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"validation loss"</span><span class="token punctuation">,</span>axes <span class="token operator">=</span>ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>legend <span class="token operator">=</span> ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span> shadow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'acc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"Training accuracy"</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'val_acc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"Validation accuracy"</span><span class="token punctuation">)</span>legend <span class="token operator">=</span> ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span> shadow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.混淆矩阵</p><p>混淆矩阵对于查看您的模型缺陷非常有帮助。<br>我绘制了验证结果的混淆矩阵。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Look at confusion matrix </span><span class="token keyword">def</span> <span class="token function">plot_confusion_matrix</span><span class="token punctuation">(</span>cm<span class="token punctuation">,</span> classes<span class="token punctuation">,</span>                          normalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                          title<span class="token operator">=</span><span class="token string">'Confusion matrix'</span><span class="token punctuation">,</span>                          cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Blues<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This function prints and plots the confusion matrix.    Normalization can be applied by setting `normalize=True`.    """</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>cm<span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">'nearest'</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>cmap<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>    tick_marks <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>classes<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>tick_marks<span class="token punctuation">,</span> classes<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>tick_marks<span class="token punctuation">,</span> classes<span class="token punctuation">)</span>    <span class="token keyword">if</span> normalize<span class="token punctuation">:</span>        cm <span class="token operator">=</span> cm<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span> <span class="token operator">/</span> cm<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>    thresh <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>cm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cm<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> cm<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">,</span>                 horizontalalignment<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span>                 color<span class="token operator">=</span><span class="token string">"white"</span> <span class="token keyword">if</span> cm<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> thresh <span class="token keyword">else</span> <span class="token string">"black"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'True label'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Predicted label'</span><span class="token punctuation">)</span><span class="token comment"># Predict the values from the validation dataset</span>Y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val<span class="token punctuation">)</span><span class="token comment"># Convert predictions classes to one hot vectors </span>Y_pred_classes <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>Y_pred<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># Convert validation observations to one hot vectors</span>Y_true <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>Y_val<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># compute the confusion matrix</span>confusion_mtx <span class="token operator">=</span> confusion_matrix<span class="token punctuation">(</span>Y_true<span class="token punctuation">,</span> Y_pred_classes<span class="token punctuation">)</span> <span class="token comment"># plot the confusion matrix</span>plot_confusion_matrix<span class="token punctuation">(</span>confusion_mtx<span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里我们可以看到，考虑到验证集（4200 张图像）的大小，我们的 CNN 在所有数字上的表现都非常好，几乎没有错误。<br>但是，我们的 CNN 似乎在 4 位上有一些小问题，嘿嘿被误分类为 9。有时当曲线平滑时很难捕捉到 4 和 9 之间的差异。</p><p>让我们调查一下错误。<br>我想看看最重要的错误。为此，我需要得到结果中实际值概率与预测值概率之间的差异。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Display some error results </span><span class="token comment"># Errors are difference between predicted labels and true labels</span>errors <span class="token operator">=</span> <span class="token punctuation">(</span>Y_pred_classes <span class="token operator">-</span> Y_true <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>Y_pred_classes_errors <span class="token operator">=</span> Y_pred_classes<span class="token punctuation">[</span>errors<span class="token punctuation">]</span>Y_pred_errors <span class="token operator">=</span> Y_pred<span class="token punctuation">[</span>errors<span class="token punctuation">]</span>Y_true_errors <span class="token operator">=</span> Y_true<span class="token punctuation">[</span>errors<span class="token punctuation">]</span>X_val_errors <span class="token operator">=</span> X_val<span class="token punctuation">[</span>errors<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">display_errors</span><span class="token punctuation">(</span>errors_index<span class="token punctuation">,</span>img_errors<span class="token punctuation">,</span>pred_errors<span class="token punctuation">,</span> obs_errors<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" This function shows 6 images with their predicted and real labels"""</span>    n <span class="token operator">=</span> <span class="token number">0</span>    nrows <span class="token operator">=</span> <span class="token number">2</span>    ncols <span class="token operator">=</span> <span class="token number">3</span>    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token punctuation">,</span>ncols<span class="token punctuation">,</span>sharex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>sharey<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nrows<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>ncols<span class="token punctuation">)</span><span class="token punctuation">:</span>            error <span class="token operator">=</span> errors_index<span class="token punctuation">[</span>n<span class="token punctuation">]</span>            ax<span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token punctuation">(</span>img_errors<span class="token punctuation">[</span>error<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ax<span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Predicted label :{}\nTrue label :{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pred_errors<span class="token punctuation">[</span>error<span class="token punctuation">]</span><span class="token punctuation">,</span>obs_errors<span class="token punctuation">[</span>error<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            n <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment"># Probabilities of the wrong predicted numbers</span>Y_pred_errors_prob <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>Y_pred_errors<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># Predicted probabilities of the true values in the error set</span>true_prob_errors <span class="token operator">=</span> np<span class="token punctuation">.</span>diagonal<span class="token punctuation">(</span>np<span class="token punctuation">.</span>take<span class="token punctuation">(</span>Y_pred_errors<span class="token punctuation">,</span> Y_true_errors<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Difference between the probability of the predicted label and the true label</span>delta_pred_true_errors <span class="token operator">=</span> Y_pred_errors_prob <span class="token operator">-</span> true_prob_errors<span class="token comment"># Sorted list of the delta prob errors</span>sorted_dela_errors <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>delta_pred_true_errors<span class="token punctuation">)</span><span class="token comment"># Top 6 errors </span>most_important_errors <span class="token operator">=</span> sorted_dela_errors<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># Show the top 6 errors</span>display_errors<span class="token punctuation">(</span>most_important_errors<span class="token punctuation">,</span> X_val_errors<span class="token punctuation">,</span> Y_pred_classes_errors<span class="token punctuation">,</span> Y_true_errors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最重要的错误也是最狡猾的。<br>对于这六个案例，该模型并不荒谬。其中一些错误也可能是人为的，特别是对于非常接近 4 的 9。最后的 9 也很容易产生误导，对我来说似乎是 0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># predict results</span>results <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token comment"># select the indix with the maximum probability</span>results <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>results<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>results <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>results<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"Label"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">submission <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28001</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"ImageId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>results<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>submission<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"cnn_mnist_datagen.csv"</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kaggle </tag>
            
            <tag> 常见数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-Lists</title>
      <link href="/2022/03/25/pe-lists/"/>
      <url>/2022/03/25/pe-lists/</url>
      
        <content type="html"><![CDATA[<h4 id="One-Resolution"><a href="#One-Resolution" class="headerlink" title="One Resolution"></a>One Resolution</h4><p>check method : aspect / entry / weight</p><p>娱乐：和朋友一起参加一次啤酒节 / 3</p><p>娱乐：养两只宠物，一只橘猫，一只边牧 / 2</p><p>娱乐：独自进行一次朝圣 / 3</p><p>娱乐：旁观参加一次 DEFCON 会议，弥补遗憾 / 3</p><p>娱乐：希望去参加赛车[摩托 / 四驱]比赛  / 3</p><p>工作：去拜访 gilbert strang，在数学这方面他给我造成了一些影响，主要是他看起来比较有趣  / 4</p><p>工作：研究生想去微软亚洲研究所（MSRA）实习 ，实习方向大致是 强化学习..AI系统开发/研究 / 5</p><p>工作：去 google 42层工作一段时间，另外有可能就去 google brain lab 那里看看，长长领域里面的见识，领教各界大神风采 / 5</p><p>工作：博士阶段能在 MIT 那里做一段研究，导师： aram harrow，原因是近些年 HHL 那篇paper 较为出名，组也在招人 / 5</p><p>工作：希望有一个在学业上一直挑我毛病的”朋友“，科研对手 / 5</p><p>工作：毕业前完成我的设计 / 3</p><p>工作：毕业前在kaggle上级别达到 grandmaster ,这个可能会改变，不确定因素 / 4</p><p>娱乐：每天蹭朋友车在夕阳下弹一首符合心情的民谣回家（不喜欢开车，但热衷想开赛车，无证驾驶！）</p><p>~~后续补充</p><p>————————————————————————</p><p>最大最大的奢望就是 诺贝尔物理奖或者图灵奖 / max</p><p>还有很多很多坏毛病，不想改了。</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Personal </tag>
            
            <tag> Willing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-RingingRun制作</title>
      <link href="/2022/03/17/pe-ringingrun-zhi-zuo/"/>
      <url>/2022/03/17/pe-ringingrun-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>这是一篇游戏制作的过程记录以及我的一些简陋妙计</p><p>——————————————————————————</p><p>Game Design V1.0</p><p>定位：一款集乐符、跑酷、声音、像素、画风于一体的休闲游戏，吸收部分 Mario 的特点</p><p>————————————————————————————————————————</p><p>人物：像素小人，跑动时会有自己的动作，根据自己的外貌自绘</p><p>乐符：将 mp3 等其他格式转换成 midi ，根据 midi 文件分解出相应音符来生成各种各样自绘的乐符和图案，产生的音符按节奏分布在地图的跑道上</p><p>跑酷：Mario 游戏特点，角色可以不跟随游戏节奏前进或者后退</p><p>声音：部分模块支持麦克风来将声音反馈到游戏，以此获得更好的体验</p><p>像素：全局的体验都是像素风格，仿照 Mario</p><p>画风：支持 油画，黑白等绘画背景</p><p>—————————————————————————————</p><p>技术难点：</p><p>1.网易音乐 .npm 转换成 .mp3 后变成谱后乐器音符和和弦会变得很糟糕，对于这块可以去 爱给网下载 midi 来转换成谱</p><p>2.python 库对 midi 处理的不是很好，不能将一首 导入的 midi 文件处理成一个一个音符来演奏，需要自己来重新写对应歌曲的代码</p><p>3.后期我想添加一部分 强化学习和深度学习的部分，深度学习来把midi里面的文件提取出来，强化学习来完成跑酷游戏的完美表现</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏制作 </tag>
            
            <tag> 音游跑酷 </tag>
            
            <tag> 独立自制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-ASampleModel</title>
      <link href="/2022/03/17/ml-dl-asamplemodel/"/>
      <url>/2022/03/17/ml-dl-asamplemodel/</url>
      
        <content type="html"><![CDATA[<h4 id="内篇-amp-amp-逍遥游"><a href="#内篇-amp-amp-逍遥游" class="headerlink" title="内篇&amp;&amp;逍遥游"></a>内篇&amp;&amp;逍遥游</h4><p> 在 kaggle coursea上写的一个简易模型，没有包含太多的技术水平，凉这了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment"># linear algebra</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor  <span class="token comment"># 决策树</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_absolute_error <span class="token comment"># 绝对均值误差</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token comment"># 训练测试分离</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestRegressor <span class="token comment"># 随机森林</span><span class="token comment"># 读入数据</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./train.csv'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./test.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 训练集的统计</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">test<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 要预测  SalePrice</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">.</span>columns  <span class="token comment"># check columns infos</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">test<span class="token punctuation">.</span>columns <span class="token comment"># here have benn means to  predict "SalePrice"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">feature_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"LotArea"</span><span class="token punctuation">,</span><span class="token string">"YearBuilt"</span><span class="token punctuation">,</span><span class="token string">"1stFlrSF"</span><span class="token punctuation">,</span><span class="token string">"2ndFlrSF"</span><span class="token punctuation">,</span>                 <span class="token string">"FullBath"</span><span class="token punctuation">,</span><span class="token string">"BedroomAbvGr"</span><span class="token punctuation">,</span><span class="token string">"TotRmsAbvGrd"</span><span class="token punctuation">]</span>X <span class="token operator">=</span> train<span class="token punctuation">[</span>feature_names<span class="token punctuation">]</span>y <span class="token operator">=</span> train<span class="token punctuation">.</span>SalePrice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">X<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">wrong_model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># build model</span><span class="token comment"># fit the model</span>wrong_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># make predictions</span>predictions <span class="token operator">=</span> wrong_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>predictions<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># split in and uncomment</span>train_X<span class="token punctuation">,</span> val_X<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> val_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># specify the model</span>after_model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># fit after_model with training data.</span>after_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_X<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">val_predictions <span class="token operator">=</span> after_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>val_X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>val_predictions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>val_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">val_mae <span class="token operator">=</span> mean_absolute_error<span class="token punctuation">(</span>val_y<span class="token punctuation">,</span>val_predictions<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>val_mae<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># we will write the mean_absolute_error as a function</span><span class="token keyword">def</span> <span class="token function">get_mae</span><span class="token punctuation">(</span>max_leaf_nodes<span class="token punctuation">,</span>train_X<span class="token punctuation">,</span>val_X<span class="token punctuation">,</span>train_y<span class="token punctuation">,</span>val_y<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_leaf_nodes<span class="token operator">=</span>max_leaf_nodes<span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_X<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span>    preds_val <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>val_X<span class="token punctuation">)</span>    mae <span class="token operator">=</span> mean_absolute_error<span class="token punctuation">(</span>val_y<span class="token punctuation">,</span>preds_val<span class="token punctuation">)</span>    <span class="token keyword">return</span> mae<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">candidate_max_leaf_nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token comment"># write loop to find the ideal tree size</span><span class="token comment"># intermediate for loop writing</span>scores <span class="token operator">=</span> <span class="token punctuation">{</span>leaf_size<span class="token punctuation">:</span> get_mae<span class="token punctuation">(</span>leaf_size<span class="token punctuation">,</span>train_X<span class="token punctuation">,</span>val_X<span class="token punctuation">,</span>train_y<span class="token punctuation">,</span>val_y<span class="token punctuation">)</span> <span class="token keyword">for</span> leaf_size <span class="token keyword">in</span> candidate_max_leaf_nodes<span class="token punctuation">}</span>best_tree_size <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>scores<span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> scores<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>best_tree_size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># write the final model with fill n arguments</span>final_model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>max_leaf_nodes<span class="token operator">=</span>best_tree_size<span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>final_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>final_test <span class="token operator">=</span> final_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>val_X<span class="token punctuation">)</span>final_test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># try use the rf-model</span>rf_model <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>rf_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_X<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span><span class="token comment"># this is me write down a corresponding right trick</span>rf_val_mae <span class="token operator">=</span> mean_absolute_error<span class="token punctuation">(</span>rf_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>val_X<span class="token punctuation">)</span><span class="token punctuation">,</span>val_y<span class="token punctuation">)</span>rf_val_mae<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">final_predictions <span class="token operator">=</span> rf_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment"># check the predictions</span>final_predictions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">output <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Id'</span><span class="token punctuation">:</span> test_data<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>                       <span class="token string">'SalePrice'</span><span class="token punctuation">:</span> test_preds<span class="token punctuation">}</span><span class="token punctuation">)</span>output<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submission.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kaggle </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-logistic回归基本概念</title>
      <link href="/2022/03/11/ml-dl-logistic-hui-gui-ji-ben-gai-nian/"/>
      <url>/2022/03/11/ml-dl-logistic-hui-gui-ji-ben-gai-nian/</url>
      
        <content type="html"><![CDATA[<h4 id="logistic回归"><a href="#logistic回归" class="headerlink" title="logistic回归"></a>logistic回归</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##  基础函数库</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment">## 导入画图库</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token comment">## 导入逻辑回归模型函数</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QC-Solutions</title>
      <link href="/2022/03/10/qc-solutions/"/>
      <url>/2022/03/10/qc-solutions/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Realize-global-information"><a href="#一、Realize-global-information" class="headerlink" title="一、Realize global information"></a>一、Realize global information</h4><p>Quantum Computation and Quantum Information by Nielsen and Chuang(QCQI)</p><p>—QCQI Solutions(<a href="https://serab.net/docs/qcqi">https://serab.net/docs/qcqi</a>)</p><p>量子通信和量子计算-李承祖</p><p>量子计算导论-谭晓青、宋婷婷、翁建</p><p>————————————————————————</p><p>闲余读物（忽略不计）</p><p>量子计算机编程：从入门到实践-埃里克…</p><h4 id="二、Verification-platform-with-using-lib"><a href="#二、Verification-platform-with-using-lib" class="headerlink" title="二、Verification platform with using lib"></a>二、Verification platform with using lib</h4><p>IBM Quantum</p><h4 id="三、Concerning-subjects"><a href="#三、Concerning-subjects" class="headerlink" title="三、Concerning subjects"></a>三、Concerning subjects</h4><p>Math : Linear algebra &amp;&amp; Calculus &amp;&amp; Probability theory &amp;&amp; Group &amp;&amp;  Matrix &amp;&amp; Number theory &amp;&amp; Function analysis  (needing to master many subjects) </p><p>Computer Science : basic information process and program with python…etc </p><p>Physical : Quantum mechanics </p><p>PS : might need a method of mathematical physics to understand better in these different subjects </p><h4 id="四、QC-amp-amp-QI-in-funny-point-field"><a href="#四、QC-amp-amp-QI-in-funny-point-field" class="headerlink" title="四、QC &amp;&amp; QI in funny point field"></a>四、QC &amp;&amp; QI in funny point field</h4><p>ML : have some acceleration algos is more interesting .HHL/QSVD/QPCA/QSVM ..&gt; QNN</p><p>Acceleration classical algorithm :  in these algos , shor is the famous, but after understanding the principle inside,  final found this direction is a big pit </p><p>——————————————————————————</p><p>last words is my little immature opinion，QC algos is a bit rubbish ingredient inside,  very strange, you don’t know how come from where, and it is described using complex number, lead to questions become more complicated. </p>]]></content>
      
      
      <categories>
          
          <category> QC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QCQI </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-DL-kaggle-Part1</title>
      <link href="/2022/03/09/ml-dl-kaggle-part1/"/>
      <url>/2022/03/09/ml-dl-kaggle-part1/</url>
      
        <content type="html"><![CDATA[<h4 id="kaggle里要如何融合模型及一般的操作方式"><a href="#kaggle里要如何融合模型及一般的操作方式" class="headerlink" title="kaggle里要如何融合模型及一般的操作方式"></a>kaggle里要如何融合模型及一般的操作方式</h4><p>原址：kaggle上找不到了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy  <span class="token comment"># linear algebra</span><span class="token keyword">import</span> pandas <span class="token comment"># 数据清洗，初阶工作部分来处理csv部分</span><span class="token keyword">import</span> os <span class="token comment"># 读取文件路径</span><span class="token comment"># 此场景用于kaggle提供的notebook</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'../input'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/(kaggle competition name)/train.csv'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/(kaggle competition name)/test.csv'</span><span class="token punctuation">)</span><span class="token comment"># 查看数据的维度</span>train<span class="token punctuation">.</span>shape <span class="token comment"># print('Train set size:',train.shape)</span><span class="token comment"># 对于一些无效的数据需要进行不可避免的处理,比如扔掉</span>train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'标签列'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#导入计算模块，对模块大致功能注解：</span><span class="token comment">#numpy支持矩阵运算</span><span class="token comment">#pandas用来做数据清洗，像是python中的excel（支持将数据以.csv格式输出至本地）</span><span class="token comment">#sklearn用来进一步制作数据集（支持数据的导入和数据的导出），含有SVM支持向量机、DT决策树、KNN近邻、LR逻辑回归等封装好的模型，支持对数据进行交叉验证以调参。</span><span class="token comment">#mlxtend用来实现集成学习：bagging, boosting, stacking</span><span class="token comment">#lightgbm内有boosting tree（相比xgboost，改进了生成节点的方式）</span><span class="token comment">#xgboost内有boosting tree</span><span class="token comment">#os用来读取文件</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># linear algebra</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd  <span class="token comment">#</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> skew  <span class="token comment"># for some statistics</span><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>special <span class="token keyword">import</span> boxcox1p<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> boxcox_normmax<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> ElasticNetCV<span class="token punctuation">,</span> LassoCV<span class="token punctuation">,</span> RidgeCV<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> GradientBoostingRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVR<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> make_pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> RobustScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token punctuation">,</span> cross_val_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token keyword">from</span> mlxtend<span class="token punctuation">.</span>regressor <span class="token keyword">import</span> StackingCVRegressor<span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBRegressor<span class="token keyword">from</span> lightgbm <span class="token keyword">import</span> LGBMRegressor<span class="token keyword">import</span> os<span class="token comment">#######################################################数据导入和特征提取-【开始】################################################################################</span><span class="token comment">#显示当前编译器的Draft Environment下的文件；将文件夹下的对应名称csv文件储存为矩阵对象。</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"../input"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/house-prices-advanced-regression-techniques/train.csv'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/house-prices-advanced-regression-techniques/test.csv'</span><span class="token punctuation">)</span><span class="token comment">#显示矩阵对象的维数，核查是否导入成功</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Train set size:"</span><span class="token punctuation">,</span> train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Test set size:"</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#记录运算开始的时间</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'START data processing'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment">#取出train矩阵（或者称之为“数据帧”dataframe）中title为'Id'的列，赋值给train_ID。所以train_ID是一维列向量了。test_ID类似。</span><span class="token comment">#train_ID和test_ID根本就没有使用，完全可以删除。</span><span class="token comment">#train_ID = train['Id']</span><span class="token comment">#test_ID = test['Id']</span><span class="token comment">##################删除训练集和测试集中的标签列-【开始】#################</span><span class="token comment">#将train矩阵中的'Id'列删除（原地删除，故将inplace设为true），因为原始数据中的数据索引和预测模型的构建没有关系。</span><span class="token comment">#test矩阵类似。</span>train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">##################删除训练集和测试集中的标签列-【结束】#################</span><span class="token comment">###############删除训练集中的极端值和进行数据index更新-【开始】#########</span><span class="token comment">#使用条件筛选操作，通过覆值的方式剔除原始数据train矩阵中的极端值（极端值也被称为outliers），帮助预防房价预测模型出现过拟合。剔除操作也可以视为前剪枝。</span>train <span class="token operator">=</span> train<span class="token punctuation">[</span>train<span class="token punctuation">.</span>GrLivArea <span class="token operator">&lt;</span> <span class="token number">4500</span><span class="token punctuation">]</span><span class="token comment">#由于删去了部分行，故此时train矩阵中的index列并不连续。使用reset_index命令，在固定非index数据的顺序的前提下（inplace=True），重新对index编号（drop=True）。</span>train<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">###############删除训练集中的极端值和进行数据index更新-【结束】#########</span><span class="token comment">##########对预测目标数值进行对数变换和特征矩阵对象的创建-【开始】#######</span><span class="token comment"># log1p就是log(1+x)，用来对房价数据进行数据预处理，它的好处是转化后的数据更加服从高斯分布，有利于后续的分类结果。</span><span class="token comment"># 需要注意，最后需要将预测出的平滑数据还原，而还原过程就是log1p的逆运算expm1。</span>train<span class="token punctuation">[</span><span class="token string">"SalePrice"</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>log1p<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">"SalePrice"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#单独取出训练数据中的房价列信息，存入y对象。</span><span class="token comment">#y = train.SalePrice.reset_index(drop=True) #.reset_index(drop=True)方法：在原有的索引列重置索引，不再另外添加新列。有必要使用reset_index吗？有必要的，不这样做y将有两套index，作为df的y将有两列。</span>y <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#对上式的改写</span><span class="token comment">#沿着水平的方向寻找列名为'SalePrice'的列（们），把它们对应的列统统删掉。得到了单纯的特征矩阵，存入train_features对象中。</span>train_features <span class="token operator">=</span> train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#test本来就没有房价列，所以它本来就是单纯的特征矩阵。</span>test_features <span class="token operator">=</span> test<span class="token comment">##########对预测目标数值进行对数变换和特征矩阵对象的创建-【结束】#######</span><span class="token comment">##合并训练数据特征矩阵与测试数据特征矩阵，以便统一进行特征处理-【开始】##</span><span class="token comment">#将训练数据中的特征矩阵和测试数据中的特征矩阵合并（.concat[矩阵1,矩阵2]），并对合并后的矩阵index重新编号（.reset_index(drop=True)）。</span>features <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train_features<span class="token punctuation">,</span> test_features<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#检查合并后的矩阵的维数，核查合并结果。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"剔除训练数据中的极端值后，将其特征矩阵和测试数据中的特征矩阵合并，维度为:"</span><span class="token punctuation">,</span>features<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">##合并训练数据特征矩阵与测试数据特征矩阵，以便统一进行特征处理-【结束】##</span><span class="token comment">#######################################################数据导入和特征提取-【结束】################################################################################</span><span class="token comment">##############################################################特征处理-【开始】###################################################################################</span><span class="token comment">#对于列名为'MSSubClass'、'YrSold'、'MoSold'的特征列，将列中的数据类型转化为string格式。</span>features<span class="token punctuation">[</span><span class="token string">'MSSubClass'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'MSSubClass'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'YrSold'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'YrSold'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'MoSold'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'MoSold'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment">###############################填充空值-【开始】##########################</span><span class="token comment">#按照以下各个特征列的实际情况，依次处理各个特征列中的空值（.fillna()方法）</span>features<span class="token punctuation">[</span><span class="token string">'Functional'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'Functional'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'Typ'</span><span class="token punctuation">)</span> <span class="token comment">#空值填充为str型数据'Typ'</span>features<span class="token punctuation">[</span><span class="token string">'Electrical'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'Electrical'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">"SBrkr"</span><span class="token punctuation">)</span> <span class="token comment">#空值填充为str型数据"SBrkr"</span>features<span class="token punctuation">[</span><span class="token string">'KitchenQual'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'KitchenQual'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">"TA"</span><span class="token punctuation">)</span> <span class="token comment">#空值填充为str型数据"TA"</span>features<span class="token punctuation">[</span><span class="token string">"PoolQC"</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">"PoolQC"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">"None"</span><span class="token punctuation">)</span> <span class="token comment">#空值填充为str型数据"None"</span><span class="token comment">#对于列名为'Exterior1st'、'Exterior2nd'、'SaleType'的特征列，使用列中的众数填充空值。</span><span class="token comment">#1.先查找数据列中的众数：使用df.mode()[]方法</span><span class="token comment">#  解释：df.mode(0或1,0表示对列查找，1表示对行查找)[需要查找众数的df列的index（就是df中的第几列）]，将返回数据列中的众数</span><span class="token comment">#2.使用.fillna()方法进行填充</span>features<span class="token punctuation">[</span><span class="token string">'Exterior1st'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'Exterior1st'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'Exterior1st'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> features<span class="token punctuation">[</span><span class="token string">'Exterior2nd'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'Exterior2nd'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'Exterior2nd'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'SaleType'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'SaleType'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'SaleType'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#对于列名为'GarageYrBlt', 'GarageArea', 'GarageCars'的特征列，使用0填充空值。</span><span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'GarageYrBlt'</span><span class="token punctuation">,</span> <span class="token string">'GarageArea'</span><span class="token punctuation">,</span> <span class="token string">'GarageCars'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    features<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#对于列名为'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'的特征列，使用字符串'None'填充空值。</span><span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'GarageType'</span><span class="token punctuation">,</span> <span class="token string">'GarageFinish'</span><span class="token punctuation">,</span> <span class="token string">'GarageQual'</span><span class="token punctuation">,</span> <span class="token string">'GarageCond'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    features<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'None'</span><span class="token punctuation">)</span><span class="token comment">#对于列名为'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'的特征列，使用字符串'None'填充空值。</span><span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'BsmtQual'</span><span class="token punctuation">,</span> <span class="token string">'BsmtCond'</span><span class="token punctuation">,</span> <span class="token string">'BsmtExposure'</span><span class="token punctuation">,</span> <span class="token string">'BsmtFinType1'</span><span class="token punctuation">,</span> <span class="token string">'BsmtFinType2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    features<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'None'</span><span class="token punctuation">)</span><span class="token comment">#聚合函数（按某一列关键字分组）groupby，它的特点是：将返回与传入方法的矩阵维度相同的单个序列。</span><span class="token comment">#transform是与groupby（pandas中最有用的操作之一）通常组合使用，它对传入方法的矩阵进行维度不变的变换。具体变换方法写在括号中，通常会使用匿名函数，对传入矩阵的所有元素进行操作。</span><span class="token comment">#对于features矩阵，按照'MSSubClass'列中的元素分布进行分组，被分组的数据列是'MSZoning'列。feature.groupby(被作为索引的列的名称)[被分组的数据列的名称]</span><span class="token comment">#features.groupby('MSSubClass')['MSZoning']后，得到的是一个以'MSSubClass'为索引，以'MSZoning'为数据列的矩阵。</span><span class="token comment">#.transform()方法将对'MSZoning'数据列进行()内的变换，它将返回和传入矩阵同样维度的矩阵。</span><span class="token comment">#括号内是匿名函数，将对传入矩阵中的空值进行填充，使用的填充元素是传入矩阵中的众数。</span>features<span class="token punctuation">[</span><span class="token string">'MSZoning'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'MSSubClass'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'MSZoning'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>x<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#判断出features矩阵中列为对象的列，将列名存入objects叔祖。对于features矩阵中的各个列对象，将其列中的空值填充为'None'</span>objects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> features<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    <span class="token keyword">if</span> features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype <span class="token operator">==</span> <span class="token builtin">object</span><span class="token punctuation">:</span>        objects<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>features<span class="token punctuation">.</span>update<span class="token punctuation">(</span>features<span class="token punctuation">[</span>objects<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'None'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#使用传入矩阵（'LotFrontage'列）的中位数对传入矩阵中的空值进行填充。</span><span class="token comment">#先以'Neighborhood'为标签，以'LotFrontage'为被汇总序列。然后使用被汇总序列中的中位数，对原始矩阵'LotFrontage'列中的空值进行填充。</span><span class="token comment">#transform的特性是同维操作，最后输出结果的顺序和原始数据在序号上完全匹配。</span>features<span class="token punctuation">[</span><span class="token string">'LotFrontage'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'Neighborhood'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'LotFrontage'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>x<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#对于整型和浮点型数据列，使用0填充其中的空值。</span>numeric_dtypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'int16'</span><span class="token punctuation">,</span> <span class="token string">'int32'</span><span class="token punctuation">,</span> <span class="token string">'int64'</span><span class="token punctuation">,</span> <span class="token string">'float16'</span><span class="token punctuation">,</span> <span class="token string">'float32'</span><span class="token punctuation">,</span> <span class="token string">'float64'</span><span class="token punctuation">]</span>numerics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> features<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    <span class="token keyword">if</span> features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype <span class="token keyword">in</span> numeric_dtypes<span class="token punctuation">:</span>        numerics<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>features<span class="token punctuation">.</span>update<span class="token punctuation">(</span>features<span class="token punctuation">[</span>numerics<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">###############################填充空值-【结束】##########################</span><span class="token comment">######################数字型数据列偏度校正-【开始】#######################</span><span class="token comment">#使用skew()方法，计算所有整型和浮点型数据列中，数据分布的偏度（skewness）。</span><span class="token comment">#偏度是统计数据分布偏斜方向和程度的度量，是统计数据分布非对称程度的数字特征。亦称偏态、偏态系数。 </span>numeric_dtypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'int16'</span><span class="token punctuation">,</span> <span class="token string">'int32'</span><span class="token punctuation">,</span> <span class="token string">'int64'</span><span class="token punctuation">,</span> <span class="token string">'float16'</span><span class="token punctuation">,</span> <span class="token string">'float32'</span><span class="token punctuation">,</span> <span class="token string">'float64'</span><span class="token punctuation">]</span>numerics2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> features<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    <span class="token keyword">if</span> features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dtype <span class="token keyword">in</span> numeric_dtypes<span class="token punctuation">:</span>        numerics2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>skew_features <span class="token operator">=</span> features<span class="token punctuation">[</span>numerics2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> skew<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#以0.5作为基准，统计偏度超过此数值的高偏度分布数据列，获取这些数据列的index。</span>high_skew <span class="token operator">=</span> skew_features<span class="token punctuation">[</span>skew_features <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">]</span>skew_index <span class="token operator">=</span> high_skew<span class="token punctuation">.</span>index<span class="token comment">#对高偏度数据进行处理，将其转化为正态分布。</span><span class="token comment">#Box和Cox提出的变换可以使线性回归模型满足线性性、独立性、方差齐次以及正态性的同时，又不丢失信息。</span><span class="token keyword">for</span> i <span class="token keyword">in</span> skew_index<span class="token punctuation">:</span>    features<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> boxcox1p<span class="token punctuation">(</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> boxcox_normmax<span class="token punctuation">(</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#这是boxcox1p的使用方法，参数的具体意义暂时不解释</span><span class="token comment">######################数字型数据列偏度校正-【结束】#######################</span><span class="token comment">######################特征删除和融合创建新特征-【开始】###################</span><span class="token comment">#删除一些特征。df.drop（‘列名’, axis=1）代表将‘列名’对应的列标签（们）沿着水平的方向依次删掉。</span>features <span class="token operator">=</span> features<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Utilities'</span><span class="token punctuation">,</span> <span class="token string">'Street'</span><span class="token punctuation">,</span> <span class="token string">'PoolQC'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#融合多个特征，生成新特征。</span>features<span class="token punctuation">[</span><span class="token string">'YrBltAndRemod'</span><span class="token punctuation">]</span><span class="token operator">=</span>features<span class="token punctuation">[</span><span class="token string">'YearBuilt'</span><span class="token punctuation">]</span><span class="token operator">+</span>features<span class="token punctuation">[</span><span class="token string">'YearRemodAdd'</span><span class="token punctuation">]</span>features<span class="token punctuation">[</span><span class="token string">'TotalSF'</span><span class="token punctuation">]</span><span class="token operator">=</span>features<span class="token punctuation">[</span><span class="token string">'TotalBsmtSF'</span><span class="token punctuation">]</span> <span class="token operator">+</span> features<span class="token punctuation">[</span><span class="token string">'1stFlrSF'</span><span class="token punctuation">]</span> <span class="token operator">+</span> features<span class="token punctuation">[</span><span class="token string">'2ndFlrSF'</span><span class="token punctuation">]</span>features<span class="token punctuation">[</span><span class="token string">'Total_sqr_footage'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'BsmtFinSF1'</span><span class="token punctuation">]</span> <span class="token operator">+</span> features<span class="token punctuation">[</span><span class="token string">'BsmtFinSF2'</span><span class="token punctuation">]</span> <span class="token operator">+</span>                                 features<span class="token punctuation">[</span><span class="token string">'1stFlrSF'</span><span class="token punctuation">]</span> <span class="token operator">+</span> features<span class="token punctuation">[</span><span class="token string">'2ndFlrSF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'Total_Bathrooms'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'FullBath'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> features<span class="token punctuation">[</span><span class="token string">'HalfBath'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span>                               features<span class="token punctuation">[</span><span class="token string">'BsmtFullBath'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> features<span class="token punctuation">[</span><span class="token string">'BsmtHalfBath'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'Total_porch_sf'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'OpenPorchSF'</span><span class="token punctuation">]</span> <span class="token operator">+</span> features<span class="token punctuation">[</span><span class="token string">'3SsnPorch'</span><span class="token punctuation">]</span> <span class="token operator">+</span>                              features<span class="token punctuation">[</span><span class="token string">'EnclosedPorch'</span><span class="token punctuation">]</span> <span class="token operator">+</span> features<span class="token punctuation">[</span><span class="token string">'ScreenPorch'</span><span class="token punctuation">]</span> <span class="token operator">+</span>                              features<span class="token punctuation">[</span><span class="token string">'WoodDeckSF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#简化特征。对于某些分布单调（比如100个数据中有99个的数值是0.9，另1个是0.1）的数字型数据列，进行01取值处理。</span>features<span class="token punctuation">[</span><span class="token string">'haspool'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'PoolArea'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'has2ndfloor'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'2ndFlrSF'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'hasgarage'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'GarageArea'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'hasbsmt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'TotalBsmtSF'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'hasfireplace'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'Fireplaces'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#检查特征处理后，特征矩阵的维数，核查特征处理结果。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除了3个特征，又融合创建了10个新特征，处理之后的特征矩阵维度为:"</span><span class="token punctuation">,</span>features<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">######################特征删除和融合创建新特征-【结束】###################</span><span class="token comment">####################特征投影、特征矩阵拆解和截取-【开始】#################</span><span class="token comment">#使用.get_dummies()方法对特征矩阵进行类似“坐标投影”操作。获得在新空间下的特征表达。</span>final_features <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#打印新空间下的特征维数，也是新空间的维数。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用get_dummies()方法“投影”特征矩阵，即分解出更多特征，得到更多列。投影后的特征矩阵维度为:"</span><span class="token punctuation">,</span>final_features<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#进行特征空间降阶。截取前len(y)行，存入X阵（因为之前进行了训练数据和测试数据的合并，所以从合并矩阵中取出前len(y)行，就得到了训练数据集的处理后的特征矩阵）。</span><span class="token comment">#截取剩余部分，即从序号为len(y)的行开始，至矩阵结尾的各行，存入X_sub阵。此为完成特征变换后的测试集特征矩阵。</span><span class="token comment">#注：len(df)是行计数方法</span>X <span class="token operator">=</span> final_features<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#y是列向量，存储了训练数据中的房价列信息。截取后得到的X阵的维度是len(y)*(final_features的列数)。</span>X_sub <span class="token operator">=</span> final_features<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#使用len命令，求矩阵X的长度，得到的是矩阵对象的长度，即有矩阵中有多少列，而不是每列上有多少行。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除了3个特征，又融合创建了10个新特征，处理之后的特征矩阵维度为:"</span><span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'X_sub'</span><span class="token punctuation">,</span> X_sub<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#在新生特征空间中，剔除X阵和y阵中有着极端值的各行数据（因为X和y阵在水平方向上是一致的，所以要一起删除同样的行）。outliers数值中给出了极端值的列序号。</span><span class="token comment">#df.drop(df.index[序号])将删除指定序号的各行。再使用=对df覆值。</span>outliers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">462</span><span class="token punctuation">,</span> <span class="token number">631</span><span class="token punctuation">,</span> <span class="token number">1322</span><span class="token punctuation">]</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>X<span class="token punctuation">.</span>index<span class="token punctuation">[</span>outliers<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#因为X阵是经过对特征矩阵进行类似“坐标投影”操作后得到的，列向量y中的行号对应着X阵中的列号。</span>y <span class="token operator">=</span> y<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>y<span class="token punctuation">.</span>index<span class="token punctuation">[</span>outliers<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">####################特征投影、特征矩阵拆解和截取-【结束】#################</span><span class="token comment">######################消除截取后特征矩阵的过拟合-【开始】#######################  这一步的目的是处理X阵和X_sub阵。</span><span class="token comment">#在新生特征空间中，删除将产生过拟合的数据列。</span><span class="token comment">#这种数据列具有如下特征：</span>overfit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#用来记录产生过拟合的数据列的序号</span><span class="token keyword">for</span> i <span class="token keyword">in</span> X<span class="token punctuation">.</span>columns<span class="token punctuation">:</span><span class="token comment">#遍历截取后特征矩阵的每一列</span>    counts <span class="token operator">=</span> X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#使用.value_counts()方法，查看在X矩阵的第i列中，不同的取值分别出现了多少次，默认按次数最高到最低做降序排列。返回一个df。</span>    zeros <span class="token operator">=</span> counts<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#通过行号索引行数据，取出counts列中第一个元素，即出现次数最多的取值到底是出现了多少次，存入zeros</span>    <span class="token keyword">if</span> zeros <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">99.94</span><span class="token punctuation">:</span><span class="token comment">#判断某一列是否将产生过拟合的条件：</span><span class="token comment">#截取后的特征矩阵有len(X)列，如果某一列中的某个值出现的次数除以特征矩阵的列数超过99.94%，即其几乎在被投影的各个维度上都有着同样的取值，并不具有“主成分”的性质，则记为过拟合列。</span>        overfit<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">#找到将产生过拟合的数据列的位置后，在特征矩阵中进行删除操作。</span>overfit <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>overfit<span class="token punctuation">)</span><span class="token comment">#overfit.append('MSZoning_C (all)')#这条语句有用吗？是要把训练数据特征矩阵X中的列标签为'MSZoning_C (all)'的列也删除吗？但是训练数据中并没有任何一个列标签名称为MSZoning_C (all)。</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>overfit<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#.copy()#删除截取后特征矩阵X中的过拟合列。因为drop并不影响原数据，所以使用copy。直接覆值应该也可以。</span>X_sub <span class="token operator">=</span> X_sub<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>overfit<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#.copy()</span><span class="token comment">######################消除截取后特征矩阵的过拟合-【结束】#######################</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除极端值及过拟合列后，训练数据特征矩阵的维数为，特征："</span><span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'对应于特征的对数变换后的房价y'</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'测试数据的特征矩阵（它应该在行、列上未被删减）X_sub'</span><span class="token punctuation">,</span> X_sub<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">##############################################################特征处理-【结束】###################################################################################</span><span class="token comment">##############################################################机器学习-【开始】###################################################################################</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特征处理已经完成。开始对训练数据进行机器学习'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#设置k折交叉验证的参数。</span>kfolds <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment">#定义均方根对数误差（Root Mean Squared Logarithmic Error ，RMSLE）</span><span class="token keyword">def</span> <span class="token function">rmsle</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#创建模型评分函数，根据不同模型的表现打分</span><span class="token comment">#cv表示Cross-validation,交叉验证的意思。</span><span class="token keyword">def</span> <span class="token function">cv_rmse</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> X<span class="token operator">=</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    rmse <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token operator">-</span>cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">"neg_mean_squared_error"</span><span class="token punctuation">,</span> cv<span class="token operator">=</span>kfolds<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>rmse<span class="token punctuation">)</span><span class="token comment">#############个体机器学习模型的创建（即模型声明和参数设置）-【开始】############</span>alphas_alt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">14.5</span><span class="token punctuation">,</span> <span class="token number">14.6</span><span class="token punctuation">,</span> <span class="token number">14.7</span><span class="token punctuation">,</span> <span class="token number">14.8</span><span class="token punctuation">,</span> <span class="token number">14.9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15.1</span><span class="token punctuation">,</span> <span class="token number">15.2</span><span class="token punctuation">,</span> <span class="token number">15.3</span><span class="token punctuation">,</span> <span class="token number">15.4</span><span class="token punctuation">,</span> <span class="token number">15.5</span><span class="token punctuation">]</span>alphas2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5e-05</span><span class="token punctuation">,</span> <span class="token number">0.0001</span><span class="token punctuation">,</span> <span class="token number">0.0002</span><span class="token punctuation">,</span> <span class="token number">0.0003</span><span class="token punctuation">,</span> <span class="token number">0.0004</span><span class="token punctuation">,</span> <span class="token number">0.0005</span><span class="token punctuation">,</span> <span class="token number">0.0006</span><span class="token punctuation">,</span> <span class="token number">0.0007</span><span class="token punctuation">,</span> <span class="token number">0.0008</span><span class="token punctuation">]</span>e_alphas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0001</span><span class="token punctuation">,</span> <span class="token number">0.0002</span><span class="token punctuation">,</span> <span class="token number">0.0003</span><span class="token punctuation">,</span> <span class="token number">0.0004</span><span class="token punctuation">,</span> <span class="token number">0.0005</span><span class="token punctuation">,</span> <span class="token number">0.0006</span><span class="token punctuation">,</span> <span class="token number">0.0007</span><span class="token punctuation">]</span>e_l1ratio <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.85</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.95</span><span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#定义ridge岭回归模型（使用二范数作为正则化项。不论是使用一范数还是二范数，正则化项的引入均是为了降低过拟合风险。）</span><span class="token comment">#注：正则化项如果使用二范数，那么对于任何需要寻优的参数值，在寻优终止时，它都无法将某些参数值变为严格的0，尽管某些参数估计值变得非常小以至于可以忽略。即使用二范数会保留变量的所有信息，不会进行类似PCA的变量凸显。</span><span class="token comment">#注：正则化项如果使用一范数，它比L2范数更易于获得“稀疏(sparse)”解，即它的求解结果会有更多的零分量。</span>ridge <span class="token operator">=</span> make_pipeline<span class="token punctuation">(</span>RobustScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RidgeCV<span class="token punctuation">(</span>alphas<span class="token operator">=</span>alphas_alt<span class="token punctuation">,</span> cv<span class="token operator">=</span>kfolds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#定义LASSO收缩模型（使用L1范数作为正则化项）（由于对目标函数的求解结果中将得到很多的零分量，它也被称为收缩模型。）</span><span class="token comment">#注：正则化项如果使用二范数，那么对于任何需要寻优的参数值，在寻优终止时，它都无法将某些参数值变为严格的0，尽管某些参数估计值变得非常小以至于可以忽略。即使用二范数会保留变量的所有信息，不会进行类似PCA的变量凸显。</span><span class="token comment">#注：正则化项如果使用一范数，它比L2范数更易于获得“稀疏(sparse)”解，即它的求解结果会有更多的零分量。</span>lasso <span class="token operator">=</span> make_pipeline<span class="token punctuation">(</span>RobustScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LassoCV<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1e7</span><span class="token punctuation">,</span> alphas<span class="token operator">=</span>alphas2<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> cv<span class="token operator">=</span>kfolds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#定义elastic net弹性网络模型（弹性网络实际上是结合了岭回归和lasso的特点，同时使用了L1和L2作为正则化项。）</span>elasticnet <span class="token operator">=</span> make_pipeline<span class="token punctuation">(</span>RobustScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ElasticNetCV<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1e7</span><span class="token punctuation">,</span> alphas<span class="token operator">=</span>e_alphas<span class="token punctuation">,</span> cv<span class="token operator">=</span>kfolds<span class="token punctuation">,</span> l1_ratio<span class="token operator">=</span>e_l1ratio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#定义SVM支持向量机模型                                     </span>svr <span class="token operator">=</span> make_pipeline<span class="token punctuation">(</span>RobustScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SVR<span class="token punctuation">(</span>C<span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> epsilon<span class="token operator">=</span> <span class="token number">0.008</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.0003</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#定义GB梯度提升模型（展开到一阶导数）</span>gbr <span class="token operator">=</span> GradientBoostingRegressor<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token string">'sqrt'</span><span class="token punctuation">,</span> min_samples_leaf<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> min_samples_split<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'huber'</span><span class="token punctuation">,</span> random_state <span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>                             <span class="token comment">#定义lightgbm模型</span>lightgbm <span class="token operator">=</span> LGBMRegressor<span class="token punctuation">(</span>objective<span class="token operator">=</span><span class="token string">'regression'</span><span class="token punctuation">,</span>                                        num_leaves<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                                       learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>                                        n_estimators<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span>                                       max_bin<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>                                        bagging_fraction<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">,</span>                                       bagging_freq<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                                        bagging_seed<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>                                       feature_fraction<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>                                       feature_fraction_seed<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>                                       verbose<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                                       <span class="token comment">#min_data_in_leaf=2,</span>                                       <span class="token comment">#min_sum_hessian_in_leaf=11</span>                                       <span class="token punctuation">)</span><span class="token comment">#定义xgboost模型（展开到二阶导数）                                      </span>xgboost <span class="token operator">=</span> XGBRegressor<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">3460</span><span class="token punctuation">,</span>                                     max_depth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> min_child_weight<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                                     gamma<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> subsample<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>                                     colsample_bytree<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>                                     objective<span class="token operator">=</span><span class="token string">'reg:linear'</span><span class="token punctuation">,</span> nthread<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                                     scale_pos_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">,</span>                                     reg_alpha<span class="token operator">=</span><span class="token number">0.00006</span><span class="token punctuation">)</span><span class="token comment">#############个体机器学习模型的创建（即模型声明和参数设置）-【结束】############</span><span class="token comment">###########################集成多个个体学习器-【开始】##########################</span><span class="token comment">###！！！！！！！！！！！！</span><span class="token comment">###！！！！！！！！！！！！</span><span class="token comment">###！！！regressors=(...)中并没有纳入前面的svr模型,怎么回事？</span><span class="token comment">###！！！！！！！！！！！！</span><span class="token comment">###！！！！！！！！！！！！</span>stack_gen <span class="token operator">=</span> StackingCVRegressor<span class="token punctuation">(</span>regressors<span class="token operator">=</span><span class="token punctuation">(</span>ridge<span class="token punctuation">,</span> lasso<span class="token punctuation">,</span> elasticnet<span class="token punctuation">,</span> gbr<span class="token punctuation">,</span> xgboost<span class="token punctuation">,</span> lightgbm<span class="token punctuation">)</span><span class="token punctuation">,</span>                                meta_regressor<span class="token operator">=</span>xgboost<span class="token punctuation">,</span>                                use_features_in_secondary<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#regressors=(...)中并没有纳入前面的svr模型</span><span class="token comment">###########################集成多个个体学习器-【结束】##########################                             </span><span class="token comment">############################进行交叉验证打分-【开始】###########################</span><span class="token comment">#进行交叉验证，并对不同模型的表现打分</span><span class="token comment">#（由于是交叉验证，将使用不同的数据集对同一模型进行评分，故每个模型对应一个得分序列。展示模型得分序列的平均分、标准差）</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进行交叉验证，计算不同模型的得分TEST score on CV'</span><span class="token punctuation">)</span><span class="token comment">#打印二范数rideg岭回归模型的得分</span>score <span class="token operator">=</span> cv_rmse<span class="token punctuation">(</span>ridge<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"二范数rideg岭回归模型的得分: {:.4f} ({:.4f})\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> score<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment">#打印一范数LASSO收缩模型的得分</span>score <span class="token operator">=</span> cv_rmse<span class="token punctuation">(</span>lasso<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"一范数LASSO收缩模型的得分: {:.4f} ({:.4f})\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> score<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment">#打印elastic net弹性网络模型的得分</span>score <span class="token operator">=</span> cv_rmse<span class="token punctuation">(</span>elasticnet<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"elastic net弹性网络模型的得分: {:.4f} ({:.4f})\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> score<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment">#打印SVR支持向量机模型的得分</span>score <span class="token operator">=</span> cv_rmse<span class="token punctuation">(</span>svr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"SVR支持向量机模型的得分: {:.4f} ({:.4f})\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> score<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment">#打印lightgbm轻梯度提升模型的得分</span>score <span class="token operator">=</span> cv_rmse<span class="token punctuation">(</span>lightgbm<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lightgbm轻梯度提升模型的得分: {:.4f} ({:.4f})\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> score<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment">#打印gbr梯度提升回归模型的得分</span>score <span class="token operator">=</span> cv_rmse<span class="token punctuation">(</span>gbr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gbr梯度提升回归模型的得分: {:.4f} ({:.4f})\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> score<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment">#打印xgboost模型的得分</span>score <span class="token operator">=</span> cv_rmse<span class="token punctuation">(</span>xgboost<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"xgboost模型的得分: {:.4f} ({:.4f})\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> score<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment">############################进行交叉验证打分-【结束】###########################</span><span class="token comment">#########使用训练数据特征矩阵作为输入，训练数据对数处理后的预测房价作为输出，进行各个模型的训练-【开始】#########</span><span class="token comment">#开始集合所有模型，使用stacking方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进行模型参数训练 START Fit'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'对stack_gen集成器模型进行参数训练'</span><span class="token punctuation">)</span>stack_gen_model <span class="token operator">=</span> stack_gen<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'对elasticnet弹性网络模型进行参数训练'</span><span class="token punctuation">)</span>elastic_model_full_data <span class="token operator">=</span> elasticnet<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'对一范数lasso收缩模型进行参数训练'</span><span class="token punctuation">)</span>lasso_model_full_data <span class="token operator">=</span> lasso<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'对二范数ridge岭回归模型进行参数训练'</span><span class="token punctuation">)</span>ridge_model_full_data <span class="token operator">=</span> ridge<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'对svr支持向量机模型进行参数训练'</span><span class="token punctuation">)</span>svr_model_full_data <span class="token operator">=</span> svr<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'对GradientBoosting梯度提升模型进行参数训练'</span><span class="token punctuation">)</span>gbr_model_full_data <span class="token operator">=</span> gbr<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'对xgboost二阶梯度提升模型进行参数训练'</span><span class="token punctuation">)</span>xgb_model_full_data <span class="token operator">=</span> xgboost<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'对lightgbm轻梯度提升模型进行参数训练'</span><span class="token punctuation">)</span>lgb_model_full_data <span class="token operator">=</span> lightgbm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment">#########使用训练数据特征矩阵作为输入，训练数据对数处理后的预测房价作为输出，进行各个模型的训练-【结束】#########</span><span class="token comment">############################进行交叉验证打分-【结束】###########################</span><span class="token comment">########定义个体学习器的预测值融合函数，检测预测值融合策略的效果-【开始】#######</span><span class="token comment">#综合多个模型产生的预测值，作为多模型组合学习器的预测值</span><span class="token keyword">def</span> <span class="token function">blend_models_predict</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> elastic_model_full_data<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \            <span class="token punctuation">(</span><span class="token number">0.05</span> <span class="token operator">*</span> lasso_model_full_data<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \            <span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> ridge_model_full_data<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \            <span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> svr_model_full_data<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \            <span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> gbr_model_full_data<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \            <span class="token punctuation">(</span><span class="token number">0.15</span> <span class="token operator">*</span> xgb_model_full_data<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \            <span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> lgb_model_full_data<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \            <span class="token punctuation">(</span><span class="token number">0.3</span> <span class="token operator">*</span> stack_gen_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#打印在上述模型配比下，多模型组合学习器的均方根对数误差（Root Mean Squared Logarithmic Error ，RMSLE）</span><span class="token comment">#使用训练数据对创造的模型进行k折交叉验证，以训练创造出的模型的参数配置。交叉验证训练过程结束后，将得到模型的参数配置。使用得出的参数配置下，在全体训练数据上进行验证，验证模型对全体训练数据重构的误差。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'融合后的训练模型对原数据重构时的均方根对数误差RMSLE score on train data:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rmsle<span class="token punctuation">(</span>y<span class="token punctuation">,</span> blend_models_predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">########定义个体学习器的预测值融合函数，检测预测值融合策略的效果-【结束】#######</span><span class="token comment">########将测试集的特征矩阵作为输入，传入训练好的模型，得出的输出写入.csv文件的第2列-【开始】########</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用测试集特征进行房价预测 Predict submission'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>submission <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"../input/house-prices-advanced-regression-techniques/sample_submission.csv"</span><span class="token punctuation">)</span><span class="token comment">#函数注释：.iloc[:,1]是基于索引位来选取数据集，[索引1:索引2]，左闭右开。</span>submission<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>expm1<span class="token punctuation">(</span>blend_models_predict<span class="token punctuation">(</span>X_sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">########将测试集的特征矩阵作为输入，传入训练好的模型，得出的输出写入.csv文件的第2列-【结束】########</span><span class="token comment">#---------------------------------------------------------------------------------------------------------------------------#</span><span class="token comment">#---------------------------------------------------------------------------------------------------------------------------#</span><span class="token comment">#---------------------------------------------------------------------------------------------------------------------------#</span><span class="token comment"># 当对平台未公开的测试集进行预测时，前述模型的误差是0.114 this kernel gave a score 0.114</span><span class="token comment"># 为了提高模型的得分，引入其他模型的优秀预测结果，与前述模型的预测结果进行混合（有点类似抄别人的答案，但实质是扩大集成模型的规模，引入更多的模型） let's up it by mixing with the top kernels</span><span class="token comment">######################模型输出结果融合-【开始】#############################</span><span class="token comment">#在多模型集成学习器预测结果的基础上，融合其他优秀模型（即平台上其他均方根对数误差小的模型）的预测结果。</span><span class="token comment">#这步操作是为了降低多模型集成学习器的方差。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'融合其他优秀模型的预测结果 Blend with Top Kernals submissions'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>sub_1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/top-10-0-10943-stacking-mice-and-brutal-force/House_Prices_submit.csv'</span><span class="token punctuation">)</span>sub_2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/hybrid-svm-benchmark-approach-0-11180-lb-top-2/hybrid_solution.csv'</span><span class="token punctuation">)</span>sub_3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../input/lasso-model-for-regression-problem/lasso_sol22_Median.csv'</span><span class="token punctuation">)</span>submission<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.25</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>expm1<span class="token punctuation">(</span>blend_models_predict<span class="token punctuation">(</span>X_sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                 <span class="token punctuation">(</span><span class="token number">0.25</span> <span class="token operator">*</span> sub_1<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                 <span class="token punctuation">(</span><span class="token number">0.25</span> <span class="token operator">*</span> sub_2<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                 <span class="token punctuation">(</span><span class="token number">0.25</span> <span class="token operator">*</span> sub_3<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">######################模型输出结果融合-【结束】#############################      </span><span class="token comment">####################融合结果的极端值剔除-【开始】###########################  </span><span class="token comment">#处理融合后结果中的极端值。把太大的数值（降序排列时，位于顶部往下0.005的数值，就是只有0.005的数比它大）缩小一点（乘以0.77），把太小的数值（降序排列时，位于顶部往下0.99的数值）放大一点（乘以1.1）</span>q1 <span class="token operator">=</span> submission<span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">)</span>q2 <span class="token operator">=</span> submission<span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.995</span><span class="token punctuation">)</span>submission<span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span> <span class="token operator">=</span> submission<span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token keyword">if</span> x <span class="token operator">&gt;</span> q1 <span class="token keyword">else</span> x<span class="token operator">*</span><span class="token number">0.77</span><span class="token punctuation">)</span>submission<span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span> <span class="token operator">=</span> submission<span class="token punctuation">[</span><span class="token string">'SalePrice'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> q2 <span class="token keyword">else</span> x<span class="token operator">*</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token comment">####################融合结果的极端值剔除-【结束】###########################</span><span class="token comment">#以csv文件的形式输出预测值</span>submission<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"House_price_submission.csv"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'融合结果.csv文件输出成功 Save submission'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ML-DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kaggle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE-DreamMemory</title>
      <link href="/2022/02/16/pe-dreammemory/"/>
      <url>/2022/02/16/pe-dreammemory/</url>
      
        <content type="html"><![CDATA[<h4 id="内篇-amp-amp-逍遥游"><a href="#内篇-amp-amp-逍遥游" class="headerlink" title="内篇&amp;&amp;逍遥游"></a>内篇&amp;&amp;逍遥游</h4><p>记得一个离奇的梦，很有意思的，是一个小精灵游荡四方在哪里，似乎…好像是在一家店，不知名的一家店，干了一些奇妙的事，习惯站在我的右肩上，有时候是袖子里，她父亲很魁梧，为什么会是这样呢&lt;我的潜意识里是这样认识的吗&gt;，离开时瞒着父亲，本应该要回家的，却要偷偷摸摸的又钻进了我的袖子，这样的一个可爱又调皮的小家伙，路途遥远枯燥太漫长，应该会有乐趣</p>]]></content>
      
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 荒诞的故事 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
