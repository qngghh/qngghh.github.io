<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.kitx86.com</id>
    <title>Supernova</title>
    <link href="https://www.kitx86.com" />
    <updated>2022-05-04T08:38:21.000Z</updated>
    <category term="Personal" />
    <category term="kaggle" />
    <category term="ML" />
    <category term="竞赛模板" />
    <category term="常用tricks" />
    <category term="pytorch" />
    <category term="深度学习" />
    <category term="机器学习" />
    <category term="paper" />
    <category term="deep learning" />
    <category term="neural network" />
    <category term="SGD" />
    <category term="RMSProp" />
    <category term="Adam" />
    <category term="CNN" />
    <category term="RNN" />
    <category term="循环神经网络" />
    <category term="常见数据处理" />
    <category term="data vistualtion" />
    <category term="Willing" />
    <category term="MSRA" />
    <category term="微软亚洲研究院" />
    <category term="游戏制作" />
    <category term="音游跑酷" />
    <category term="独立自制" />
    <category term="论文写作" />
    <category term="QCQI" />
    <category term="data" />
    <category term="饲养记" />
    <category term="荒诞的故事" />
    <entry>
        <id>https://www.kitx86.com/2022/05/04/pe-niao-lei-si-yang-ji/</id>
        <title>PE-鸟类饲养记</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/05/04/pe-niao-lei-si-yang-ji/"/>
        <content type="html">&lt;h3 id=&#34;我亲爱的挣扎的小白虎皮：&#34;&gt;&lt;a href=&#34;#我亲爱的挣扎的小白虎皮：&#34; class=&#34;headerlink&#34; title=&#34;我亲爱的挣扎的小白虎皮：&#34;&gt;&lt;/a&gt;我亲爱的挣扎的小白虎皮：&lt;/h3&gt;&lt;p&gt;看起来似乎好活泼好动，却毫不为我所提供的豪华别墅和大餐所动，满眼都是崇尚外面的点滴一方世界，留不住的也会莫名的流露出一丝丝不忍心。&lt;/p&gt;
&lt;p&gt;自私的热切关心并不会改变什么，我并不失落，因为这结果我可以预见，另一种结果是毫不留情直接炖了，依赖达尔文所说的生物进化的基础是自然选择，这并不残忍&lt;/p&gt;
&lt;p&gt;但为什么产生了一点点空虚呢，解析不出来。&lt;/p&gt;
&lt;p&gt;——————————————————&lt;/p&gt;
&lt;p&gt;从一只鸟的观察升华到人际交流，关心会对一个人付出自己脆落的琉璃心，即使是孤赖调皮的人也不例外。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2022/05/04/pe-niao-lei-si-yang-ji/IMG_20220504_155927.jpg&#34;&gt;&lt;/p&gt;
</content>
        <category term="饲养记" />
        <updated>2022-05-04T08:38:21.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/05/02/pe-zhen-zhi-zhi-yi/</id>
        <title>PE-朕之旨意</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/05/02/pe-zhen-zhi-zhi-yi/"/>
        <content type="html">&lt;h3 id=&#34;弧线摇篮&#34;&gt;&lt;a href=&#34;#弧线摇篮&#34; class=&#34;headerlink&#34; title=&#34;弧线摇篮&#34;&gt;&lt;/a&gt;弧线摇篮&lt;/h3&gt;</content>
        <updated>2022-05-02T07:37:26.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/05/02/pe-diaryupdate-1/</id>
        <title>PE-DiaryUpdate</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/05/02/pe-diaryupdate-1/"/>
        <content type="html">&lt;h3 id=&#34;今日吐槽&#34;&gt;&lt;a href=&#34;#今日吐槽&#34; class=&#34;headerlink&#34; title=&#34;今日吐槽&#34;&gt;&lt;/a&gt;今日吐槽&lt;/h3&gt;&lt;p&gt;每天早上迷糊的排队抢显卡，干巴巴的日子很苦涩，只有错开时间才能等到，现在是早上 0.36，在排队等 TPU&lt;/p&gt;
</content>
        <updated>2022-05-01T16:34:01.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/26/ml-dl-shen-jing-wang-luo-jie-shi/</id>
        <title>ML-DL-神经网络解释</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/26/ml-dl-shen-jing-wang-luo-jie-shi/"/>
        <content type="html"></content>
        <updated>2022-04-26T15:26:19.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/26/pe-diaryupdate/</id>
        <title>PE-DiaryUpdate</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/26/pe-diaryupdate/"/>
        <content type="html">&lt;h3 id=&#34;往日续谈&#34;&gt;&lt;a href=&#34;#往日续谈&#34; class=&#34;headerlink&#34; title=&#34;往日续谈&#34;&gt;&lt;/a&gt;往日续谈&lt;/h3&gt;&lt;p&gt;年轻的时候当然会觉得做 hacker是最帅的，会敲代码懂原理，危险而又迷人的神秘背影怎能不让人心动。&lt;/p&gt;
&lt;p&gt;我才回味起我的本职工作是一件很惊讶的事情，修习技能从厨房烧菜料理到独立游戏开发，从音乐弹琴画画到时序建模预测未来，从编译系统底层内核到量子计算机状态演化，窥视宇宙秘密，探索生物免疫，上知历史名人八卦，下知宿舍各类咆哮，一手炼丹修仙诅咒玄学。&lt;/p&gt;
</content>
        <updated>2022-04-26T06:39:01.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/15/ml-dl-kfold-yan-zheng/</id>
        <title>ML-DL-kFold验证</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/15/ml-dl-kfold-yan-zheng/"/>
        <content type="html">&lt;h3 id=&#34;k-折验证&#34;&gt;&lt;a href=&#34;#k-折验证&#34; class=&#34;headerlink&#34; title=&#34;k 折验证&#34;&gt;&lt;/a&gt;k 折验证&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;create_folds&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num_splits&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# we create a new column called kfold and fill it with -1&lt;/span&gt;
    data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;fold&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
    
    &lt;span class=&#34;token comment&#34;&gt;# the next step is to randomize the rows of the data&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# data = data.sample(frac=1).reset_index(drop=True)&lt;/span&gt;

    &lt;span class=&#34;token comment&#34;&gt;# calculate number of bins by Sturge&#39;s rule&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# I take the floor of the value, you can also&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# just round it&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# num_bins = int(np.floor(1 + np.log2(len(data))))&lt;/span&gt;
    
    &lt;span class=&#34;token comment&#34;&gt;# bin targets&lt;/span&gt;
    data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;bins&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cut&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
        data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;score&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bins&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; labels&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;token comment&#34;&gt;# initiate the kfold class from model_selection module&lt;/span&gt;
    kf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; StratifiedKFold&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n_splits&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;num_splits&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; shuffle&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; random_state&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;token comment&#34;&gt;# fill the new kfold column&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# note that, instead of targets, we use bins!&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t_&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v_&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;kf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bins&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;v_&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;fold&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; f
    
    &lt;span class=&#34;token comment&#34;&gt;# drop the bins column&lt;/span&gt;
    data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;drop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;bins&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token comment&#34;&gt;# return dataframe with folds&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; data&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

</content>
        <updated>2022-04-14T19:17:12.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/13/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/13/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo server&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo generate&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo deploy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2022-04-12T23:50:55.187Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/11/ml-dl-kagglecompetem/</id>
        <title>ML-DL-KaggleCompeTem</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/11/ml-dl-kagglecompetem/"/>
        <content type="html">&lt;h2 id=&#34;1、The-most-common-classes-CV&#34;&gt;&lt;a href=&#34;#1、The-most-common-classes-CV&#34; class=&#34;headerlink&#34; title=&#34;1、The most common classes - CV&#34;&gt;&lt;/a&gt;1、The most common classes - CV&lt;/h2&gt;&lt;p&gt;补充细分类别&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 以USPPPM为例子&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    
    
&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CFG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;

    
    &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2、The-second-classes-NLP&#34;&gt;&lt;a href=&#34;#2、The-second-classes-NLP&#34; class=&#34;headerlink&#34; title=&#34;2、The second classes - NLP&#34;&gt;&lt;/a&gt;2、The second classes - NLP&lt;/h2&gt;&lt;p&gt;——————————————————————&lt;/p&gt;
&lt;p&gt;补充细分类别&lt;/p&gt;
&lt;p&gt;——————————————————————&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3、Machine-learning-Competitions&#34;&gt;&lt;a href=&#34;#3、Machine-learning-Competitions&#34; class=&#34;headerlink&#34; title=&#34;3、Machine learning Competitions&#34;&gt;&lt;/a&gt;3、Machine learning Competitions&lt;/h2&gt;</content>
        <category term="kaggle" />
        <category term="竞赛模板" />
        <category term="常用tricks" />
        <updated>2022-04-11T04:24:15.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/08/ml-dl-datavisualtion/</id>
        <title>ML-Dl-DataVisualtion</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/08/ml-dl-datavisualtion/"/>
        <content type="html">&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import pandas as pd
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

</content>
        <category term="data vistualtion" />
        <updated>2022-04-08T13:30:11.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/07/ml-dl-you-hua-suan-fa-yi-wen/</id>
        <title>ML-DL-优化算法疑问</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/07/ml-dl-you-hua-suan-fa-yi-wen/"/>
        <content type="html">&lt;h4 id=&#34;优化算法疑问&#34;&gt;&lt;a href=&#34;#优化算法疑问&#34; class=&#34;headerlink&#34; title=&#34;优化算法疑问&#34;&gt;&lt;/a&gt;优化算法疑问&lt;/h4&gt;</content>
        <category term="SGD" />
        <category term="RMSProp" />
        <category term="Adam" />
        <updated>2022-04-07T09:14:18.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/07/pe-lun-wen-xie-zuo/</id>
        <title>PE-论文写作</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/07/pe-lun-wen-xie-zuo/"/>
        <content type="html">&lt;h2 id=&#34;论文写作要求&#34;&gt;&lt;a href=&#34;#论文写作要求&#34; class=&#34;headerlink&#34; title=&#34;论文写作要求&#34;&gt;&lt;/a&gt;论文写作要求&lt;/h2&gt;&lt;p&gt;1.标题 + 作者&lt;/p&gt;
&lt;p&gt;2.摘要 - Abstract&lt;/p&gt;
&lt;p&gt;3.导言 - Introduction &lt;/p&gt;
&lt;p&gt;4.相关工作 - Related Work&lt;/p&gt;
&lt;p&gt;Example : 5.模型 - Deep Residual Learning - 5.1 &amp;gt; 5.2 …&lt;/p&gt;
&lt;p&gt;6.理论&lt;/p&gt;
&lt;p&gt;7.实验 + 总结 - Experiments + Conclusion&lt;/p&gt;
&lt;p&gt;8.评论&lt;/p&gt;
&lt;p&gt;引用：References&lt;/p&gt;
</content>
        <category term="论文写作" />
        <updated>2022-04-07T00:46:47.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/04/ml-dl-python-yong-fa-zhu-yi/</id>
        <title>ML-DL-python用法注意</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/04/ml-dl-python-yong-fa-zhu-yi/"/>
        <content type="html">&lt;h2 id=&#34;Python&#34;&gt;&lt;a href=&#34;#Python&#34; class=&#34;headerlink&#34; title=&#34;Python&#34;&gt;&lt;/a&gt;Python&lt;/h2&gt;&lt;h3 id=&#34;切片操作的小块解释&#34;&gt;&lt;a href=&#34;#切片操作的小块解释&#34; class=&#34;headerlink&#34; title=&#34;切片操作的小块解释&#34;&gt;&lt;/a&gt;切片操作的小块解释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;[-1]：获取最后一个元素，类似于matlab中的end；&lt;/li&gt;
&lt;li&gt;[:-1]：除了最后一个元素，获取其他所有的元素；&lt;/li&gt;
&lt;li&gt;[::-1]：对第一个到最后一个元素进行倒序之后取出；&lt;/li&gt;
&lt;li&gt;[n::-1]：对第一个到第n个元素进行倒序后取出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enumerate&#34;&gt;&lt;a href=&#34;#enumerate&#34; class=&#34;headerlink&#34; title=&#34;enumerate()&#34;&gt;&lt;/a&gt;enumerate()&lt;/h2&gt;&lt;p&gt;enumerate() 函数用于将一个可遍历的数据对象组合成一个索引序列，同时列出数据和数据下标&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;train_score &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;score&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;del&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;score&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

</content>
        <updated>2022-04-04T02:02:31.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/02/ml-dl-zhu-yi-li-ji-zhi/</id>
        <title>ML-DL-注意力机制</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/02/ml-dl-zhu-yi-li-ji-zhi/"/>
        <content type="html">&lt;h2 id=&#34;注意力机制-Attention-Mechanism&#34;&gt;&lt;a href=&#34;#注意力机制-Attention-Mechanism&#34; class=&#34;headerlink&#34; title=&#34;注意力机制 - Attention Mechanism&#34;&gt;&lt;/a&gt;注意力机制 - Attention Mechanism&lt;/h2&gt;&lt;h3 id=&#34;一、attention-这项工作的出现&#34;&gt;&lt;a href=&#34;#一、attention-这项工作的出现&#34; class=&#34;headerlink&#34; title=&#34;一、attention 这项工作的出现&#34;&gt;&lt;/a&gt;一、attention 这项工作的出现&lt;/h3&gt;&lt;h3 id=&#34;二、针对注意力机制所包含的一些区分&#34;&gt;&lt;a href=&#34;#二、针对注意力机制所包含的一些区分&#34; class=&#34;headerlink&#34; title=&#34;二、针对注意力机制所包含的一些区分&#34;&gt;&lt;/a&gt;二、针对注意力机制所包含的一些区分&lt;/h3&gt;&lt;p&gt;1、软注意，侧重于吸取的信息相对来说会偏向全面&lt;/p&gt;
&lt;p&gt;2、硬注意，会直接舍弃部分信息来保留计算的轻便&lt;/p&gt;
&lt;p&gt;3、自注意机制，由输入权重来相互作用，其实这样的状况是由内部来决定，&lt;/p&gt;
&lt;p&gt;预训练模型看起来和 Transformer 有着很大的干系，可以说是语言模型的核心网络，&lt;/p&gt;
&lt;p&gt;transformer 在我这里给出的解释是，一段话作为输入，首先将输入中的各个词在self-attention 机制下变成词向量，同时会含有一连串的每一个词的位置向量 （ 不行，我完全是跟着别人走的）&lt;/p&gt;
</content>
        <category term="深度学习" />
        <category term="循环神经网络" />
        <updated>2022-04-02T15:20:41.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/04/02/ml-dl-readingpaper/</id>
        <title>ML-DL-ReadingPaper</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/04/02/ml-dl-readingpaper/"/>
        <content type="html">&lt;h2 id=&#34;Awesome-Deep-Learning-amp-Quantum-Computing&#34;&gt;&lt;a href=&#34;#Awesome-Deep-Learning-amp-Quantum-Computing&#34; class=&#34;headerlink&#34; title=&#34;Awesome Deep Learning &amp;amp; Quantum Computing&#34;&gt;&lt;/a&gt;Awesome Deep Learning &amp;amp; Quantum Computing&lt;/h2&gt;&lt;p&gt;我的小仓库😎😎 : &lt;a href=&#34;https://www.aliyundrive.com/s/CELiSXuKc8e&#34;&gt;https://www.aliyundrive.com/s/CELiSXuKc8e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不错的github地址：&lt;/p&gt;
&lt;p&gt;&lt;u&gt;深度学习&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap&#34;&gt;https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mli/paper-reading&#34;&gt;https://github.com/mli/paper-reading&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;量子计算&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/desireevl/awesome-quantum-computing&#34;&gt;https://github.com/desireevl/awesome-quantum-computing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;一、Convolutional-Neural-Networks-CNN&#34;&gt;&lt;a href=&#34;#一、Convolutional-Neural-Networks-CNN&#34; class=&#34;headerlink&#34; title=&#34;一、Convolutional Neural Networks - CNN&#34;&gt;&lt;/a&gt;一、Convolutional Neural Networks - CNN&lt;/h3&gt;&lt;h3 id=&#34;二、Recurrent-Neural-Network-RNN&#34;&gt;&lt;a href=&#34;#二、Recurrent-Neural-Network-RNN&#34; class=&#34;headerlink&#34; title=&#34;二、Recurrent Neural Network - RNN&#34;&gt;&lt;/a&gt;二、Recurrent Neural Network - RNN&lt;/h3&gt;&lt;h3 id=&#34;三、Reinforcement-Learning-RNN&#34;&gt;&lt;a href=&#34;#三、Reinforcement-Learning-RNN&#34; class=&#34;headerlink&#34; title=&#34;三、Reinforcement Learning - RNN&#34;&gt;&lt;/a&gt;三、Reinforcement Learning - RNN&lt;/h3&gt;&lt;h3 id=&#34;四、Graph-Neural-Learning-GNN&#34;&gt;&lt;a href=&#34;#四、Graph-Neural-Learning-GNN&#34; class=&#34;headerlink&#34; title=&#34;四、Graph Neural Learning - GNN&#34;&gt;&lt;/a&gt;四、Graph Neural Learning - GNN&lt;/h3&gt;</content>
        <category term="paper" />
        <category term="deep learning" />
        <category term="neural network" />
        <updated>2022-04-02T03:41:23.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/03/28/ml-dl-xun-huan-shen-jing-wang-luo/</id>
        <title>ML-DL-循环神经网络</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/03/28/ml-dl-xun-huan-shen-jing-wang-luo/"/>
        <content type="html"></content>
        <category term="RNN" />
        <category term="循环神经网络" />
        <updated>2022-03-28T06:37:08.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/03/26/ml-dl-pytorch-shi-xian/</id>
        <title>ML-DL-Pytorch实现</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/03/26/ml-dl-pytorch-shi-xian/"/>
        <content type="html">&lt;h4 id=&#34;Declaration-：借鉴了-d2l-https-zh-d2l-ai-的pytorch实现&#34;&gt;&lt;a href=&#34;#Declaration-：借鉴了-d2l-https-zh-d2l-ai-的pytorch实现&#34; class=&#34;headerlink&#34; title=&#34;Declaration ：借鉴了 d2l (https://zh.d2l.ai)的pytorch实现&#34;&gt;&lt;/a&gt;Declaration ：借鉴了 d2l (&lt;a href=&#34;https://zh.d2l.ai)的pytorch实现/&#34;&gt;https://zh.d2l.ai)的pytorch实现&lt;/a&gt;&lt;/h4&gt;</content>
        <category term="pytorch" />
        <category term="深度学习" />
        <category term="机器学习" />
        <updated>2022-03-26T14:35:40.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/03/26/pe-shi-xi-yi-xiang/</id>
        <title>PE-实习意向</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/03/26/pe-shi-xi-yi-xiang/"/>
        <content type="html">&lt;p&gt;目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一、AI for Design研发实习生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二、Graph Neural Network Research研发实习生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三、上海AI系统研究实习生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;四、机器学习组AI for Science实习生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;五、上海AI系统开发实习生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;六、机器学习+计算化学/计算物理算法实习生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;七、强化学习算法应用实习生&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——————————————————————————————&lt;/p&gt;
&lt;p&gt;一、AI for Design研发实习生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;招聘人数： 1-2&lt;/li&gt;
&lt;li&gt;工作地点： 北京&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;组别简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微软亚洲研究院DKI (Data, Knowledge &amp;amp; Intelligence) Area 致力于人工智能、数据分析、数据交互。数据可视化的研究。探索全新的数据分析，展示，交互技术，让数据和数据中的发现故事被高效地理解、广泛地传播。数据智能是一个典型的交叉领域，综合了自然语言处理、多维数据分析、机器学习、数据可视化、人机交互、计算机视觉等多个领域。团队与微软核心产品（如Excel，PowerPoint等）深度合作，并常年在各个领域的顶级会议和期刊上发表具有影响力的论文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要从事将人工智能与平面设计相结合的研究工作，探索使得平面设计更加自动化和智能化的深度学习模型和方法。这是一个跨领域的研究课题，涉及到深度学习、计算机视觉、自然语言处理、平面设计、软件工程等研究领域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作职责：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;积极跟进和关注深度学习、自然语言处理、计算机视觉的前沿研究&lt;/li&gt;
&lt;li&gt;模型与算法设计和改进，数据的收集与处理，大规模模型的训练与调试，实验结果分析与总结，等等&lt;/li&gt;
&lt;li&gt;撰写高水平论文&lt;/li&gt;
&lt;li&gt;原型系统的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;任职要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相关专业硕士及以上全日制在读学生&lt;/li&gt;
&lt;li&gt;熟悉Python，精通 Huggingface, Fairseq, DeepSpeed等DNN框架与工具&lt;/li&gt;
&lt;li&gt;有较强的数学基础，较强的编程能力，能独立进行数据分析&lt;/li&gt;
&lt;li&gt;具备深度学习、自然语言处理、计算机视觉的相关知识&lt;/li&gt;
&lt;li&gt;需要对GAN、CLIP、DALL-E、GPT、T5、BART等工作及相关研究中的一个或多个非常了解&lt;/li&gt;
&lt;li&gt;拥有论文快速检索和阅读能力&lt;/li&gt;
&lt;li&gt;有在计算机视觉或NLP方向国际会议发表论文经历，或编程比赛经历的同学优先。&lt;/li&gt;
&lt;li&gt;有技术类博客文章撰写习惯的优先&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、Graph Neural Network Research研发实习生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;招聘人数： 1-2&lt;/li&gt;
&lt;li&gt;工作地点： 北京&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;组别简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data Analytics Research是微软亚洲研究院DKI (Data, Knowledge &amp;amp; Intelligence) Area 下专注于数据分析的研究团队，深度参与了微软多个产品（如Excel, Forms, Bing, Azure, Power BI等）中数据分析和智能的研发工作，深刻改变了亿万用户分析理解各领域数据的方式，并在数据挖掘、人工智能、机器学习、软件工程等领域常年发表具有影响力的工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要从事图神经网络相关的研究工作，着眼于图神经网络模型的设计与理解，致力于提高模型的泛化能力以及可解释性，包括但不仅限于图神经网络新架构设计，图模型普适性分析，基于图性质的问题空间划分，图迁移学习，等等。此外，基于对图模型的理解，我们也探索图网络在更广泛问题场景下的应用前景，用图网络技术赋能更多领域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作职责：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;积极跟进和关注图网络学习的前沿研究&lt;/li&gt;
&lt;li&gt;进行图网络模型研究，包括设计新的图模型架构与学习算法，图模型可解释性研究，新领域下的图模型应用，等等&lt;/li&gt;
&lt;li&gt;撰写高水平论文并在顶级会议和期刊上进行发表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;任职要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;熟悉Python，精通 Pytorch或Tensorflow&lt;/li&gt;
&lt;li&gt;具备机器学习、深度学习的相关知识&lt;/li&gt;
&lt;li&gt;拥有论文快速检索和阅读能力&lt;/li&gt;
&lt;li&gt;有在国际会议发表论文经历、ACM或其他编程比赛经历的同学优先。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、上海AI系统研究实习生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;招聘人数： 2-4&lt;/li&gt;
&lt;li&gt;工作地点： 上海&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作职责：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 MSRA研究员们的指导下，进行人工智能系统前沿技术的研究，具体研究方向包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对大模型、系数模型、动态模型等前沿模型的训练及推理优化&lt;/li&gt;
&lt;li&gt;针对各种端侧和云侧设备进行自动化部署优化，包括编译优化，模型架构优化与压缩，面向硬件的高效模型设计等&lt;/li&gt;
&lt;li&gt;面向深度学习负载的集群设计，包括调度优化，数据与通信优化等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;任职要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硕士或博士研究生，专业为计算机、电子信息等相关专业，具有较强的英文听说读写能力。&lt;/li&gt;
&lt;li&gt;有强烈的意愿做世界先进的科学研究并且在顶级会议或期刊发表论文。&lt;/li&gt;
&lt;li&gt;具备良好的动手能力，以及分析问题解决问题的能力，能够快速地规划出解决方案，并进行验证&lt;/li&gt;
&lt;li&gt;有团队协作精神，有责任心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;加分项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有深度学习基础，至少对一种深度学习框架（PyTorch 优先，TensorFlow等）具有深入理解；对AI算法有一定了解，有在相关领域顶会上发表过论文者优先&lt;/li&gt;
&lt;li&gt;对GPU架构具有一定了解，并有优化经验者优先&lt;/li&gt;
&lt;li&gt;对分布式系统或数据库系统有一定基础，具有相关研究经验者优先&lt;/li&gt;
&lt;li&gt;具有AI加速器（ASIC/FPGA等）研究经验者优先&lt;/li&gt;
&lt;li&gt;参加过学术界工业界机器学习相关比赛，CCPC/ICPC 等程序设计竞赛，电子设计大赛等竞赛并获得优异成绩者优先&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四、机器学习组AI for Science实习生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;招聘人数： 3-5&lt;/li&gt;
&lt;li&gt;工作地点： 北京&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;组别简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微软亚洲研究院机器学习组致力于从算法、应用和理论层面推进人工智能前沿研究，加速人工智能在自然科学和产业应用中的探索。机器学习组开发了Graphormer，LightGBM等多个受欢迎的开源工具包，多次夺得国际比赛冠军，并持续产出高质量学术论文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作职责：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参与AI for Science项目科研项目，撰写高质量论文，完成前沿算法的落地与部署，开发、维护开源工具包。具体方向包括但不限于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于深度学习的分子模拟，如分子动力学，分子性质预测，分子生成，逆合成等。&lt;/li&gt;
&lt;li&gt;深度学习模型在算法及理论层面的创新，如图神经网络、大规模预训练算法等。&lt;/li&gt;
&lt;li&gt;深度学习在材料发现、药物发现等中的应用。&lt;/li&gt;
&lt;li&gt;机器学习与湿实验相结合。&lt;/li&gt;
&lt;li&gt;使用机器学习加速密度泛函理论等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;任职要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;扎实的数理基础知识。&lt;/li&gt;
&lt;li&gt;任一相关方向扎实的背景知识。&lt;/li&gt;
&lt;li&gt;熟练使用PyTorch/Tensorflow等深度学习库。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;加分项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有机器学习方向顶会论文发表。或&lt;/li&gt;
&lt;li&gt;有丰富的计算物理、化学、生物知识，会熟练使用相关量子化学软件等。&lt;/li&gt;
&lt;li&gt;实习时间一年及以上。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;五、上海AI系统开发实习生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;招聘人数： 2-4&lt;/li&gt;
&lt;li&gt;工作地点： 上海&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作职责：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与 MSRA的研究员们合作，共同研究AI前沿技术，设计开发人工智能系统与工具，维护开源项目，并将开发成果应用于实际场景。其具体内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在深入理解前沿算法（如NAS，Model Compression，sparsity）的基础上，探索未来的发展方向&lt;/li&gt;
&lt;li&gt;参与MSRA 开源项目（如 NNI、nn-meter等）的设计和开发，包括接口设计，算法实现，用户交互等&lt;/li&gt;
&lt;li&gt;与团队合作探索项目的更多应用场景，并将系统与工具运用于实际产品中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;任职要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有计算机科学、数据科学或相关专业背景，本科及以上学历在校学生&lt;/li&gt;
&lt;li&gt;有 Python等语言的编程经验，对 Tensorflow/PyTorch 等深度学习框架有一定了解&lt;/li&gt;
&lt;li&gt;具备良好的工程能力，以及分析问题解决问题的能力，能够快速地规划出解决方案，并将想法落地&lt;/li&gt;
&lt;li&gt;有团队协作精神，有责任心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;加分项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对AI算法（AutoML/NAS/Compression等）有一定了解，有在相关领域顶会上发表过论文者优先&lt;/li&gt;
&lt;li&gt;参加过学术界工业界机器学习相关比赛并获得优异成绩者优先&lt;/li&gt;
&lt;li&gt;具有深度学习项目经验者优先，熟悉分布式训练者优先&lt;/li&gt;
&lt;li&gt;有 CCPC/ICPC 等程序设计竞赛的获奖经历者优先&lt;/li&gt;
&lt;li&gt;有开源项目开发或维护经历者优先&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;六、机器学习+计算化学/计算物理算法实习生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;招聘人数： 2-4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;组别简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微软亚洲研究院机器学习领域从理论、算法、应用等不同层面推动机器学习的前沿。我们的研究兴趣包含：深度学习、强化学习、图学习、梯度提升树、在线学习、预训练、动态学习、学习理论等。同时， 我们也在积极探索人工智能在自然科学和产业应用中的价值，从而为科学工作者和传统工业赋能（具体见研究概况）。在过去的十几年间，我们在顶级国际会议和期刊上发表了大量被高度引用的高质量论文，向微软的产品部门转化了大量核心技术，并帮助众多的企业合作伙伴实现了数字化转型。我们也向开源社区贡献了大量高质量开源工具，例如 LightGBM、LigthLDA、微软图引擎，多智能体资源优化平台“群策 MARO“，业内首个AI量化投资平台“微矿Qlib”，以及最新的时空预测平台”FOST”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作职责：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复现已有论文&lt;/li&gt;
&lt;li&gt;改进现有代码、性能优化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;工作方向（选其一）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用图神经网络等相关方法进行分子材料表征&lt;/li&gt;
&lt;li&gt;使用生成模型、强化学习等方法完成分子材料设计&lt;/li&gt;
&lt;li&gt;利用神经网络加速偏微分方程求解&lt;/li&gt;
&lt;li&gt;利用神经网络完成积分方程求解&lt;/li&gt;
&lt;li&gt;利用cuda语言加速&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;任职要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机、电子、化学、物理或相关专业（本科/硕士/博士）&lt;/li&gt;
&lt;li&gt;扎实的数据结构/算法基础&lt;/li&gt;
&lt;li&gt;熟悉常见的机器学习算法，熟悉使用PyTorch或TensorFlow等&lt;/li&gt;
&lt;li&gt;熟练的编程能力&lt;/li&gt;
&lt;li&gt;快速学习能力,良好的沟通与合作能力&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;七、强化学习算法应用实习生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;招聘人数： 2-4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;组别简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微软亚洲研究院机器学习领域从理论、算法、应用等不同层面推动机器学习的前沿。我们的研究兴趣包含：深度学习、强化学习、图学习、梯度提升树、在线学习、预训练、动态学习、学习理论等。同时， 我们也在积极探索人工智能在自然科学和产业应用中的价值，从而为科学工作者和传统工业赋能（具体见研究概况）。在过去的十几年间，我们在顶级国际会议和期刊上发表了大量被高度引用的高质量论文，向微软的产品部门转化了大量核心技术，并帮助众多的企业合作伙伴实现了数字化转型。我们也向开源社区贡献了大量高质量开源工具，例如 LightGBM、LigthLDA、微软图引擎，多智能体资源优化平台“群策 MARO“，业内首个AI量化投资平台“微矿Qlib”，以及最新的时空预测平台”FOST”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作职责：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;积极跟进和关注强化学习算法的前沿研究；&lt;/li&gt;
&lt;li&gt;参与机器学习算法，特别是强化学习相关算法的研究；&lt;/li&gt;
&lt;li&gt;参与强化学习算法在物流、能源、工业控制等领域的落地应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;任职要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机或相关专业硕士或以上学历，有较强编程能力的优秀本科生也欢迎申请；&lt;/li&gt;
&lt;li&gt;具备良好的数学基础，机器学习知识；&lt;/li&gt;
&lt;li&gt;具有较强的编程实现能力，良好的沟通能力和团队协作精神；&lt;/li&gt;
&lt;li&gt;加分项：有强化学习算法的开发和研究经历；顶级AI会议文章；熟练掌握深度学习框架(PyTorch, TensorFlow 等)；有开源软件开发经历等。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="MSRA" />
        <category term="微软亚洲研究院" />
        <updated>2022-03-26T10:50:02.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/03/26/ml-dl-juan-ji-shen-jing-wang-luo/</id>
        <title>ML-DL-卷积神经网络</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/03/26/ml-dl-juan-ji-shen-jing-wang-luo/"/>
        <content type="html">&lt;h2 id=&#34;一、卷积神经网络类&#34;&gt;&lt;a href=&#34;#一、卷积神经网络类&#34; class=&#34;headerlink&#34; title=&#34;一、卷积神经网络类&#34;&gt;&lt;/a&gt;一、卷积神经网络类&lt;/h2&gt;&lt;h4 id=&#34;1、简要解释&#34;&gt;&lt;a href=&#34;#1、简要解释&#34; class=&#34;headerlink&#34; title=&#34;1、简要解释&#34;&gt;&lt;/a&gt;1、简要解释&lt;/h4&gt;&lt;p&gt;用途-处理图像数据、表格数据&lt;/p&gt;
&lt;p&gt;&lt;u&gt;kaggle竞赛选择：图像识别，目标检测-边缘检测，语义分割&lt;/u&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 构造一个二维卷积层，它具有1个输出通道和形状为（1，2）的卷积核&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 二维卷积核 参数形式 (批量大小，通道，高度，宽度)&lt;/span&gt;
conv2d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Conv2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bias&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特性：空间不变性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;平移不变性&lt;/em&gt;（translation invariance）：不管检测对象出现在图像中的哪个位置，神经网络的前面几层应该对相同的图像区域具有相似的反应，即为“平移不变性”。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;局部性&lt;/em&gt;（locality）：神经网络的前面几层应该只探索输入图像中的局部区域，而不过度在意图像中相隔较远区域的关系，这就是“局部性”原则。最终，可以聚合这些局部特征，以在整个图像级别进行预测。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;输出的卷积层 - 》 特征映射&lt;/p&gt;
&lt;p&gt;感受野：指前向传播中可能影响 x 计算的所有元素&lt;/p&gt;
&lt;p&gt;“卷积”被定义为 $$(f * g)(\mathbf{x}) = \int f(\mathbf{z}) g(\mathbf{x}-\mathbf{z}) d\mathbf{z}.$$&lt;/p&gt;
&lt;h4 id=&#34;2、卷积神经网络——LeNet&#34;&gt;&lt;a href=&#34;#2、卷积神经网络——LeNet&#34; class=&#34;headerlink&#34; title=&#34;2、卷积神经网络——LeNet&#34;&gt;&lt;/a&gt;2、卷积神经网络——LeNet&lt;/h4&gt;&lt;p&gt;LeNet（LeNet-5）由两个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积编码器：由两个卷积层组成;&lt;/li&gt;
&lt;li&gt;全连接层密集块：由三个全连接层组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/lenet.svg&#34; alt=&#34;lenet&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;卷积神经网络（CNN）是一类使用卷积层的网络。&lt;/li&gt;
&lt;li&gt;在卷积神经网络中，我们组合使用卷积层、非线性激活函数和汇聚层。&lt;/li&gt;
&lt;li&gt;为了构造高性能的卷积神经网络，我们通常对卷积层进行排列，逐渐降低其表示的空间分辨率，同时增加通道数。&lt;/li&gt;
&lt;li&gt;在传统的卷积神经网络中，卷积块编码得到的表征在输出之前需由一个或多个全连接层进行处理。&lt;/li&gt;
&lt;li&gt;LeNet是最早发布的卷积神经网络之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;考查&#34;&gt;&lt;a href=&#34;#考查&#34; class=&#34;headerlink&#34; title=&#34;考查&#34;&gt;&lt;/a&gt;考查&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将平均汇聚层替换为最大汇聚层，会发生什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尝试构建一个基于LeNet的更复杂的网络，以提高其准确性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调整卷积窗口大小。&lt;/li&gt;
&lt;li&gt;调整输出通道的数量。&lt;/li&gt;
&lt;li&gt;调整激活函数（如ReLU）。&lt;/li&gt;
&lt;li&gt;调整卷积层的数量。&lt;/li&gt;
&lt;li&gt;调整全连接层的数量。&lt;/li&gt;
&lt;li&gt;调整学习率和其他训练细节（例如，初始化和轮数）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在MNIST数据集上尝试以上改进的网络。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显示不同输入（例如毛衣和外套）时，LeNet第一层和第二层的激活值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二、现代卷积神经网络&#34;&gt;&lt;a href=&#34;#二、现代卷积神经网络&#34; class=&#34;headerlink&#34; title=&#34;二、现代卷积神经网络&#34;&gt;&lt;/a&gt;二、现代卷积神经网络&lt;/h2&gt;&lt;h3 id=&#34;1、AlexNet&#34;&gt;&lt;a href=&#34;#1、AlexNet&#34; class=&#34;headerlink&#34; title=&#34;1、AlexNet&#34;&gt;&lt;/a&gt;1、AlexNet&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AlexNet。它是第一个在大规模视觉竞赛中击败传统计算机视觉模型的大型神经网络；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用重复块的网络（VGG）。它利用许多重复的神经网络块；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络中的网络（NiN）。它重复使用由卷积层和1×1卷积层（用来代替全连接层）来构建深层网络;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;含并行连结的网络（GoogLeNet）。它使用并行连结的网络，通过不同窗口大小的卷积层和最大汇聚层来并行抽取信息；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;残差网络（ResNet）。它通过残差块构建跨层的数据通道，是计算机视觉中最流行的体系架构；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;稠密连接网络（DenseNet）。它的计算成本很高，但给我们带来了更好的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习表征观摩图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/filters.png&#34; alt=&#34;filters&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/alexnet.svg&#34; alt=&#34;alexnet&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; torch
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; torch &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; nn
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; d2l &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; d2l

net &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Sequential&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 这里，我们使用一个11*11的更大窗口来捕捉对象。&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 同时，步幅为4，以减少输出的高度和宽度。&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 另外，输出通道的数目远大于LeNet&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Conv2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stride&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; padding&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ReLU&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;MaxPool2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stride&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 减小卷积窗口，使用填充为2来使得输入与输出的高和宽一致，且增大输出通道数&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Conv2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; padding&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ReLU&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;MaxPool2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stride&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 使用三个连续的卷积层和较小的卷积窗口。&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 除了最后的卷积层，输出通道的数量进一步增加。&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 在前两个卷积层之后，汇聚层不用于减少输入的高度和宽度&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Conv2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; padding&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ReLU&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Conv2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; padding&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ReLU&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Conv2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; padding&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ReLU&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;MaxPool2d&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;kernel_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stride&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 这里，全连接层的输出数量是LeNet中的好几倍。使用dropout层来减轻过拟合&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Linear&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6400&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ReLU&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Dropout&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Linear&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ReLU&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Dropout&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 最后是输出层。由于这里使用Fashion-MNIST，所以用类别数为10，而非论文中的1000&lt;/span&gt;
    nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Linear&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;观察网络每一层输出架构&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;X &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;224&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;224&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; layer &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; net&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    X&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;layer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;layer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__class__&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__name__&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;output shape:\t&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;Conv2d output shape:	 torch.Size([1, 96, 54, 54])
ReLU output shape:	 torch.Size([1, 96, 54, 54])
MaxPool2d output shape:	 torch.Size([1, 96, 26, 26])
Conv2d output shape:	 torch.Size([1, 256, 26, 26])
ReLU output shape:	 torch.Size([1, 256, 26, 26])
MaxPool2d output shape:	 torch.Size([1, 256, 12, 12])
Conv2d output shape:	 torch.Size([1, 384, 12, 12])
ReLU output shape:	 torch.Size([1, 384, 12, 12])
Conv2d output shape:	 torch.Size([1, 384, 12, 12])
ReLU output shape:	 torch.Size([1, 384, 12, 12])
Conv2d output shape:	 torch.Size([1, 256, 12, 12])
ReLU output shape:	 torch.Size([1, 256, 12, 12])
MaxPool2d output shape:	 torch.Size([1, 256, 5, 5])
Flatten output shape:	 torch.Size([1, 6400])
Linear output shape:	 torch.Size([1, 4096])
ReLU output shape:	 torch.Size([1, 4096])
Dropout output shape:	 torch.Size([1, 4096])
Linear output shape:	 torch.Size([1, 4096])
ReLU output shape:	 torch.Size([1, 4096])
Dropout output shape:	 torch.Size([1, 4096])
Linear output shape:	 torch.Size([1, 10])&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;使用更小的学习速率训练，这是因为网络更深更广、图像分辨率更高，训练卷积神经网络就更昂贵。&lt;/p&gt;
&lt;h4 id=&#34;小结-1&#34;&gt;&lt;a href=&#34;#小结-1&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;AlexNet的架构与LeNet相似，但使用了更多的卷积层和更多的参数来拟合大规模的ImageNet数据集。&lt;/li&gt;
&lt;li&gt;今天，AlexNet已经被更有效的架构所超越，但它是从浅层网络到深层网络的关键一步。&lt;/li&gt;
&lt;li&gt;尽管AlexNet的代码只比LeNet多出几行，但学术界花了很多年才接受深度学习这一概念，并应用其出色的实验结果。这也是由于缺乏有效的计算工具。&lt;/li&gt;
&lt;li&gt;Dropout、ReLU和预处理是提升计算机视觉任务性能的其他关键步骤。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;练习&#34;&gt;&lt;a href=&#34;#练习&#34; class=&#34;headerlink&#34; title=&#34;练习&#34;&gt;&lt;/a&gt;练习&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;试着增加迭代轮数。对比LeNet的结果有什么不同？为什么？&lt;/li&gt;
&lt;li&gt;AlexNet对于Fashion-MNIST数据集来说可能太复杂了。&lt;ol&gt;
&lt;li&gt;尝试简化模型以加快训练速度，同时确保准确性不会显著下降。&lt;/li&gt;
&lt;li&gt;设计一个更好的模型，可以直接在28×28图像上工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;修改批量大小，并观察模型精度和GPU显存变化。&lt;/li&gt;
&lt;li&gt;分析了AlexNet的计算性能。&lt;ol&gt;
&lt;li&gt;在AlexNet中主要是哪部分占用显存？&lt;/li&gt;
&lt;li&gt;在AlexNet中主要是哪部分需要更多的计算？&lt;/li&gt;
&lt;li&gt;计算结果时显存带宽如何？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;将dropout和ReLU应用于LeNet-5，效果有提升吗？再试试预处理会怎么样？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2、使用块的网络：-VGG-和AlexNet-没有很大的差别&#34;&gt;&lt;a href=&#34;#2、使用块的网络：-VGG-和AlexNet-没有很大的差别&#34; class=&#34;headerlink&#34; title=&#34;2、使用块的网络： VGG (和AlexNet 没有很大的差别)&#34;&gt;&lt;/a&gt;2、使用块的网络： VGG (和AlexNet 没有很大的差别)&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/vgg.svg&#34; alt=&#34;vgg&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;小结-2&#34;&gt;&lt;a href=&#34;#小结-2&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;VGG-11使用可复用的卷积块构造网络。不同的VGG模型可通过每个块中卷积层数量和输出通道数量的差异来定义。&lt;/li&gt;
&lt;li&gt;块的使用导致网络定义的非常简洁。使用块可以有效地设计复杂的网络。&lt;/li&gt;
&lt;li&gt;在VGG论文中，Simonyan和Ziserman尝试了各种架构。特别是他们发现深层且窄的卷积（即3×3）比较浅层且宽的卷积更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3、网络中的网络-NiN&#34;&gt;&lt;a href=&#34;#3、网络中的网络-NiN&#34; class=&#34;headerlink&#34; title=&#34;3、网络中的网络 - NiN&#34;&gt;&lt;/a&gt;3、网络中的网络 - NiN&lt;/h4&gt;</content>
        <category term="CNN" />
        <updated>2022-03-26T07:28:39.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/03/25/ml-dl-zhen-ming-ji-jiu/</id>
        <title>Ml-Dl-朕命急救</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/03/25/ml-dl-zhen-ming-ji-jiu/"/>
        <content type="html">&lt;h4 id=&#34;一、竞赛预处理-整理的样板&#34;&gt;&lt;a href=&#34;#一、竞赛预处理-整理的样板&#34; class=&#34;headerlink&#34; title=&#34;一、竞赛预处理-整理的样板&#34;&gt;&lt;/a&gt;一、竞赛预处理-整理的样板&lt;/h4&gt;&lt;h5 id=&#34;1、导入常见库&#34;&gt;&lt;a href=&#34;#1、导入常见库&#34; class=&#34;headerlink&#34; title=&#34;1、导入常见库&#34;&gt;&lt;/a&gt;1、导入常见库&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np  &lt;span class=&#34;token comment&#34;&gt;# Linear algebra&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd &lt;span class=&#34;token comment&#34;&gt;# data processing, CSV file I/O&lt;/span&gt;


——————————————————————————————图像数据处理部分———————————————————————————
&lt;span class=&#34;token comment&#34;&gt;# 内嵌绘图，可以省略 plt.show()&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;matplotlib inline 
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; matplotlib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pyplot &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; plt  
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; matplotlib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;image &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; mpimg

&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; seaborn &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; sns
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;use&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;seaborn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 显示风格&lt;/span&gt;
sns&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;style&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;white&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; context&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;notebook&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; palette&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;deep&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

——————————————————————————语言token处理部分——————————————————————————
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; wordcloud &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; WordCloud&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; STOPWORDS

 —————————————————————————可添加补充—————————————————————————————————    
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; IPython&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interactiveshell &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; InteractiveShell &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;
InteractiveShell&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ast_node_interactivity &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;all&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rcParams&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;figure.figsize&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;use&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;fivethirtyeight&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 科学计算用的库，包含很多数学和算法的实例，吐槽~哪有这么多科学计算库&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; scipy &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; stats 

&lt;span class=&#34;token comment&#34;&gt;# 数据集环境&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; dirname&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; _&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; filenames &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;walk&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/kaggle/input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; filenmae &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; filenames&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dirname&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; filename&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
              
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;highlight_max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; props &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;where&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nanmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; props&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;



&lt;span class=&#34;token comment&#34;&gt;# 辅助工具&lt;/span&gt;
 &lt;span class=&#34;token comment&#34;&gt;# 迭代进度条，只是为了好看&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tqdm &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; tqdm 
&lt;span class=&#34;token comment&#34;&gt;# 看起来有点老的样子&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; PIL &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Image 

        
————————————————————————————————————————————————————————————————————
&lt;span class=&#34;token comment&#34;&gt;# 系统局部环境&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; os
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; pathlib &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Path
&lt;span class=&#34;token comment&#34;&gt;# 垃圾回收机制&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; gc 

&lt;span class=&#34;token comment&#34;&gt;# 建立深度模型所需要的&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; keras&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;models &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Sequential 
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; keras &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt;  backend &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; K &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;

—————————————————————————————图像部分模型层的简易解释——————————————————————————————————
&lt;span class=&#34;token comment&#34;&gt;# Conv2D : 二维卷积层，互相关运算，可使用填充、步幅和多通道输入/输出&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# Dense : 稠密层&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# Dropout : 丢弃层&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# pool2d : 2维汇聚层，对汇聚窗口所有元素计算最大值或平均值，可使用填充、步幅和多通道输入/输出&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# Flatten : 平滑层&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# MaxPool2D : 二维汇聚计算最大值&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; keras&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Dense &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Dropout &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Lambda&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Flatten Conv2D&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; MaxPool2D 

&lt;span class=&#34;token comment&#34;&gt;# 优化函数 rmsprop_v2 , adam_v2&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; keras&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;optimizers &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Adam &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;RMSprop
&lt;span class=&#34;token comment&#34;&gt;# 训练、验证数据分离&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sklearn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;model_selection &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; train_test_split 
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sklearn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;metrics &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; confusion_matrix &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; keras&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;preprocessing&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;image &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; ImageDataGenerator &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;

——————————————————————————语言模型的部分解释—————————————————————————————————

&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sklearn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;preprocessing &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; LabelEncoder &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sklearn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;model_selection &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; StratifiedKFold &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; transformers &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; AutoTokenizer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; AutoConfig&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; AutoModel&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; get_linear_schedule_with_warmup 

&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;optim &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; AdamW
———————————————————————————————————————————————————————————————————————————
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; keras&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;callbacks &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; ReduceLROnPlateau &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;
———————————————————————————————————忽略包环境的警告——————————————————————————
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; warnings
warnings&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;filterwarnings&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ignore&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

device &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;device&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cuda&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cuda&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;is_available&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;cpu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、检查环境状况&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; subprocess &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; check_output
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;check_output&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ls&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;../input&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;utf8&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;二、检查数据&#34;&gt;&lt;a href=&#34;#二、检查数据&#34; class=&#34;headerlink&#34; title=&#34;二、检查数据&#34;&gt;&lt;/a&gt;二、检查数据&lt;/h4&gt;&lt;h5 id=&#34;1、加载提供的数据&#34;&gt;&lt;a href=&#34;#1、加载提供的数据&#34; class=&#34;headerlink&#34; title=&#34;1、加载提供的数据&#34;&gt;&lt;/a&gt;1、加载提供的数据&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../input/train.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 读入训练数据&lt;/span&gt;
test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../input/test.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 读入测试数据&lt;/span&gt;

train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;head&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 查看前面5行的信息&lt;/span&gt;
train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape &lt;span class=&#34;token comment&#34;&gt;# 返回整体 data 的 的信息&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;Shape Dtrain:&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;Shape Dtest: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;test&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;#&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Unique elements per column&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nunique&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Missing Value?&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;isnull&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

————————————————————————图像数据处理方法————————————————————————————
X_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iloc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;astype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;float32&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 形成array数组 &lt;/span&gt;
y_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iloc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;astype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;int32&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 28*28 的值&lt;/span&gt;
X_test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; test&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;astype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;float32&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;


———————————————————————————— 技巧 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tricks&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; ————————————————————————
&lt;span class=&#34;token comment&#34;&gt;# 一些技巧 - tricks&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;del&lt;/span&gt; train &lt;span class=&#34;token comment&#34;&gt;# can free some space ?&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2、数据可视化&#34;&gt;&lt;a href=&#34;#2、数据可视化&#34; class=&#34;headerlink&#34; title=&#34;2、数据可视化&#34;&gt;&lt;/a&gt;2、数据可视化&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# method 1&lt;/span&gt;
X_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; X_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 转变数据为图片，重新组织形状&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# method 2 : Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)&lt;/span&gt;
X_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; X_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; test&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

————————————————————————————————————————————————————————————————
Y_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 只取值的那一列标签&lt;/span&gt;
X_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;drop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;labels &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 不要值的那一列作为训练数据&lt;/span&gt;
count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sns&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;countplot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Y_train&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 计算 1-10 的数量&lt;/span&gt;
Y_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value_counts&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 柱状图显示 1 - 10 的数量&lt;/span&gt;
————————————————————————————————————————————————————————————————

top &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Counter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;anc &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; anc &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;anchor&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# Counter 计数标签&#39;anchor&#39;&lt;/span&gt;
top &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;top&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;most_common&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 取得前面 50 个&lt;/span&gt;

plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;figure&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;figsize&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 绘制图表尺寸&lt;/span&gt;

sns&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;barplot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;top&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;top&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; palette &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;hls&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 调色板为 hls&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xticks&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rotation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# x 轴标签可以做出一些调整&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Top 50 First Phrases (Anchor)&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fontsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
————————————————————————————————————————————————————————————————&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404083846939.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;fig&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;subplots&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; figsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
text_len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;anchor&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; x &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

sns&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;countplot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text_len&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ax&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
ax&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Word Count Distribution&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 这还要取设置大小？&lt;/span&gt;

avg_word_len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;anchor&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; x &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; x &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 看起来这位小哥很喜欢 用 lambda 演算，分离 anchor 里的词向量来计算平均长度&lt;/span&gt;
sns&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;histplot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;avg_word_len&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ax&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kde &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; color &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;#ffa408&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# kde 是开启核密度函数？,我只是看到一条线啊&lt;/span&gt;
ax&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Average Word Length Distribution&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404091257020.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;时尚词云的display，需要配合图片组合&#34;&gt;&lt;a href=&#34;#时尚词云的display，需要配合图片组合&#34; class=&#34;headerlink&#34; title=&#34;时尚词云的display，需要配合图片组合&#34;&gt;&lt;/a&gt;时尚词云的display，需要配合图片组合&lt;/h2&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; requests
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;figure&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;figsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
text &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;anchor&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values
url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./img.png&#39;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# url = &#39;https://static.vecteezy.com/system/resources/previews/000/263/280/non_2x/vector-open-book.jpg&#39;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 我不知道为什么链接不能有效打开&lt;/span&gt;
im &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Image&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 所以我只能用我自己的方式来打开&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# im = np.array(Image.open(requests.get(url, stream=True).raw))&lt;/span&gt;
cloud &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WordCloud&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stopwords &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; STOPWORDS&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  background_color &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;black&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; im&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  max_words &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;generate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;imshow&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cloud&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;axis&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;off&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093146238.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 针对上面的 anchor 的特征来对 target 的信息抽取&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 只需要把 anchor 替换成 taraget ,action ! &lt;/span&gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093640583.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093717734.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;figure&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;figsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 看起来这个好像是 cm 来计量的&lt;/span&gt;
sns&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;countplot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;context&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; palette &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;hls&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 又来计算 context 的信息，但看起来特征 context 的信息有点多啊&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xticks&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rotation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Distribution of Context&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fontsize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404094416376.png&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;3、特征标准化&#34;&gt;&lt;a href=&#34;#3、特征标准化&#34; class=&#34;headerlink&#34; title=&#34;3、特征标准化&#34;&gt;&lt;/a&gt;3、特征标准化&lt;/h6&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# method 1 : &lt;/span&gt;
mean_px &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; X_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;astype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;# 求其均值作为 np 的 float32 格式&lt;/span&gt;
std_px &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; X_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;std&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;astype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 		&lt;span class=&#34;token comment&#34;&gt;# 求其标准差作为 np 的 float32 格式&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;standardize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;mean_px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;std_px

&lt;span class=&#34;token comment&#34;&gt;# method 2 : Normalize the data&lt;/span&gt;
X_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; X_train &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;255.0&lt;/span&gt;
test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; test &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;255.0&lt;/span&gt;

&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4、检查数据和缺失值&#34;&gt;&lt;a href=&#34;#4、检查数据和缺失值&#34; class=&#34;headerlink&#34; title=&#34;4、检查数据和缺失值&#34;&gt;&lt;/a&gt;4、检查数据和缺失值&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# Check the data&lt;/span&gt;
X_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;isnull&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;describe&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
test&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;isnull&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;describe&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# Encode labels to one hot vectors (ex : 2 -&amp;gt; [0,0,1,0,0,0,0,0,0,0])&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; keras&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;utils&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;np_utils &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; to_categorica
Y_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; to_categorical&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Y_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num_classes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# Set the random seed&lt;/span&gt;
random_seed &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# Split the train and the validation set for the fitting&lt;/span&gt;
X_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; X_val&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Y_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Y_val &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train_test_split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Y_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; test_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; random_state&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;random_seed&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 查看一个例子&lt;/span&gt;
g &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;imshow&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;


——————————————————————————————————————————————————————————————————USPPM
encoder &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; LabelEncoder&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;score_encoded&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; encoder&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit_transform&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;score&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 这里的 0 对应于 label 是 0，0.25 对应于 1 ，0.5 对应于 2。以此类推...&lt;/span&gt;
skf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; StratifiedKFold&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n_splits &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; CONFIG&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;num_fold&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;shuffle&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;random_state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; CONFIG&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;seed&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 分层k折&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# num_fold = 5, seed = 2022&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; val_ind&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;skf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;score_encoded&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# enumerate 中分离出来的数据是 下标 加上 train 中的值&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;val_ind&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# idk&lt;/span&gt;
    train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;val_ind&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;fold&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; k &lt;span class=&#34;token comment&#34;&gt;# 将 val_ind 的下标分别 贴上 k 标志&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# 通过行索引 index 中的具体值来取行数据&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;# iloc 是通过 行号来取行数据&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;################# 效果还不错 ###################&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36468&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36469&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36470&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36459&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36464&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36467&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36465&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36471&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36472&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36457&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36462&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36466&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36455&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36456&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36460&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;###############################################&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;7-添加数据标签&#34;&gt;&lt;a href=&#34;#7-添加数据标签&#34; class=&#34;headerlink&#34; title=&#34;7.添加数据标签&#34;&gt;&lt;/a&gt;7.添加数据标签&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;title&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;context&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df_cpc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_index&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;code&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;title&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lower&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;





&lt;h3 id=&#34;我认为比较重要的数据集类&#34;&gt;&lt;a href=&#34;#我认为比较重要的数据集类&#34; class=&#34;headerlink&#34; title=&#34;我认为比较重要的数据集类&#34;&gt;&lt;/a&gt;我认为比较重要的数据集类&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;utils&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Dataset&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    Dataset(data)
      data (np.array or list-like): input_ids and y
    &#34;&#34;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; max_length&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; data
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max_length &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; max_length

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__len__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__getitem__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;# Padding to max_length&lt;/span&gt;
        d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
        n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max_length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        input_ids &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max_length&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        input_ids&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;input_ids&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

        attention_mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max_length&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        attention_mask&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;input_ids&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; input_ids&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;token string&#34;&gt;&#39;attention_mask&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; attention_mask&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;token string&#34;&gt;&#39;n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;Tokenize&#34;&gt;&lt;a href=&#34;#Tokenize&#34; class=&#34;headerlink&#34; title=&#34;Tokenize&#34;&gt;&lt;/a&gt;Tokenize&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;create_data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; tokenizer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; max_length&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    Create input_ids and label array y

    Args:
      train (pd.DataFrame)

    Returns: list[dict]
      input_ids (np.array[int])
      n (int): seq length or number of tokens
    &#34;&#34;&#34;&lt;/span&gt;
    sep &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tokenizer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sep_token_id
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; tokenizer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__class__&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;RobertaTokenizerFast&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        nsep &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        nsep &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;
        
    data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; r &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iterrows&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        text &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pn_history
        feature_text &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;feature_text

        o &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tokenizer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; feature_text&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      add_special_tokens&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; max_length&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;max_length&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      truncation&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                      return_offsets_mapping&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;token comment&#34;&gt;# Input ids&lt;/span&gt;
        input_ids &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;input_ids&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
        n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input_ids&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        input_ids &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;o&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;input_ids&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;assert&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input_ids &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; sep&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; nsep  &lt;span class=&#34;token comment&#34;&gt;# text and feature_text seperated by [SEP]; sep sep for roberta&lt;/span&gt;
        
        &lt;span class=&#34;token comment&#34;&gt;# Attention mask&lt;/span&gt;
        attention_mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;o&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;attention_mask&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;assert&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;attention_mask &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;row_id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; r&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
             &lt;span class=&#34;token string&#34;&gt;&#39;input_ids&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; input_ids&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
             &lt;span class=&#34;token string&#34;&gt;&#39;text&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
             &lt;span class=&#34;token string&#34;&gt;&#39;n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
             &lt;span class=&#34;token string&#34;&gt;&#39;offset_mapping&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;offset_mapping&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;Model&#34;&gt;&lt;a href=&#34;#Model&#34; class=&#34;headerlink&#34; title=&#34;Model&#34;&gt;&lt;/a&gt;Model&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Module&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; model_dir&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dropout&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pretrained&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token builtin&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__init__&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        config &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; AutoConfig&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;from_pretrained&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;model_dir&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; add_pooling_layer&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; pretrained&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transformer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; AutoModel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;from_pretrained&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;model_dir&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; config&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transformer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; AutoModel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;from_config&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fc_dropout &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Dropout&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dropout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Linear&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hidden_size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_init_weights&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;_init_weights&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; module&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;weight&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;normal_&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mean&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; std&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;initializer_range&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bias &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bias&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zero_&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; input_ids&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; attention_mask&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transformer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input_ids&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; attention_mask&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; out&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;last_hidden_state&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# batch_size x max_length (512) x 768&lt;/span&gt;

        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fc_dropout&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fc&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&#34;三、建立模型（CNN、&#34;&gt;&lt;a href=&#34;#三、建立模型（CNN、&#34; class=&#34;headerlink&#34; title=&#34;三、建立模型（CNN、)&#34;&gt;&lt;/a&gt;三、建立模型（CNN、)&lt;/h4&gt;&lt;h5 id=&#34;1、model&#34;&gt;&lt;a href=&#34;#1、model&#34; class=&#34;headerlink&#34; title=&#34;1、model&#34;&gt;&lt;/a&gt;1、model&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# A CNN model example&lt;/span&gt;
model &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Sequential&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Conv2D&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filters &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;padding &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Same&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                 activation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;relu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; input_shape &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Conv2D&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filters &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;padding &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Same&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                 activation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;relu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;MaxPool2D&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pool_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Dropout&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;


model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Conv2D&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filters &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;padding &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Same&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                 activation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;relu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Conv2D&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filters &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; kernel_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;padding &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Same&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                 activation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;relu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;MaxPool2D&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pool_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; strides&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Dropout&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;


model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Dense&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; activation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;relu&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Dropout&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Dense&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; activation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;softmax&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2、后续运作步骤&#34;&gt;&lt;a href=&#34;#2、后续运作步骤&#34; class=&#34;headerlink&#34; title=&#34;2、后续运作步骤&#34;&gt;&lt;/a&gt;2、后续运作步骤&lt;/h5&gt;&lt;p&gt;一旦我们的层被添加到模型中，我们需要设置一个评分函数、一个损失函数和一个优化算法。&lt;br&gt;我们定义损失函数来衡量我们的模型在具有已知标签的图像上的表现有多差。它是观察到的标签和预测的标签之间的错误率。我们使用称为“categorical crossentropy”的分类分类（&amp;gt;2 类）的特定形式。&lt;br&gt;最重要的功能是优化器。这个函数将迭代地改进参数（过滤核值、权重和神经元的偏差……）以最小化损失。&lt;br&gt;我选择了 RMSprop（带有默认值），它是一个非常有效的优化器。 RMSProp 更新以一种非常简单的方式调整 Adagrad 方法，试图降低其激进的、单调递减的学习率。我们也可以使用随机梯度下降 (‘sgd’) 优化器，但它比 RMSprop 慢。&lt;br&gt;度量函数“准确度”用于评估我们模型的性能。该度量函数类似于损失函数，只是在训练模型时不使用度量评估的结果（仅用于评估）。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;# Define the optimizer
optimizer = rmsprop_v2(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0) # 这里有一点问题，不能正常运行

# Compile the model
model.compile(optimizer = optimizer , loss = &#34;categorical_crossentropy&#34;, metrics=[&#34;accuracy&#34;])&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了使优化器更快收敛并最接近损失函数的全局最小值，我使用了学习率（LR）的退火方法。&lt;br&gt;LR 是优化器遍历“损失情况”的步骤。 LR越高，步数越大，收敛越快。然而，高 LR 的采样非常差，优化器可能会陷入局部最小值。&lt;br&gt;最好在训练期间降低学习率，以有效地达到损失函数的全局最小值。&lt;br&gt;为了保持高 LR 的快速计算时间的优势，我每 X 步（时期）动态降低 LR，这取决于是否有必要（当精度没有提高时）。&lt;br&gt;使用 Keras.callbacks 中的 ReduceLROnPlateau 函数，如果 3 个 epoch 后精度没有提高，我选择将 LR 减少一半。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# Set a learning rate annealer&lt;/span&gt;
learning_rate_reduction &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ReduceLROnPlateau&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;monitor&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;val_acc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                                            patience&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                                            verbose&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                                            factor&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                                            min_lr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.00001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
epochs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# Turn epochs to 30 to get 0.9967 accuracy&lt;/span&gt;
batch_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;86&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3、数据增加&#34;&gt;&lt;a href=&#34;#3、数据增加&#34; class=&#34;headerlink&#34; title=&#34;3、数据增加&#34;&gt;&lt;/a&gt;3、数据增加&lt;/h5&gt;&lt;p&gt;为了避免过拟合问题，我们需要人为地扩展我们的手写数字数据集。我们可以使您现有的数据集更大。这个想法是通过小的转换来改变训练数据，以重现当有人写数字时发生的变化。&lt;br&gt;比如数字不居中 比例不一样（有些人用大/小数字写） 图像旋转…&lt;br&gt;以改变数组表示同时保持标签相同的方式改变训练数据的方法被称为数据增强技术。人们使用的一些流行的增强是灰度、水平翻转、垂直翻转、随机裁剪、颜色抖动、平移、旋转等等。&lt;br&gt;通过将这些转换中的几个应用于我们的训练数据，我们可以轻松地将训练示例的数量增加一倍或三倍，并创建一个非常强大的模型。&lt;br&gt;改进很重要：&lt;br&gt;在没有数据增强的情况下，我获得了 98.114% 的准确率&lt;br&gt;通过数据增强，我达到了 99.67% 的准确率&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# With data augmentation to prevent overfitting (accuracy 0.99286)&lt;/span&gt;

datagen &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ImageDataGenerator&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
        featurewise_center&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# set input mean to 0 over the dataset&lt;/span&gt;
        samplewise_center&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# set each sample mean to 0&lt;/span&gt;
        featurewise_std_normalization&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# divide inputs by std of the dataset&lt;/span&gt;
        samplewise_std_normalization&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# divide each input by its std&lt;/span&gt;
        zca_whitening&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# apply ZCA whitening&lt;/span&gt;
        rotation_range&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# randomly rotate images in the range (degrees, 0 to 180)&lt;/span&gt;
        zoom_range &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# Randomly zoom image &lt;/span&gt;
        width_shift_range&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# randomly shift images horizontally (fraction of total width)&lt;/span&gt;
        height_shift_range&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# randomly shift images vertically (fraction of total height)&lt;/span&gt;
        horizontal_flip&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# randomly flip images&lt;/span&gt;
        vertical_flip&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# randomly flip images&lt;/span&gt;


datagen&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_train&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于数据扩充，我选择：&lt;br&gt;将一些训练图像随机旋转 10 度&lt;br&gt;一些训练图像随机缩放 10%&lt;br&gt;将图像水平随机移动 10% 的宽度&lt;br&gt;随机将图像垂直移动 10% 的高度&lt;br&gt;我没有应用vertical_flip 或horizontal_flip，因为它可能导致错误分类对称数字，例如6 和9。&lt;br&gt;一旦我们的模型准备好，我们就可以拟合训练数据集。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# Fit the model&lt;/span&gt;
history &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit_generator&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;datagen&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flow&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; batch_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                              epochs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; epochs&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; validation_data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_val&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y_val&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                              verbose &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; steps_per_epoch&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;X_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt; batch_size
                              &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; callbacks&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;learning_rate_reduction&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;四、评估模型&#34;&gt;&lt;a href=&#34;#四、评估模型&#34; class=&#34;headerlink&#34; title=&#34;四、评估模型&#34;&gt;&lt;/a&gt;四、评估模型&lt;/h4&gt;&lt;h5 id=&#34;1、训练和验证曲线-Training-and-validation-curves&#34;&gt;&lt;a href=&#34;#1、训练和验证曲线-Training-and-validation-curves&#34; class=&#34;headerlink&#34; title=&#34;1、训练和验证曲线-Training and validation curves&#34;&gt;&lt;/a&gt;1、训练和验证曲线-Training and validation curves&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;# Plot the loss and accuracy curves for training and validation 
fig, ax = plt.subplots(2,1)
ax[0].plot(history.history[&#39;loss&#39;], color=&#39;b&#39;, label=&#34;Training loss&#34;)
ax[0].plot(history.history[&#39;val_loss&#39;], color=&#39;r&#39;, label=&#34;validation loss&#34;,axes =ax[0])
legend = ax[0].legend(loc=&#39;best&#39;, shadow=True)

ax[1].plot(history.history[&#39;acc&#39;], color=&#39;b&#39;, label=&#34;Training accuracy&#34;)
ax[1].plot(history.history[&#39;val_acc&#39;], color=&#39;r&#39;,label=&#34;Validation accuracy&#34;)
legend = ax[1].legend(loc=&#39;best&#39;, shadow=True)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.混淆矩阵&lt;/p&gt;
&lt;p&gt;混淆矩阵对于查看您的模型缺陷非常有帮助。&lt;br&gt;我绘制了验证结果的混淆矩阵。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;# Look at confusion matrix 

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title=&#39;Confusion matrix&#39;,
                          cmap=plt.cm.Blues):
    &#34;&#34;&#34;
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    &#34;&#34;&#34;
    plt.imshow(cm, interpolation=&#39;nearest&#39;, cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype(&#39;float&#39;) / cm.sum(axis=1)[:, np.newaxis]

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment=&#34;center&#34;,
                 color=&#34;white&#34; if cm[i, j] &amp;gt; thresh else &#34;black&#34;)

    plt.tight_layout()
    plt.ylabel(&#39;True label&#39;)
    plt.xlabel(&#39;Predicted label&#39;)

# Predict the values from the validation dataset
Y_pred = model.predict(X_val)
# Convert predictions classes to one hot vectors 
Y_pred_classes = np.argmax(Y_pred,axis = 1) 
# Convert validation observations to one hot vectors
Y_true = np.argmax(Y_val,axis = 1) 
# compute the confusion matrix
confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) 
# plot the confusion matrix
plot_confusion_matrix(confusion_mtx, classes = range(10)) &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里我们可以看到，考虑到验证集（4200 张图像）的大小，我们的 CNN 在所有数字上的表现都非常好，几乎没有错误。&lt;br&gt;但是，我们的 CNN 似乎在 4 位上有一些小问题，嘿嘿被误分类为 9。有时当曲线平滑时很难捕捉到 4 和 9 之间的差异。&lt;/p&gt;
&lt;p&gt;让我们调查一下错误。&lt;br&gt;我想看看最重要的错误。为此，我需要得到结果中实际值概率与预测值概率之间的差异。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# Display some error results &lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# Errors are difference between predicted labels and true labels&lt;/span&gt;
errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Y_pred_classes &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; Y_true &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

Y_pred_classes_errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Y_pred_classes&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;errors&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
Y_pred_errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Y_pred&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;errors&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
Y_true_errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Y_true&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;errors&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
X_val_errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; X_val&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;errors&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;display_errors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;errors_index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;img_errors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;pred_errors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; obs_errors&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34; This function shows 6 images with their predicted and real labels&#34;&#34;&#34;&lt;/span&gt;
    n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
    nrows &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;
    ncols &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;
    fig&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;subplots&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nrows&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;ncols&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sharex&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sharey&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; row &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nrows&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; col &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ncols&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            error &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; errors_index&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
            ax&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;row&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;col&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;imshow&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img_errors&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
            ax&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;row&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;col&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Predicted label :{}\nTrue label :{}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pred_errors&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;obs_errors&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
            n &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# Probabilities of the wrong predicted numbers&lt;/span&gt;
Y_pred_errors_prob &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Y_pred_errors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;axis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# Predicted probabilities of the true values in the error set&lt;/span&gt;
true_prob_errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;diagonal&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;take&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Y_pred_errors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Y_true_errors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# Difference between the probability of the predicted label and the true label&lt;/span&gt;
delta_pred_true_errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Y_pred_errors_prob &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; true_prob_errors

&lt;span class=&#34;token comment&#34;&gt;# Sorted list of the delta prob errors&lt;/span&gt;
sorted_dela_errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argsort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;delta_pred_true_errors&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# Top 6 errors &lt;/span&gt;
most_important_errors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sorted_dela_errors&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# Show the top 6 errors&lt;/span&gt;
display_errors&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;most_important_errors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; X_val_errors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Y_pred_classes_errors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Y_true_errors&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最重要的错误也是最狡猾的。&lt;br&gt;对于这六个案例，该模型并不荒谬。其中一些错误也可能是人为的，特别是对于非常接近 4 的 9。最后的 9 也很容易产生误导，对我来说似乎是 0。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# predict results&lt;/span&gt;
results &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;predict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# select the indix with the maximum probability&lt;/span&gt;
results &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;results&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;axis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

results &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;results&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Label&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;submission &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ImageId&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;results&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;axis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

submission&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cnn_mnist_datagen.csv&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

</content>
        <category term="kaggle" />
        <category term="常见数据处理" />
        <updated>2022-03-25T10:35:26.000Z</updated>
    </entry>
    <entry>
        <id>https://www.kitx86.com/2022/03/25/pe-lists/</id>
        <title>PE-Lists</title>
        <link rel="alternate" href="https://www.kitx86.com/2022/03/25/pe-lists/"/>
        <content type="html">&lt;h4 id=&#34;One-Resolution（&#34;&gt;&lt;a href=&#34;#One-Resolution（&#34; class=&#34;headerlink&#34; title=&#34;One-Resolution（)&#34;&gt;&lt;/a&gt;One-Resolution（)&lt;/h4&gt;&lt;p&gt;check method : aspect / entry / weight&lt;/p&gt;
&lt;p&gt;娱乐：和朋友一起参加一次啤酒节 / 3&lt;/p&gt;
&lt;p&gt;娱乐：养两只宠物，一只橘猫，一只边牧 / 3&lt;/p&gt;
&lt;p&gt;娱乐：独自进行一次朝圣 / 2&lt;/p&gt;
&lt;p&gt;娱乐：一定要旁观参加一次 DEFCON 会议，弥补遗憾 / 3&lt;/p&gt;
&lt;p&gt;娱乐：希望去参加赛车比赛  / 3&lt;/p&gt;
&lt;p&gt;工作：去拜访 gilbert strang，在数学这方面他给我造成了一些影响，主要是他看起来比较有趣  / 4&lt;/p&gt;
&lt;p&gt;工作：研究生想去微软亚洲研究所（MSRA）实习 ，实习方向大致是 强化学习..AI系统开发/研究 / 5&lt;/p&gt;
&lt;p&gt;工作：去 google 42层工作一段时间，另外有可能就去 google brain lab 那里看看，张张领域见识，领教各界大神风采 / 5&lt;/p&gt;
&lt;p&gt;工作：博士阶段能在 MIT 那里做一段研究，导师： aram harrow，原因是近些年 HHL 那篇paper 较为出名，组也在招人 / 5&lt;/p&gt;
&lt;p&gt;工作：希望有一个在学业上一直挑我毛病的”朋友“，科研对手 / 6&lt;/p&gt;
&lt;p&gt;工作：毕业前完成我的设计 / 3&lt;/p&gt;
&lt;p&gt;工作：毕业前在kaggle上级别达到 grandmaster ,这个可能会改变，不确定因素 / 4&lt;/p&gt;
&lt;p&gt;娱乐：每天蹭朋友车在夕阳下弹一首符合心情的民谣回家（不喜欢开车，但喜欢开塞车，无证驾驶！）&lt;/p&gt;
&lt;p&gt;有一定资产后去收养一群孤儿，&lt;/p&gt;
&lt;p&gt;~~后续补充&lt;/p&gt;
&lt;p&gt;————————————————————————&lt;/p&gt;
&lt;p&gt;最大最大的奢望就是 诺贝尔物理奖或者图灵奖 / max&lt;/p&gt;
&lt;p&gt;还有很多很多坏毛病，不想改了。&lt;/p&gt;
</content>
        <category term="Personal" />
        <category term="Willing" />
        <updated>2022-03-25T04:02:15.000Z</updated>
    </entry>
</feed>
