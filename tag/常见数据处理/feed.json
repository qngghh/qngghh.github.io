{
    "version": "https://jsonfeed.org/version/1",
    "title": "Supernova • All posts by \"常见数据处理\" tag",
    "description": "小派过气画家",
    "home_page_url": "https://www.kitx86.com",
    "items": [
        {
            "id": "https://www.kitx86.com/2022/03/25/ml-dl-zhen-ming-ji-jiu/",
            "url": "https://www.kitx86.com/2022/03/25/ml-dl-zhen-ming-ji-jiu/",
            "title": "Ml-Dl-朕命急救",
            "date_published": "2022-03-25T10:35:26.000Z",
            "content_html": "<h4 id=\"一、竞赛预处理-整理的样板\"><a href=\"#一、竞赛预处理-整理的样板\" class=\"headerlink\" title=\"一、竞赛预处理-整理的样板\"></a>一、竞赛预处理-整理的样板</h4><h5 id=\"1、导入常见库\"><a href=\"#1、导入常见库\" class=\"headerlink\" title=\"1、导入常见库\"></a>1、导入常见库</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np  <span class=\"token comment\"># Linear algebra</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd <span class=\"token comment\"># data processing, CSV file I/O</span>\n\n\n——————————————————————————————图像数据处理部分———————————————————————————\n<span class=\"token comment\"># 内嵌绘图，可以省略 plt.show()</span>\n<span class=\"token operator\">%</span>matplotlib inline \n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt  \n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>image <span class=\"token keyword\">as</span> mpimg\n\n<span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\nplt<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">(</span><span class=\"token string\">'seaborn'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 显示风格</span>\nsns<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>style<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">=</span><span class=\"token string\">'notebook'</span><span class=\"token punctuation\">,</span> palette<span class=\"token operator\">=</span><span class=\"token string\">'deep'</span><span class=\"token punctuation\">)</span>\n\n——————————————————————————语言token处理部分——————————————————————————\n<span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS\n\n —————————————————————————可添加补充—————————————————————————————————    \n<span class=\"token keyword\">from</span> IPython<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>interactiveshell <span class=\"token keyword\">import</span> InteractiveShell <span class=\"token comment\"># idk</span>\nInteractiveShell<span class=\"token punctuation\">.</span>ast_node_interactivity <span class=\"token operator\">=</span> <span class=\"token string\">\"all\"</span> <span class=\"token comment\"># idk</span>\nplt<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'figure.figsize'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span>\nplt<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">(</span><span class=\"token string\">'fivethirtyeight'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 科学计算用的库，包含很多数学和算法的实例，吐槽~哪有这么多科学计算库</span>\n<span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> stats \n\n<span class=\"token comment\"># 数据集环境</span>\n<span class=\"token keyword\">for</span> dirname<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> filenames <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span><span class=\"token string\">'/kaggle/input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> filenmae <span class=\"token keyword\">in</span> filenames<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              \n<span class=\"token keyword\">def</span> <span class=\"token function\">highlight_max</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> props <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> np<span class=\"token punctuation\">.</span>nanmax<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># idk</span>\n\n\n\n<span class=\"token comment\"># 辅助工具</span>\n <span class=\"token comment\"># 迭代进度条，只是为了好看</span>\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm \n<span class=\"token comment\"># 看起来有点老的样子</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image \n\n        \n————————————————————————————————————————————————————————————————————\n<span class=\"token comment\"># 系统局部环境</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token comment\"># 垃圾回收机制</span>\n<span class=\"token keyword\">import</span> gc \n\n<span class=\"token comment\"># 建立深度模型所需要的</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Sequential \n<span class=\"token keyword\">from</span> keras <span class=\"token keyword\">import</span>  backend <span class=\"token keyword\">as</span> K <span class=\"token comment\"># idk</span>\n\n—————————————————————————————图像部分模型层的简易解释——————————————————————————————————\n<span class=\"token comment\"># Conv2D : 二维卷积层，互相关运算，可使用填充、步幅和多通道输入/输出</span>\n<span class=\"token comment\"># Dense : 稠密层</span>\n<span class=\"token comment\"># Dropout : 丢弃层</span>\n<span class=\"token comment\"># pool2d : 2维汇聚层，对汇聚窗口所有元素计算最大值或平均值，可使用填充、步幅和多通道输入/输出</span>\n<span class=\"token comment\"># Flatten : 平滑层</span>\n<span class=\"token comment\"># MaxPool2D : 二维汇聚计算最大值</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dense <span class=\"token punctuation\">,</span> Dropout <span class=\"token punctuation\">,</span> Lambda<span class=\"token punctuation\">,</span> Flatten Conv2D<span class=\"token punctuation\">,</span> MaxPool2D \n\n<span class=\"token comment\"># 优化函数 rmsprop_v2 , adam_v2</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>optimizers <span class=\"token keyword\">import</span> Adam <span class=\"token punctuation\">,</span>RMSprop\n<span class=\"token comment\"># 训练、验证数据分离</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split \n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> confusion_matrix <span class=\"token comment\"># idk</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>preprocessing<span class=\"token punctuation\">.</span>image <span class=\"token keyword\">import</span> ImageDataGenerator <span class=\"token comment\"># idk</span>\n\n——————————————————————————语言模型的部分解释—————————————————————————————————\n\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> LabelEncoder <span class=\"token comment\"># idk</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> StratifiedKFold <span class=\"token comment\"># idk</span>\n\n<span class=\"token keyword\">from</span> transformers <span class=\"token keyword\">import</span> AutoTokenizer<span class=\"token punctuation\">,</span> AutoConfig<span class=\"token punctuation\">,</span> AutoModel<span class=\"token punctuation\">,</span> get_linear_schedule_with_warmup \n\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>optim <span class=\"token keyword\">import</span> AdamW\n———————————————————————————————————————————————————————————————————————————\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>callbacks <span class=\"token keyword\">import</span> ReduceLROnPlateau <span class=\"token comment\"># idk</span>\n———————————————————————————————————忽略包环境的警告——————————————————————————\n<span class=\"token keyword\">import</span> warnings\nwarnings<span class=\"token punctuation\">.</span>filterwarnings<span class=\"token punctuation\">(</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span>\n\ndevice <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、检查环境状况</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> subprocess <span class=\"token keyword\">import</span> check_output\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../input\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"二、检查数据\"><a href=\"#二、检查数据\" class=\"headerlink\" title=\"二、检查数据\"></a>二、检查数据</h4><h5 id=\"1、加载提供的数据\"><a href=\"#1、加载提供的数据\" class=\"headerlink\" title=\"1、加载提供的数据\"></a>1、加载提供的数据</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/train.csv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 读入训练数据</span>\ntest <span class=\"token operator\">=</span> pd <span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/test.csv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 读入测试数据</span>\n\ntrain<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查看前面5行的信息</span>\ntrain<span class=\"token punctuation\">.</span>shape <span class=\"token comment\"># 返回整体 data 的 的信息</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Shape Dtrain:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Shape Dtest: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unique elements per column\"</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">.</span>nunique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Missing Value?\"</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n————————————————————————图像数据处理方法————————————————————————————\nX_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 形成array数组 </span>\ny_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 28*28 的值</span>\nX_test <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n\n\n———————————————————————————— 技巧 <span class=\"token punctuation\">(</span>tricks<span class=\"token punctuation\">)</span> ————————————————————————\n<span class=\"token comment\"># 一些技巧 - tricks</span>\n<span class=\"token keyword\">del</span> train <span class=\"token comment\"># can free some space ?</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2、数据可视化\"><a href=\"#2、数据可视化\" class=\"headerlink\" title=\"2、数据可视化\"></a>2、数据可视化</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># method 1</span>\nX_train <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 转变数据为图片，重新组织形状</span>\n\n<span class=\"token comment\"># method 2 : Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)</span>\nX_train <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n————————————————————————————————————————————————————————————————\nY_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 只取值的那一列标签</span>\nX_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span>labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 不要值的那一列作为训练数据</span>\ncount <span class=\"token operator\">=</span> sns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>Y_train<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计算 1-10 的数量</span>\nY_train<span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 柱状图显示 1 - 10 的数量</span>\n————————————————————————————————————————————————————————————————\n\ntop <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>anc <span class=\"token keyword\">for</span> anc <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Counter 计数标签'anchor'</span>\ntop <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取得前面 50 个</span>\n\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 绘制图表尺寸</span>\n\nsns<span class=\"token punctuation\">.</span>barplot<span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> palette <span class=\"token operator\">=</span> <span class=\"token string\">'hls'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 调色板为 hls</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>rotation <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x 轴标签可以做出一些调整</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Top 50 First Phrases (Anchor)\"</span><span class=\"token punctuation\">,</span> fontsize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n————————————————————————————————————————————————————————————————<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404083846939.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntext_len <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nsns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>text_len<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">'Word Count Distribution'</span><span class=\"token punctuation\">,</span>size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这还要取设置大小？</span>\n\navg_word_len <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 看起来这位小哥很喜欢 用 lambda 演算，分离 anchor 里的词向量来计算平均长度</span>\nsns<span class=\"token punctuation\">.</span>histplot<span class=\"token punctuation\">(</span>avg_word_len<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kde <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'#ffa408'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># kde 是开启核密度函数？,我只是看到一条线啊</span>\nax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">'Average Word Length Distribution'</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404091257020.png\"></p>\n<h2 id=\"时尚词云的display，需要配合图片组合\"><a href=\"#时尚词云的display，需要配合图片组合\" class=\"headerlink\" title=\"时尚词云的display，需要配合图片组合\"></a>时尚词云的display，需要配合图片组合</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntext <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'./img.png'</span>\n<span class=\"token comment\"># url = 'https://static.vecteezy.com/system/resources/previews/000/263/280/non_2x/vector-open-book.jpg'</span>\n<span class=\"token comment\"># 我不知道为什么链接不能有效打开</span>\nim <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 所以我只能用我自己的方式来打开</span>\n<span class=\"token comment\"># im = np.array(Image.open(requests.get(url, stream=True).raw))</span>\ncloud <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span>stopwords <span class=\"token operator\">=</span> STOPWORDS<span class=\"token punctuation\">,</span>\n                  background_color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span>\n                  mask <span class=\"token operator\">=</span> im<span class=\"token punctuation\">,</span>\n                  max_words <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>cloud<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093146238.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 针对上面的 anchor 的特征来对 target 的信息抽取</span>\n<span class=\"token comment\"># 只需要把 anchor 替换成 taraget ,action ! </span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093640583.png\"></p>\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093717734.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 看起来这个好像是 cm 来计量的</span>\nsns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">'context'</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> train<span class=\"token punctuation\">,</span> palette <span class=\"token operator\">=</span> <span class=\"token string\">'hls'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 又来计算 context 的信息，但看起来特征 context 的信息有点多啊</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>rotation <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Distribution of Context'</span><span class=\"token punctuation\">,</span> fontsize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404094416376.png\"></p>\n<h6 id=\"3、特征标准化\"><a href=\"#3、特征标准化\" class=\"headerlink\" title=\"3、特征标准化\"></a>3、特征标准化</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># method 1 : </span>\nmean_px <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 求其均值作为 np 的 float32 格式</span>\nstd_px <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span> \t\t<span class=\"token comment\"># 求其标准差作为 np 的 float32 格式</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">standardize</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>mean_px<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>std_px\n\n<span class=\"token comment\"># method 2 : Normalize the data</span>\nX_train <span class=\"token operator\">=</span> X_train <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span>\ntest <span class=\"token operator\">=</span> test <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"4、检查数据和缺失值\"><a href=\"#4、检查数据和缺失值\" class=\"headerlink\" title=\"4、检查数据和缺失值\"></a>4、检查数据和缺失值</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Check the data</span>\nX_train<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Encode labels to one hot vectors (ex : 2 -&gt; [0,0,1,0,0,0,0,0,0,0])</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>np_utils <span class=\"token keyword\">import</span> to_categorica\nY_train <span class=\"token operator\">=</span> to_categorical<span class=\"token punctuation\">(</span>Y_train<span class=\"token punctuation\">,</span> num_classes <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Set the random seed</span>\nrandom_seed <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\"># Split the train and the validation set for the fitting</span>\nX_train<span class=\"token punctuation\">,</span> X_val<span class=\"token punctuation\">,</span> Y_train<span class=\"token punctuation\">,</span> Y_val <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> Y_train<span class=\"token punctuation\">,</span> test_size <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span>random_seed<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 查看一个例子</span>\ng <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n——————————————————————————————————————————————————————————————————USPPM\nencoder <span class=\"token operator\">=</span> LabelEncoder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">[</span><span class=\"token string\">'score_encoded'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">[</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这里的 0 对应于 label 是 0，0.25 对应于 1 ，0.5 对应于 2。以此类推...</span>\nskf <span class=\"token operator\">=</span> StratifiedKFold<span class=\"token punctuation\">(</span>n_splits <span class=\"token operator\">=</span> CONFIG<span class=\"token punctuation\">.</span>num_fold<span class=\"token punctuation\">,</span>shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>random_state <span class=\"token operator\">=</span> CONFIG<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 分层k折</span>\n<span class=\"token comment\"># num_fold = 5, seed = 2022</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> val_ind<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>skf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>X <span class=\"token operator\">=</span> train<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'score_encoded'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># enumerate 中分离出来的数据是 下标 加上 train 中的值</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_ind<span class=\"token punctuation\">)</span> <span class=\"token comment\"># idk</span>\n    train<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>val_ind<span class=\"token punctuation\">,</span><span class=\"token string\">'fold'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k <span class=\"token comment\"># 将 val_ind 的下标分别 贴上 k 标志</span>\n    <span class=\"token comment\"># 通过行索引 index 中的具体值来取行数据</span>\n    <span class=\"token comment\"># iloc 是通过 行号来取行数据</span>\n<span class=\"token comment\">################# 效果还不错 ###################</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">2</span>    <span class=\"token number\">11</span>    <span class=\"token number\">13</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36468</span> <span class=\"token number\">36469</span> <span class=\"token number\">36470</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">0</span>     <span class=\"token number\">3</span>     <span class=\"token number\">5</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36459</span> <span class=\"token number\">36464</span> <span class=\"token number\">36467</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">6</span>    <span class=\"token number\">10</span>    <span class=\"token number\">14</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36465</span> <span class=\"token number\">36471</span> <span class=\"token number\">36472</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">4</span>    <span class=\"token number\">21</span>    <span class=\"token number\">26</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36457</span> <span class=\"token number\">36462</span> <span class=\"token number\">36466</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">1</span>     <span class=\"token number\">8</span>     <span class=\"token number\">9</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36455</span> <span class=\"token number\">36456</span> <span class=\"token number\">36460</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">###############################################</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"7-添加数据标签\"><a href=\"#7-添加数据标签\" class=\"headerlink\" title=\"7.添加数据标签\"></a>7.添加数据标签</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train<span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'context'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>df_cpc<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"我认为比较重要的数据集类\"><a href=\"#我认为比较重要的数据集类\" class=\"headerlink\" title=\"我认为比较重要的数据集类\"></a>我认为比较重要的数据集类</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dataset</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Dataset(data)\n      data (np.array or list-like): input_ids and y\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>max_length <span class=\"token operator\">=</span> max_length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Padding to max_length</span>\n        d <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">)</span>\n\n        input_ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        input_ids<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span>\n\n        attention_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        attention_mask<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">:</span> input_ids<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'attention_mask'</span><span class=\"token punctuation\">:</span> attention_mask<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Tokenize\"><a href=\"#Tokenize\" class=\"headerlink\" title=\"Tokenize\"></a>Tokenize</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_data</span><span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">,</span> tokenizer<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Create input_ids and label array y\n\n    Args:\n      train (pd.DataFrame)\n\n    Returns: list[dict]\n      input_ids (np.array[int])\n      n (int): seq length or number of tokens\n    \"\"\"</span>\n    sep <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>sep_token_id\n    <span class=\"token keyword\">if</span> tokenizer<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__ <span class=\"token operator\">==</span> <span class=\"token string\">'RobertaTokenizerFast'</span><span class=\"token punctuation\">:</span>\n        nsep <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        nsep <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        \n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> r <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">.</span>iterrows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        text <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>pn_history\n        feature_text <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>feature_text\n\n        o <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> feature_text<span class=\"token punctuation\">,</span>\n                      add_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span>max_length<span class=\"token punctuation\">,</span>\n                      truncation<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                      return_offsets_mapping<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Input ids</span>\n        input_ids <span class=\"token operator\">=</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_ids<span class=\"token punctuation\">)</span>\n\n        input_ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>input_ids <span class=\"token operator\">==</span> sep<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nsep  <span class=\"token comment\"># text and feature_text seperated by [SEP]; sep sep for roberta</span>\n        \n        <span class=\"token comment\"># Attention mask</span>\n        attention_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">'attention_mask'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>attention_mask <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'row_id'</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">:</span> input_ids<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'offset_mapping'</span><span class=\"token punctuation\">:</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">'offset_mapping'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> model_dir<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> dropout<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> pretrained<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        config <span class=\"token operator\">=</span> AutoConfig<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>model_dir<span class=\"token punctuation\">,</span> add_pooling_layer<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> pretrained<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> AutoModel<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>model_dir<span class=\"token punctuation\">,</span> config<span class=\"token operator\">=</span>config<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> AutoModel<span class=\"token punctuation\">.</span>from_config<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>fc_dropout <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>dropout<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>_init_weights<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_init_weights</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        module<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>normal_<span class=\"token punctuation\">(</span>mean<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>initializer_range<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> module<span class=\"token punctuation\">.</span>bias <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            module<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>zero_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_ids<span class=\"token punctuation\">,</span> attention_mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">(</span>input_ids<span class=\"token punctuation\">,</span> attention_mask<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> out<span class=\"token punctuation\">[</span><span class=\"token string\">'last_hidden_state'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># batch_size x max_length (512) x 768</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc_dropout<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"三、建立模型（CNN、\"><a href=\"#三、建立模型（CNN、\" class=\"headerlink\" title=\"三、建立模型（CNN、)\"></a>三、建立模型（CNN、)</h4><h5 id=\"1、model\"><a href=\"#1、model\" class=\"headerlink\" title=\"1、model\"></a>1、model</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># A CNN model example</span>\nmodel <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>MaxPool2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>MaxPool2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">\"relu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">\"softmax\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2、后续运作步骤\"><a href=\"#2、后续运作步骤\" class=\"headerlink\" title=\"2、后续运作步骤\"></a>2、后续运作步骤</h5><p>一旦我们的层被添加到模型中，我们需要设置一个评分函数、一个损失函数和一个优化算法。<br>我们定义损失函数来衡量我们的模型在具有已知标签的图像上的表现有多差。它是观察到的标签和预测的标签之间的错误率。我们使用称为“categorical crossentropy”的分类分类（&gt;2 类）的特定形式。<br>最重要的功能是优化器。这个函数将迭代地改进参数（过滤核值、权重和神经元的偏差……）以最小化损失。<br>我选择了 RMSprop（带有默认值），它是一个非常有效的优化器。 RMSProp 更新以一种非常简单的方式调整 Adagrad 方法，试图降低其激进的、单调递减的学习率。我们也可以使用随机梯度下降 (‘sgd’) 优化器，但它比 RMSprop 慢。<br>度量函数“准确度”用于评估我们模型的性能。该度量函数类似于损失函数，只是在训练模型时不使用度量评估的结果（仅用于评估）。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># Define the optimizer\noptimizer = rmsprop_v2(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0) # 这里有一点问题，不能正常运行\n\n# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了使优化器更快收敛并最接近损失函数的全局最小值，我使用了学习率（LR）的退火方法。<br>LR 是优化器遍历“损失情况”的步骤。 LR越高，步数越大，收敛越快。然而，高 LR 的采样非常差，优化器可能会陷入局部最小值。<br>最好在训练期间降低学习率，以有效地达到损失函数的全局最小值。<br>为了保持高 LR 的快速计算时间的优势，我每 X 步（时期）动态降低 LR，这取决于是否有必要（当精度没有提高时）。<br>使用 Keras.callbacks 中的 ReduceLROnPlateau 函数，如果 3 个 epoch 后精度没有提高，我选择将 LR 减少一半。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Set a learning rate annealer</span>\nlearning_rate_reduction <span class=\"token operator\">=</span> ReduceLROnPlateau<span class=\"token punctuation\">(</span>monitor<span class=\"token operator\">=</span><span class=\"token string\">'val_acc'</span><span class=\"token punctuation\">,</span> \n                                            patience<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> \n                                            verbose<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n                                            factor<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> \n                                            min_lr<span class=\"token operator\">=</span><span class=\"token number\">0.00001</span><span class=\"token punctuation\">)</span>\nepochs <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># Turn epochs to 30 to get 0.9967 accuracy</span>\nbatch_size <span class=\"token operator\">=</span> <span class=\"token number\">86</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"3、数据增加\"><a href=\"#3、数据增加\" class=\"headerlink\" title=\"3、数据增加\"></a>3、数据增加</h5><p>为了避免过拟合问题，我们需要人为地扩展我们的手写数字数据集。我们可以使您现有的数据集更大。这个想法是通过小的转换来改变训练数据，以重现当有人写数字时发生的变化。<br>比如数字不居中 比例不一样（有些人用大/小数字写） 图像旋转…<br>以改变数组表示同时保持标签相同的方式改变训练数据的方法被称为数据增强技术。人们使用的一些流行的增强是灰度、水平翻转、垂直翻转、随机裁剪、颜色抖动、平移、旋转等等。<br>通过将这些转换中的几个应用于我们的训练数据，我们可以轻松地将训练示例的数量增加一倍或三倍，并创建一个非常强大的模型。<br>改进很重要：<br>在没有数据增强的情况下，我获得了 98.114% 的准确率<br>通过数据增强，我达到了 99.67% 的准确率</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># With data augmentation to prevent overfitting (accuracy 0.99286)</span>\n\ndatagen <span class=\"token operator\">=</span> ImageDataGenerator<span class=\"token punctuation\">(</span>\n        featurewise_center<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># set input mean to 0 over the dataset</span>\n        samplewise_center<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># set each sample mean to 0</span>\n        featurewise_std_normalization<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># divide inputs by std of the dataset</span>\n        samplewise_std_normalization<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># divide each input by its std</span>\n        zca_whitening<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># apply ZCA whitening</span>\n        rotation_range<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly rotate images in the range (degrees, 0 to 180)</span>\n        zoom_range <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># Randomly zoom image </span>\n        width_shift_range<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly shift images horizontally (fraction of total width)</span>\n        height_shift_range<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly shift images vertically (fraction of total height)</span>\n        horizontal_flip<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly flip images</span>\n        vertical_flip<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># randomly flip images</span>\n\n\ndatagen<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于数据扩充，我选择：<br>将一些训练图像随机旋转 10 度<br>一些训练图像随机缩放 10%<br>将图像水平随机移动 10% 的宽度<br>随机将图像垂直移动 10% 的高度<br>我没有应用vertical_flip 或horizontal_flip，因为它可能导致错误分类对称数字，例如6 和9。<br>一旦我们的模型准备好，我们就可以拟合训练数据集。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Fit the model</span>\nhistory <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>fit_generator<span class=\"token punctuation\">(</span>datagen<span class=\"token punctuation\">.</span>flow<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span>Y_train<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                              epochs <span class=\"token operator\">=</span> epochs<span class=\"token punctuation\">,</span> validation_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>X_val<span class=\"token punctuation\">,</span>Y_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                              verbose <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> steps_per_epoch<span class=\"token operator\">=</span>X_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> batch_size\n                              <span class=\"token punctuation\">,</span> callbacks<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>learning_rate_reduction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"四、评估模型\"><a href=\"#四、评估模型\" class=\"headerlink\" title=\"四、评估模型\"></a>四、评估模型</h4><h5 id=\"1、训练和验证曲线-Training-and-validation-curves\"><a href=\"#1、训练和验证曲线-Training-and-validation-curves\" class=\"headerlink\" title=\"1、训练和验证曲线-Training and validation curves\"></a>1、训练和验证曲线-Training and validation curves</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2.混淆矩阵</p>\n<p>混淆矩阵对于查看您的模型缺陷非常有帮助。<br>我绘制了验证结果的混淆矩阵。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] &gt; thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这里我们可以看到，考虑到验证集（4200 张图像）的大小，我们的 CNN 在所有数字上的表现都非常好，几乎没有错误。<br>但是，我们的 CNN 似乎在 4 位上有一些小问题，嘿嘿被误分类为 9。有时当曲线平滑时很难捕捉到 4 和 9 之间的差异。</p>\n<p>让我们调查一下错误。<br>我想看看最重要的错误。为此，我需要得到结果中实际值概率与预测值概率之间的差异。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Display some error results </span>\n\n<span class=\"token comment\"># Errors are difference between predicted labels and true labels</span>\nerrors <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Y_pred_classes <span class=\"token operator\">-</span> Y_true <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nY_pred_classes_errors <span class=\"token operator\">=</span> Y_pred_classes<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nY_pred_errors <span class=\"token operator\">=</span> Y_pred<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nY_true_errors <span class=\"token operator\">=</span> Y_true<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nX_val_errors <span class=\"token operator\">=</span> X_val<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">display_errors</span><span class=\"token punctuation\">(</span>errors_index<span class=\"token punctuation\">,</span>img_errors<span class=\"token punctuation\">,</span>pred_errors<span class=\"token punctuation\">,</span> obs_errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" This function shows 6 images with their predicted and real labels\"\"\"</span>\n    n <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    nrows <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    ncols <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>nrows<span class=\"token punctuation\">,</span>ncols<span class=\"token punctuation\">,</span>sharex<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>sharey<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>nrows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ncols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            error <span class=\"token operator\">=</span> errors_index<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n            ax<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>img_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            ax<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Predicted label :{}\\nTrue label :{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>pred_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>obs_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\"># Probabilities of the wrong predicted numbers</span>\nY_pred_errors_prob <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>Y_pred_errors<span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Predicted probabilities of the true values in the error set</span>\ntrue_prob_errors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>diagonal<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>take<span class=\"token punctuation\">(</span>Y_pred_errors<span class=\"token punctuation\">,</span> Y_true_errors<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Difference between the probability of the predicted label and the true label</span>\ndelta_pred_true_errors <span class=\"token operator\">=</span> Y_pred_errors_prob <span class=\"token operator\">-</span> true_prob_errors\n\n<span class=\"token comment\"># Sorted list of the delta prob errors</span>\nsorted_dela_errors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>delta_pred_true_errors<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Top 6 errors </span>\nmost_important_errors <span class=\"token operator\">=</span> sorted_dela_errors<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Show the top 6 errors</span>\ndisplay_errors<span class=\"token punctuation\">(</span>most_important_errors<span class=\"token punctuation\">,</span> X_val_errors<span class=\"token punctuation\">,</span> Y_pred_classes_errors<span class=\"token punctuation\">,</span> Y_true_errors<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最重要的错误也是最狡猾的。<br>对于这六个案例，该模型并不荒谬。其中一些错误也可能是人为的，特别是对于非常接近 4 的 9。最后的 9 也很容易产生误导，对我来说似乎是 0。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># predict results</span>\nresults <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># select the indix with the maximum probability</span>\nresults <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nresults <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Label\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">submission <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"ImageId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>results<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nsubmission<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"cnn_mnist_datagen.csv\"</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "kaggle",
                "常见数据处理"
            ]
        }
    ]
}