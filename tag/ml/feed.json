{
    "version": "https://jsonfeed.org/version/1",
    "title": "Supernova • All posts by \"ml\" tag",
    "description": "小派过气画家",
    "home_page_url": "https://www.kitx86.com",
    "items": [
        {
            "id": "https://www.kitx86.com/2022/04/15/ml-dl-kfold-yan-zheng/",
            "url": "https://www.kitx86.com/2022/04/15/ml-dl-kfold-yan-zheng/",
            "title": "ML-DL-kFold验证",
            "date_published": "2022-04-14T19:17:12.000Z",
            "content_html": "<h3 id=\"训练方法\"><a href=\"#训练方法\" class=\"headerlink\" title=\"训练方法\"></a>训练方法</h3><p>k-fold验证是在训练模型的时候普遍使用的策略，在训练集上随机划分数个模块，一般分为5折，其中一折是验证集，另外四折是训练集，循环迭代5次，最后对做模型集成加权平均，特征工程里对于划分也有很细致的划分，但这里就不详细述说了，有基础的读者应该知道。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_folds</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> num_splits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># we create a new column called kfold and fill it with -1</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token string\">\"fold\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    \n    <span class=\"token comment\"># the next step is to randomize the rows of the data</span>\n    <span class=\"token comment\"># data = data.sample(frac=1).reset_index(drop=True)</span>\n\n    <span class=\"token comment\"># calculate number of bins by Sturge's rule</span>\n    <span class=\"token comment\"># I take the floor of the value, you can also</span>\n    <span class=\"token comment\"># just round it</span>\n    <span class=\"token comment\"># num_bins = int(np.floor(1 + np.log2(len(data))))</span>\n    \n    <span class=\"token comment\"># bin targets</span>\n    data<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bins\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>\n        data<span class=\"token punctuation\">[</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bins<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> labels<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n    <span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># initiate the kfold class from model_selection module</span>\n    kf <span class=\"token operator\">=</span> StratifiedKFold<span class=\"token punctuation\">(</span>n_splits<span class=\"token operator\">=</span>num_splits<span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># fill the new kfold column</span>\n    <span class=\"token comment\"># note that, instead of targets, we use bins!</span>\n    <span class=\"token keyword\">for</span> f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>t_<span class=\"token punctuation\">,</span> v_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>kf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>X<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span>data<span class=\"token punctuation\">.</span>bins<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>v_<span class=\"token punctuation\">,</span> <span class=\"token string\">'fold'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f\n    \n    <span class=\"token comment\"># drop the bins column</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token string\">\"bins\"</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># return dataframe with folds</span>\n    <span class=\"token keyword\">return</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "ML",
                "DL"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/17/ml-dl-asamplemodel/",
            "url": "https://www.kitx86.com/2022/03/17/ml-dl-asamplemodel/",
            "title": "ML-DL-ASampleModel",
            "date_published": "2022-03-17T04:08:09.000Z",
            "content_html": "<h4 id=\"lt-逍遥游-gt\"><a href=\"#lt-逍遥游-gt\" class=\"headerlink\" title=\"<逍遥游>\"></a>&lt;逍遥游&gt;</h4><p> 在 kaggle coursea上写的一个简易模型，没有包含太多的技术水平，凉这了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np <span class=\"token comment\"># linear algebra</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd <span class=\"token comment\"># data processing, CSV file I/O (e.g. pd.read_csv)</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeRegressor  <span class=\"token comment\"># 决策树</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_absolute_error <span class=\"token comment\"># 绝对均值误差</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split <span class=\"token comment\"># 训练测试分离</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> RandomForestRegressor <span class=\"token comment\"># 随机森林</span>\n\n<span class=\"token comment\"># 读入数据</span>\ntrain <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'./train.csv'</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'./test.csv'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 训练集的统计</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">test<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 要预测  SalePrice</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train<span class=\"token punctuation\">.</span>columns  <span class=\"token comment\"># check columns infos</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">test<span class=\"token punctuation\">.</span>columns <span class=\"token comment\"># here have benn means to  predict \"SalePrice\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">feature_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"LotArea\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"YearBuilt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1stFlrSF\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2ndFlrSF\"</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token string\">\"FullBath\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BedroomAbvGr\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"TotRmsAbvGrd\"</span><span class=\"token punctuation\">]</span>\nX <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span>feature_names<span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>SalePrice<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">wrong_model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># build model</span>\n\n<span class=\"token comment\"># fit the model</span>\nwrong_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># make predictions</span>\npredictions <span class=\"token operator\">=</span> wrong_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>predictions<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># split in and uncomment</span>\ntrain_X<span class=\"token punctuation\">,</span> val_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">,</span> val_y <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># specify the model</span>\nafter_model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># fit after_model with training data.</span>\nafter_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">val_predictions <span class=\"token operator\">=</span> after_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_predictions<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">val_mae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">,</span>val_predictions<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_mae<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># we will write the mean_absolute_error as a function</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_mae</span><span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token punctuation\">,</span>train_X<span class=\"token punctuation\">,</span>val_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">,</span>val_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token operator\">=</span>max_leaf_nodes<span class=\"token punctuation\">,</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">)</span>\n    preds_val <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\n    mae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">,</span>preds_val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mae<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">candidate_max_leaf_nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># write loop to find the ideal tree size</span>\n<span class=\"token comment\"># intermediate for loop writing</span>\n\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>leaf_size<span class=\"token punctuation\">:</span> get_mae<span class=\"token punctuation\">(</span>leaf_size<span class=\"token punctuation\">,</span>train_X<span class=\"token punctuation\">,</span>val_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">,</span>val_y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> leaf_size <span class=\"token keyword\">in</span> candidate_max_leaf_nodes<span class=\"token punctuation\">}</span>\nbest_tree_size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">,</span>key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> scores<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>best_tree_size<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># write the final model with fill n arguments</span>\nfinal_model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token operator\">=</span>best_tree_size<span class=\"token punctuation\">,</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nfinal_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\nfinal_test <span class=\"token operator\">=</span> final_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\nfinal_test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># try use the rf-model</span>\nrf_model <span class=\"token operator\">=</span> RandomForestRegressor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrf_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span>train_y<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># this is me write down a corresponding right trick</span>\nrf_val_mae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>rf_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>val_y<span class=\"token punctuation\">)</span>\nrf_val_mae<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">final_predictions <span class=\"token operator\">=</span> rf_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># check the predictions</span>\nfinal_predictions<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">output <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Id'</span><span class=\"token punctuation\">:</span> test_data<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span>\n                       <span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">:</span> test_preds<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\noutput<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'submission.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4>",
            "tags": [
                "kaggle",
                "ML"
            ]
        }
    ]
}