{
    "version": "https://jsonfeed.org/version/1",
    "title": "Supernova",
    "description": "小派过气画家",
    "home_page_url": "https://www.kitx86.com",
    "items": [
        {
            "id": "https://www.kitx86.com/2022/05/09/ml-dl-kaggle-zheng-que-yong-fa/",
            "url": "https://www.kitx86.com/2022/05/09/ml-dl-kaggle-zheng-que-yong-fa/",
            "title": "ML-Dl-kaggle正确用法",
            "date_published": "2022-05-09T08:19:32.000Z",
            "content_html": "<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><p>想写的时候就来，不想 push 自己，没有新意</p>\n",
            "tags": [
                "Noince",
                "advance"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/05/07/pe-update-2/",
            "url": "https://www.kitx86.com/2022/05/07/pe-update-2/",
            "title": "PE-update-2",
            "date_published": "2022-05-07T08:35:00.000Z",
            "content_html": "<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><p>今天的感jo是没得什么能够拦住我，思绪飘在了固定的方向，有太多太多想去做的啦。</p>\n<p>想建立一个工作室给大家带来快乐，想去创业建立我的时代，想去和那些互联网头目碰撞，想安心在学术氛围浓厚的地方做研究</p>\n",
            "tags": [
                "日记"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/05/04/pe-niao-lei-si-yang-ji/",
            "url": "https://www.kitx86.com/2022/05/04/pe-niao-lei-si-yang-ji/",
            "title": "PE-鸟类饲养记",
            "date_published": "2022-05-04T08:38:21.000Z",
            "content_html": "<h3 id=\"致叛逆的-Big-Bird：\"><a href=\"#致叛逆的-Big-Bird：\" class=\"headerlink\" title=\"致叛逆的 Big Bird：\"></a>致叛逆的 Big Bird：</h3><p>看起来似乎好活泼好动，却毫不为我所提供的六星级豪华别墅所动，满眼都崇尚外面的点滴一方世界，留不住的也会莫名的流露出一丝丝不忍心。</p>\n<p>自私的热切关心并不会改变什么，我并不失落，因为这结果我可以预见，另一种结果是毫不留情直接炖了，依赖达尔文所说的生物进化的基础是自然选择，这并不残忍</p>\n<p>但为什么产生了一点点空虚呢，解析不出来。</p>\n<p>——————————————————</p>\n<p>从一只鸟的观察联系到人际交流，关心会对一个人付出自己脆落的琉璃心，即使是孤赖调皮的人也不例外。</p>\n<p><img src=\"/IMG_20220504_155927.jpg\"></p>\n",
            "tags": [
                "饲养记"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/05/02/pe-zhen-zhi-zhi-yi/",
            "url": "https://www.kitx86.com/2022/05/02/pe-zhen-zhi-zhi-yi/",
            "title": "PE-朕之旨意",
            "date_published": "2022-05-02T07:37:26.000Z",
            "content_html": "<h3 id=\"内篇-amp-amp-逍遥游\"><a href=\"#内篇-amp-amp-逍遥游\" class=\"headerlink\" title=\"内篇&amp;&amp;逍遥游\"></a>内篇&amp;&amp;逍遥游</h3><p>以后尝试去写几本书</p>\n<p>一本讲机器学习和深度学习的，一定不要写的太厚，因为对于像我这样慢性精读的人来说就非常折磨，还没到跟自己过不去的时候。</p>\n<p>一本讲我对量子计算与信息的探索，这是个大课题，得很久啦。</p>\n<p>最后一本是我的手绘本，想了一个比较中二的名字，[研究者的手绘本：异构认识世界]</p>\n<p>最后的一点点是，即使有想放弃当初的部分热衷，要燃起对自己的热爱，因为还有可能，我可给以无聊的世界带来乐趣。</p>\n",
            "tags": [
                "微不足道的贡献"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/05/02/pe-update-0/",
            "url": "https://www.kitx86.com/2022/05/02/pe-update-0/",
            "title": "PE-update-0",
            "date_published": "2022-05-01T16:34:01.000Z",
            "content_html": "<h3 id=\"内篇-amp-amp-人间世\"><a href=\"#内篇-amp-amp-人间世\" class=\"headerlink\" title=\"内篇&amp;&amp;人间世\"></a>内篇&amp;&amp;人间世</h3><p>每天早上迷迷糊糊的起床排队抢显卡显得我很窘迫、多余，现在是早上 0.36，上线排队等 TPU中……</p>\n",
            "tags": [
                "日记"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/26/pe-update-1/",
            "url": "https://www.kitx86.com/2022/04/26/pe-update-1/",
            "title": "PE-update-1",
            "date_published": "2022-04-26T06:39:01.000Z",
            "content_html": "<h3 id=\"往日续谈\"><a href=\"#往日续谈\" class=\"headerlink\" title=\"往日续谈\"></a>往日续谈</h3><p>年轻的时候当然会觉得做 hacker 是最帅的，会写代码负荷攻击，游荡在外面危险而又迷人的神秘背影怎能不让人心动。</p>\n",
            "tags": [
                "日记"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/15/ml-dl-kfold-yan-zheng/",
            "url": "https://www.kitx86.com/2022/04/15/ml-dl-kfold-yan-zheng/",
            "title": "ML-DL-kFold验证",
            "date_published": "2022-04-14T19:17:12.000Z",
            "content_html": "<h3 id=\"训练方法\"><a href=\"#训练方法\" class=\"headerlink\" title=\"训练方法\"></a>训练方法</h3><p>k-fold验证是在训练模型的时候普遍使用的策略，在训练集上随机划分数个模块，一般分为5折，其中一折是验证集，另外四折是训练集，循环迭代5次，最后对做模型集成加权平均，特征工程里对于划分也有很细致的划分，但这里就不详细述说了，有基础的读者应该知道。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_folds</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> num_splits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># we create a new column called kfold and fill it with -1</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token string\">\"fold\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    \n    <span class=\"token comment\"># the next step is to randomize the rows of the data</span>\n    <span class=\"token comment\"># data = data.sample(frac=1).reset_index(drop=True)</span>\n\n    <span class=\"token comment\"># calculate number of bins by Sturge's rule</span>\n    <span class=\"token comment\"># I take the floor of the value, you can also</span>\n    <span class=\"token comment\"># just round it</span>\n    <span class=\"token comment\"># num_bins = int(np.floor(1 + np.log2(len(data))))</span>\n    \n    <span class=\"token comment\"># bin targets</span>\n    data<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bins\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span>\n        data<span class=\"token punctuation\">[</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bins<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> labels<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n    <span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># initiate the kfold class from model_selection module</span>\n    kf <span class=\"token operator\">=</span> StratifiedKFold<span class=\"token punctuation\">(</span>n_splits<span class=\"token operator\">=</span>num_splits<span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># fill the new kfold column</span>\n    <span class=\"token comment\"># note that, instead of targets, we use bins!</span>\n    <span class=\"token keyword\">for</span> f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>t_<span class=\"token punctuation\">,</span> v_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>kf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>X<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span>data<span class=\"token punctuation\">.</span>bins<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>v_<span class=\"token punctuation\">,</span> <span class=\"token string\">'fold'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f\n    \n    <span class=\"token comment\"># drop the bins column</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token string\">\"bins\"</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># return dataframe with folds</span>\n    <span class=\"token keyword\">return</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "ML",
                "DL"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/13/hello-world/",
            "url": "https://www.kitx86.com/2022/04/13/hello-world/",
            "title": "Hello World",
            "date_published": "2022-04-12T23:50:55.187Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "https://www.kitx86.com/2022/04/11/ml-dl-kagglecompetem/",
            "url": "https://www.kitx86.com/2022/04/11/ml-dl-kagglecompetem/",
            "title": "ML-DL-KaggleCompeTem",
            "date_published": "2022-04-11T04:24:15.000Z",
            "content_html": "<h2 id=\"1、The-most-common-classes-CV\"><a href=\"#1、The-most-common-classes-CV\" class=\"headerlink\" title=\"1、The most common classes - CV\"></a>1、The most common classes - CV</h2><p>补充细分类别</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 以USPPPM为例子</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dataset</span><span class=\"token punctuation\">:</span>\n    \n    \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CFG</span><span class=\"token punctuation\">:</span>\n\n    \n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、The-second-classes-NLP\"><a href=\"#2、The-second-classes-NLP\" class=\"headerlink\" title=\"2、The second classes - NLP\"></a>2、The second classes - NLP</h2><p>——————————————————————</p>\n<p>补充细分类别</p>\n<p>——————————————————————</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"3、Machine-learning-Competitions\"><a href=\"#3、Machine-learning-Competitions\" class=\"headerlink\" title=\"3、Machine learning Competitions\"></a>3、Machine learning Competitions</h2>",
            "tags": [
                "kaggle",
                "竞赛模板",
                "常用tricks"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/08/ml-dl-datavisualtion/",
            "url": "https://www.kitx86.com/2022/04/08/ml-dl-datavisualtion/",
            "title": "ML-Dl-DataVisualtion",
            "date_published": "2022-04-08T13:30:11.000Z",
            "content_html": "<pre class=\"line-numbers language-none\"><code class=\"language-none\">import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "data vistualtion"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/07/ml-dl-you-hua-suan-fa-yi-wen/",
            "url": "https://www.kitx86.com/2022/04/07/ml-dl-you-hua-suan-fa-yi-wen/",
            "title": "ML-DL-优化算法疑问",
            "date_published": "2022-04-07T09:14:18.000Z",
            "content_html": "<h4 id=\"优化算法疑问\"><a href=\"#优化算法疑问\" class=\"headerlink\" title=\"优化算法疑问\"></a>优化算法疑问</h4><p>前一段时间了解了用于梯度下降的优化算法，可惜有一些疑问没能及时记录下来，不然 arxiv 会诞生出一篇新的关于使用小批量优化梯度的华丽文章</p>\n<p>下面的算法记录和调包侠行为无异，对于有基础的道友可以跳到代码部分</p>\n<p>1.朴素的 SGD</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SGD</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">=</span> lr\n        self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>grads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">,</span>grads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            params<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">*</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2.物理世界的 Momentum</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Momentum</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span>momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">=</span> lr\n        self<span class=\"token punctuation\">.</span>momentum <span class=\"token operator\">=</span> momentum\n        self<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">,</span>grads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>v <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># v point to direct vector</span>\n            <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>momentum <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">*</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            params<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3.不知道该怎么描述 Nesterov</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Nesterov</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 这个方法不太熟悉</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span>momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">=</span> lr\n        self<span class=\"token punctuation\">.</span>momentum <span class=\"token operator\">=</span> momentum\n        self<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">,</span>grads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>v <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>momentum <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">*</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            params<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>4.大家普遍使用的 AdaGrad</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AdaGrad</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">=</span> lr\n        self<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">,</span>grads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>h <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            params<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">*</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>5.也是大家常使用的 RMSprop</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RMSprop</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__int__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span>decay_rate<span class=\"token operator\">=</span><span class=\"token number\">0.99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">=</span> lr\n        self<span class=\"token punctuation\">.</span>decay_rate <span class=\"token operator\">=</span> decay_rate\n        self<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">,</span>grads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>h <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> self<span class=\"token punctuation\">.</span>decay_rate\n                self<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>decay_rate<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                params<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">*</span> grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>6.还是大家常使用的 Adam </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Adam</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>lr<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span>beta1<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>beta2<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">=</span> lr\n        self<span class=\"token punctuation\">.</span>beta1 <span class=\"token operator\">=</span> beta1\n        self<span class=\"token punctuation\">.</span>beta2 <span class=\"token operator\">=</span> beta2\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">iter</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">,</span>grads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>m <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">iter</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        lr_t <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>lr <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>beta2<span class=\"token operator\">**</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>beta1<span class=\"token operator\">**</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>beta1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>beta2<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>grads<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">**</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            params <span class=\"token operator\">-=</span> lr_t <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1e-7</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h4><p>代码源自： 斋藤康毅的《深度学习进阶：自然语言处理》，有兴趣的道友可以去翻看，很好的一本书。</p>\n",
            "tags": [
                "SGD",
                "RMSProp",
                "Adam"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/07/pe-lun-wen-xie-zuo/",
            "url": "https://www.kitx86.com/2022/04/07/pe-lun-wen-xie-zuo/",
            "title": "PE-论文写作",
            "date_published": "2022-04-07T00:46:47.000Z",
            "content_html": "<h2 id=\"论文写作要求\"><a href=\"#论文写作要求\" class=\"headerlink\" title=\"论文写作要求\"></a>论文写作要求</h2><p>1.标题 + 作者</p>\n<p>2.摘要 - Abstract</p>\n<p>3.导言 - Introduction </p>\n<p>4.相关工作 - Related Work</p>\n<p>Example : 5.模型 - Deep Residual Learning - 5.1 &gt; 5.2 …</p>\n<p>6.理论</p>\n<p>7.实验 + 总结 - Experiments + Conclusion</p>\n<p>8.评论</p>\n<p>引用：References</p>\n",
            "tags": [
                "论文写作"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/04/ml-dl-python-yong-fa-zhu-yi/",
            "url": "https://www.kitx86.com/2022/04/04/ml-dl-python-yong-fa-zhu-yi/",
            "title": "ML-DL-python用法注意",
            "date_published": "2022-04-04T02:02:31.000Z",
            "content_html": "<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><h3 id=\"切片操作的小块解释\"><a href=\"#切片操作的小块解释\" class=\"headerlink\" title=\"切片操作的小块解释\"></a>切片操作的小块解释</h3><ul>\n<li>[-1]：获取最后一个元素，类似于matlab中的end；</li>\n<li>[:-1]：除了最后一个元素，获取其他所有的元素；</li>\n<li>[::-1]：对第一个到最后一个元素进行倒序之后取出；</li>\n<li>[n::-1]：对第一个到第n个元素进行倒序后取出</li>\n</ul>\n<h2 id=\"enumerate\"><a href=\"#enumerate\" class=\"headerlink\" title=\"enumerate()\"></a>enumerate()</h2><p>enumerate() 函数用于将一个可遍历的数据对象组合成一个索引序列，同时列出数据和数据下标</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train_score <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">del</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n",
            "tags": []
        },
        {
            "id": "https://www.kitx86.com/2022/04/02/ml-dl-zhu-yi-li-ji-zhi/",
            "url": "https://www.kitx86.com/2022/04/02/ml-dl-zhu-yi-li-ji-zhi/",
            "title": "ML-DL-注意力机制",
            "date_published": "2022-04-02T15:20:41.000Z",
            "content_html": "<h2 id=\"注意力机制-Attention-Mechanism\"><a href=\"#注意力机制-Attention-Mechanism\" class=\"headerlink\" title=\"注意力机制 - Attention Mechanism\"></a>注意力机制 - Attention Mechanism</h2><h3 id=\"一、attention-这项工作的出现\"><a href=\"#一、attention-这项工作的出现\" class=\"headerlink\" title=\"一、attention 这项工作的出现\"></a>一、attention 这项工作的出现</h3><h3 id=\"二、针对注意力机制所包含的一些区分\"><a href=\"#二、针对注意力机制所包含的一些区分\" class=\"headerlink\" title=\"二、针对注意力机制所包含的一些区分\"></a>二、针对注意力机制所包含的一些区分</h3><p>1、软注意，侧重于吸取的信息相对来说会偏向全面</p>\n<p>2、硬注意，会直接舍弃部分信息来保留计算的轻便</p>\n<p>3、自注意机制，由输入权重来相互作用，其实这样的状况是由内部来决定，</p>\n<p>预训练模型看起来和 Transformer 有着很大的干系，可以说是语言模型的核心网络，</p>\n<p>transformer 在我这里给出的解释是，一段话作为输入，首先将输入中的各个词在self-attention 机制下变成词向量，同时会含有一连串的每一个词的位置向量 （ 不行，我完全是跟着别人走的）</p>\n",
            "tags": [
                "深度学习",
                "循环神经网络"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/04/02/ml-dl-readingpaper/",
            "url": "https://www.kitx86.com/2022/04/02/ml-dl-readingpaper/",
            "title": "ML-DL-ReadingPaper",
            "date_published": "2022-04-02T03:41:23.000Z",
            "content_html": "<h2 id=\"Awesome-Deep-Learning-amp-Quantum-Computing\"><a href=\"#Awesome-Deep-Learning-amp-Quantum-Computing\" class=\"headerlink\" title=\"Awesome Deep Learning &amp; Quantum Computing\"></a>Awesome Deep Learning &amp; Quantum Computing</h2><p>我的小仓库😎😎 : <a href=\"https://www.aliyundrive.com/s/CELiSXuKc8e\">https://www.aliyundrive.com/s/CELiSXuKc8e</a></p>\n<p>不错的github地址：</p>\n<p><u>深度学习</u></p>\n<p><a href=\"https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap\">https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap</a></p>\n<p><a href=\"https://github.com/mli/paper-reading\">https://github.com/mli/paper-reading</a></p>\n<p><u>量子计算</u></p>\n<p><a href=\"https://github.com/desireevl/awesome-quantum-computing\">https://github.com/desireevl/awesome-quantum-computing</a></p>\n",
            "tags": [
                "paper",
                "deep learning",
                "neural network"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/28/ml-dl-xun-huan-shen-jing-wang-luo/",
            "url": "https://www.kitx86.com/2022/03/28/ml-dl-xun-huan-shen-jing-wang-luo/",
            "title": "ML-DL-循环神经网络",
            "date_published": "2022-03-28T06:37:08.000Z",
            "content_html": "",
            "tags": [
                "RNN",
                "循环神经网络"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/26/ml-dl-pytorch-shi-xian/",
            "url": "https://www.kitx86.com/2022/03/26/ml-dl-pytorch-shi-xian/",
            "title": "ML-DL-Pytorch实现",
            "date_published": "2022-03-26T14:35:40.000Z",
            "content_html": "<h4 id=\"Declaration-：借鉴了-d2l-https-zh-d2l-ai-的pytorch实现\"><a href=\"#Declaration-：借鉴了-d2l-https-zh-d2l-ai-的pytorch实现\" class=\"headerlink\" title=\"Declaration ：借鉴了 d2l (https://zh.d2l.ai)的pytorch实现\"></a>Declaration ：借鉴了 d2l (<a href=\"https://zh.d2l.ai)的pytorch实现/\">https://zh.d2l.ai)的pytorch实现</a></h4>",
            "tags": [
                "pytorch",
                "深度学习",
                "机器学习"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/26/pe-shi-xi-yi-xiang/",
            "url": "https://www.kitx86.com/2022/03/26/pe-shi-xi-yi-xiang/",
            "title": "PE-实习意向",
            "date_published": "2022-03-26T10:50:02.000Z",
            "content_html": "<p>目录</p>\n<ul>\n<li><p>一、AI for Design研发实习生</p>\n</li>\n<li><p>二、Graph Neural Network Research研发实习生</p>\n</li>\n<li><p>三、上海AI系统研究实习生</p>\n</li>\n<li><p>四、机器学习组AI for Science实习生</p>\n</li>\n<li><p>五、上海AI系统开发实习生</p>\n</li>\n<li><p>六、机器学习+计算化学/计算物理算法实习生</p>\n</li>\n<li><p>七、强化学习算法应用实习生</p>\n</li>\n</ul>\n<p>——————————————————————————————</p>\n<p>一、AI for Design研发实习生</p>\n<ul>\n<li>招聘人数： 1-2</li>\n<li>工作地点： 北京</li>\n</ul>\n<p><strong>组别简介：</strong></p>\n<p>微软亚洲研究院DKI (Data, Knowledge &amp; Intelligence) Area 致力于人工智能、数据分析、数据交互。数据可视化的研究。探索全新的数据分析，展示，交互技术，让数据和数据中的发现故事被高效地理解、广泛地传播。数据智能是一个典型的交叉领域，综合了自然语言处理、多维数据分析、机器学习、数据可视化、人机交互、计算机视觉等多个领域。团队与微软核心产品（如Excel，PowerPoint等）深度合作，并常年在各个领域的顶级会议和期刊上发表具有影响力的论文。</p>\n<p><strong>项目简介：</strong></p>\n<p>主要从事将人工智能与平面设计相结合的研究工作，探索使得平面设计更加自动化和智能化的深度学习模型和方法。这是一个跨领域的研究课题，涉及到深度学习、计算机视觉、自然语言处理、平面设计、软件工程等研究领域。</p>\n<p><strong>工作职责：</strong></p>\n<ul>\n<li>积极跟进和关注深度学习、自然语言处理、计算机视觉的前沿研究</li>\n<li>模型与算法设计和改进，数据的收集与处理，大规模模型的训练与调试，实验结果分析与总结，等等</li>\n<li>撰写高水平论文</li>\n<li>原型系统的实现</li>\n</ul>\n<p><strong>任职要求：</strong></p>\n<ol>\n<li>相关专业硕士及以上全日制在读学生</li>\n<li>熟悉Python，精通 Huggingface, Fairseq, DeepSpeed等DNN框架与工具</li>\n<li>有较强的数学基础，较强的编程能力，能独立进行数据分析</li>\n<li>具备深度学习、自然语言处理、计算机视觉的相关知识</li>\n<li>需要对GAN、CLIP、DALL-E、GPT、T5、BART等工作及相关研究中的一个或多个非常了解</li>\n<li>拥有论文快速检索和阅读能力</li>\n<li>有在计算机视觉或NLP方向国际会议发表论文经历，或编程比赛经历的同学优先。</li>\n<li>有技术类博客文章撰写习惯的优先</li>\n</ol>\n<p>二、Graph Neural Network Research研发实习生</p>\n<ul>\n<li>招聘人数： 1-2</li>\n<li>工作地点： 北京</li>\n</ul>\n<p><strong>组别简介：</strong></p>\n<p>Data Analytics Research是微软亚洲研究院DKI (Data, Knowledge &amp; Intelligence) Area 下专注于数据分析的研究团队，深度参与了微软多个产品（如Excel, Forms, Bing, Azure, Power BI等）中数据分析和智能的研发工作，深刻改变了亿万用户分析理解各领域数据的方式，并在数据挖掘、人工智能、机器学习、软件工程等领域常年发表具有影响力的工作。</p>\n<p><strong>项目简介：</strong></p>\n<p>主要从事图神经网络相关的研究工作，着眼于图神经网络模型的设计与理解，致力于提高模型的泛化能力以及可解释性，包括但不仅限于图神经网络新架构设计，图模型普适性分析，基于图性质的问题空间划分，图迁移学习，等等。此外，基于对图模型的理解，我们也探索图网络在更广泛问题场景下的应用前景，用图网络技术赋能更多领域。</p>\n<p><strong>工作职责：</strong></p>\n<ul>\n<li>积极跟进和关注图网络学习的前沿研究</li>\n<li>进行图网络模型研究，包括设计新的图模型架构与学习算法，图模型可解释性研究，新领域下的图模型应用，等等</li>\n<li>撰写高水平论文并在顶级会议和期刊上进行发表</li>\n</ul>\n<p><strong>任职要求：</strong></p>\n<ol>\n<li>熟悉Python，精通 Pytorch或Tensorflow</li>\n<li>具备机器学习、深度学习的相关知识</li>\n<li>拥有论文快速检索和阅读能力</li>\n<li>有在国际会议发表论文经历、ACM或其他编程比赛经历的同学优先。</li>\n</ol>\n<p>三、上海AI系统研究实习生</p>\n<ul>\n<li>招聘人数： 2-4</li>\n<li>工作地点： 上海</li>\n</ul>\n<p><strong>工作职责：</strong></p>\n<p>在 MSRA研究员们的指导下，进行人工智能系统前沿技术的研究，具体研究方向包括但不限于：</p>\n<ul>\n<li>针对大模型、系数模型、动态模型等前沿模型的训练及推理优化</li>\n<li>针对各种端侧和云侧设备进行自动化部署优化，包括编译优化，模型架构优化与压缩，面向硬件的高效模型设计等</li>\n<li>面向深度学习负载的集群设计，包括调度优化，数据与通信优化等</li>\n</ul>\n<p><strong>任职要求：</strong></p>\n<ul>\n<li>硕士或博士研究生，专业为计算机、电子信息等相关专业，具有较强的英文听说读写能力。</li>\n<li>有强烈的意愿做世界先进的科学研究并且在顶级会议或期刊发表论文。</li>\n<li>具备良好的动手能力，以及分析问题解决问题的能力，能够快速地规划出解决方案，并进行验证</li>\n<li>有团队协作精神，有责任心</li>\n</ul>\n<p><strong>加分项：</strong></p>\n<ul>\n<li>有深度学习基础，至少对一种深度学习框架（PyTorch 优先，TensorFlow等）具有深入理解；对AI算法有一定了解，有在相关领域顶会上发表过论文者优先</li>\n<li>对GPU架构具有一定了解，并有优化经验者优先</li>\n<li>对分布式系统或数据库系统有一定基础，具有相关研究经验者优先</li>\n<li>具有AI加速器（ASIC/FPGA等）研究经验者优先</li>\n<li>参加过学术界工业界机器学习相关比赛，CCPC/ICPC 等程序设计竞赛，电子设计大赛等竞赛并获得优异成绩者优先</li>\n<li></li>\n</ul>\n<p>四、机器学习组AI for Science实习生</p>\n<ul>\n<li>招聘人数： 3-5</li>\n<li>工作地点： 北京</li>\n</ul>\n<p><strong>组别简介：</strong></p>\n<p>微软亚洲研究院机器学习组致力于从算法、应用和理论层面推进人工智能前沿研究，加速人工智能在自然科学和产业应用中的探索。机器学习组开发了Graphormer，LightGBM等多个受欢迎的开源工具包，多次夺得国际比赛冠军，并持续产出高质量学术论文。</p>\n<p><strong>工作职责：</strong></p>\n<p>参与AI for Science项目科研项目，撰写高质量论文，完成前沿算法的落地与部署，开发、维护开源工具包。具体方向包括但不限于：</p>\n<ol>\n<li>基于深度学习的分子模拟，如分子动力学，分子性质预测，分子生成，逆合成等。</li>\n<li>深度学习模型在算法及理论层面的创新，如图神经网络、大规模预训练算法等。</li>\n<li>深度学习在材料发现、药物发现等中的应用。</li>\n<li>机器学习与湿实验相结合。</li>\n<li>使用机器学习加速密度泛函理论等。</li>\n</ol>\n<p><strong>任职要求：</strong></p>\n<ol>\n<li>扎实的数理基础知识。</li>\n<li>任一相关方向扎实的背景知识。</li>\n<li>熟练使用PyTorch/Tensorflow等深度学习库。</li>\n</ol>\n<p>加分项：</p>\n<ol>\n<li>有机器学习方向顶会论文发表。或</li>\n<li>有丰富的计算物理、化学、生物知识，会熟练使用相关量子化学软件等。</li>\n<li>实习时间一年及以上。</li>\n</ol>\n<p>五、上海AI系统开发实习生</p>\n<ul>\n<li>招聘人数： 2-4</li>\n<li>工作地点： 上海</li>\n</ul>\n<p><strong>工作职责：</strong></p>\n<p>与 MSRA的研究员们合作，共同研究AI前沿技术，设计开发人工智能系统与工具，维护开源项目，并将开发成果应用于实际场景。其具体内容包括：</p>\n<ul>\n<li>在深入理解前沿算法（如NAS，Model Compression，sparsity）的基础上，探索未来的发展方向</li>\n<li>参与MSRA 开源项目（如 NNI、nn-meter等）的设计和开发，包括接口设计，算法实现，用户交互等</li>\n<li>与团队合作探索项目的更多应用场景，并将系统与工具运用于实际产品中</li>\n</ul>\n<p><strong>任职要求：</strong></p>\n<ul>\n<li>有计算机科学、数据科学或相关专业背景，本科及以上学历在校学生</li>\n<li>有 Python等语言的编程经验，对 Tensorflow/PyTorch 等深度学习框架有一定了解</li>\n<li>具备良好的工程能力，以及分析问题解决问题的能力，能够快速地规划出解决方案，并将想法落地</li>\n<li>有团队协作精神，有责任心</li>\n</ul>\n<p><strong>加分项：</strong></p>\n<ul>\n<li>对AI算法（AutoML/NAS/Compression等）有一定了解，有在相关领域顶会上发表过论文者优先</li>\n<li>参加过学术界工业界机器学习相关比赛并获得优异成绩者优先</li>\n<li>具有深度学习项目经验者优先，熟悉分布式训练者优先</li>\n<li>有 CCPC/ICPC 等程序设计竞赛的获奖经历者优先</li>\n<li>有开源项目开发或维护经历者优先</li>\n</ul>\n<p>六、机器学习+计算化学/计算物理算法实习生</p>\n<ul>\n<li>招聘人数： 2-4</li>\n</ul>\n<p><strong>组别简介：</strong></p>\n<p>微软亚洲研究院机器学习领域从理论、算法、应用等不同层面推动机器学习的前沿。我们的研究兴趣包含：深度学习、强化学习、图学习、梯度提升树、在线学习、预训练、动态学习、学习理论等。同时， 我们也在积极探索人工智能在自然科学和产业应用中的价值，从而为科学工作者和传统工业赋能（具体见研究概况）。在过去的十几年间，我们在顶级国际会议和期刊上发表了大量被高度引用的高质量论文，向微软的产品部门转化了大量核心技术，并帮助众多的企业合作伙伴实现了数字化转型。我们也向开源社区贡献了大量高质量开源工具，例如 LightGBM、LigthLDA、微软图引擎，多智能体资源优化平台“群策 MARO“，业内首个AI量化投资平台“微矿Qlib”，以及最新的时空预测平台”FOST”。</p>\n<p><strong>工作职责：</strong></p>\n<ol>\n<li>复现已有论文</li>\n<li>改进现有代码、性能优化</li>\n</ol>\n<p>工作方向（选其一）</p>\n<ul>\n<li>利用图神经网络等相关方法进行分子材料表征</li>\n<li>使用生成模型、强化学习等方法完成分子材料设计</li>\n<li>利用神经网络加速偏微分方程求解</li>\n<li>利用神经网络完成积分方程求解</li>\n<li>利用cuda语言加速</li>\n</ul>\n<p><strong>任职要求：</strong></p>\n<ol>\n<li>计算机、电子、化学、物理或相关专业（本科/硕士/博士）</li>\n<li>扎实的数据结构/算法基础</li>\n<li>熟悉常见的机器学习算法，熟悉使用PyTorch或TensorFlow等</li>\n<li>熟练的编程能力</li>\n<li>快速学习能力,良好的沟通与合作能力</li>\n</ol>\n<p>七、强化学习算法应用实习生</p>\n<ul>\n<li>招聘人数： 2-4</li>\n</ul>\n<p><strong>组别简介：</strong></p>\n<p>微软亚洲研究院机器学习领域从理论、算法、应用等不同层面推动机器学习的前沿。我们的研究兴趣包含：深度学习、强化学习、图学习、梯度提升树、在线学习、预训练、动态学习、学习理论等。同时， 我们也在积极探索人工智能在自然科学和产业应用中的价值，从而为科学工作者和传统工业赋能（具体见研究概况）。在过去的十几年间，我们在顶级国际会议和期刊上发表了大量被高度引用的高质量论文，向微软的产品部门转化了大量核心技术，并帮助众多的企业合作伙伴实现了数字化转型。我们也向开源社区贡献了大量高质量开源工具，例如 LightGBM、LigthLDA、微软图引擎，多智能体资源优化平台“群策 MARO“，业内首个AI量化投资平台“微矿Qlib”，以及最新的时空预测平台”FOST”。</p>\n<p><strong>工作职责：</strong></p>\n<ol>\n<li>积极跟进和关注强化学习算法的前沿研究；</li>\n<li>参与机器学习算法，特别是强化学习相关算法的研究；</li>\n<li>参与强化学习算法在物流、能源、工业控制等领域的落地应用。</li>\n</ol>\n<p><strong>任职要求：</strong></p>\n<ol>\n<li>计算机或相关专业硕士或以上学历，有较强编程能力的优秀本科生也欢迎申请；</li>\n<li>具备良好的数学基础，机器学习知识；</li>\n<li>具有较强的编程实现能力，良好的沟通能力和团队协作精神；</li>\n<li>加分项：有强化学习算法的开发和研究经历；顶级AI会议文章；熟练掌握深度学习框架(PyTorch, TensorFlow 等)；有开源软件开发经历等。</li>\n</ol>\n",
            "tags": [
                "MSRA",
                "微软亚洲研究院"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/26/ml-dl-juan-ji-shen-jing-wang-luo/",
            "url": "https://www.kitx86.com/2022/03/26/ml-dl-juan-ji-shen-jing-wang-luo/",
            "title": "ML-DL-卷积神经网络",
            "date_published": "2022-03-26T07:28:39.000Z",
            "content_html": "<h3 id=\"一、卷积神经网络的诞生\"><a href=\"#一、卷积神经网络的诞生\" class=\"headerlink\" title=\"一、卷积神经网络的诞生\"></a>一、卷积神经网络的诞生</h3><p>1.对该类型网络的研究都源于其他人的，一样的内容就不在过多的赘述：[图像学的内容不太感兴趣]</p>\n<p>主要用途：处理图像数据、表格数据等等</p>\n<p><u>竞赛可选择：图像识别，目标检测-边缘检测，语义分割</u></p>\n<p>在对 DNN 的架构添加了 卷积 layer 后就是 CNN ，这就是 CNN 的由来，但 卷积的操作方式有些奇怪的行为让人大跌眼镜</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 构造一个二维卷积层，它具有1个输出通道和形状为（1，2）的卷积核</span>\n\n<span class=\"token comment\"># 二维卷积核 参数形式 (批量大小，通道，高度，宽度)</span>\nconv2d <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>特性：空间不变性</p>\n<ol>\n<li><em>平移不变性</em>（translation invariance）：不管检测对象出现在图像中的哪个位置，神经网络的前面几层应该对相同的图像区域具有相似的反应，即为“平移不变性”。</li>\n<li><em>局部性</em>（locality）：神经网络的前面几层应该只探索输入图像中的局部区域，而不过度在意图像中相隔较远区域的关系，这就是“局部性”原则。最终，可以聚合这些局部特征，以在整个图像级别进行预测。</li>\n</ol>\n<p>输出的卷积层 &gt; 特征映射</p>\n<p>感受野：指前向传播中可能影响 x 计算的所有元素</p>\n<p>2、卷积神经网络之LeNet</p>\n<p>LeNet（LeNet-5）由两个部分组成：</p>\n<ul>\n<li>卷积编码器：由两个卷积层组成;</li>\n<li>全连接层密集块：由三个全连接层组成。</li>\n</ul>\n<p><img src=\"/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/lenet.svg\" alt=\"lenet\"></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>卷积神经网络（CNN）是一类使用卷积层的网络。</li>\n<li>在卷积神经网络中，我们组合使用卷积层、非线性激活函数和汇聚层。</li>\n<li>为了构造高性能的卷积神经网络，我们通常对卷积层进行排列，逐渐降低其表示的空间分辨率，同时增加通道数。</li>\n<li>在传统的卷积神经网络中，卷积块编码得到的表征在输出之前需由一个或多个全连接层进行处理。</li>\n<li>LeNet是最早发布的卷积神经网络之一。</li>\n</ul>\n<h4 id=\"考查\"><a href=\"#考查\" class=\"headerlink\" title=\"考查\"></a>考查</h4><ol>\n<li><p>将平均汇聚层替换为最大汇聚层，会发生什么？</p>\n</li>\n<li><p>尝试构建一个基于LeNet的更复杂的网络，以提高其准确性。</p>\n<ol>\n<li>调整卷积窗口大小。</li>\n<li>调整输出通道的数量。</li>\n<li>调整激活函数（如ReLU）。</li>\n<li>调整卷积层的数量。</li>\n<li>调整全连接层的数量。</li>\n<li>调整学习率和其他训练细节（例如，初始化和轮数）。</li>\n</ol>\n</li>\n<li><p>在MNIST数据集上尝试以上改进的网络。</p>\n</li>\n<li><p>显示不同输入（例如毛衣和外套）时，LeNet第一层和第二层的激活值。</p>\n</li>\n</ol>\n<h2 id=\"二、现代卷积神经网络\"><a href=\"#二、现代卷积神经网络\" class=\"headerlink\" title=\"二、现代卷积神经网络\"></a>二、现代卷积神经网络</h2><h3 id=\"1、AlexNet\"><a href=\"#1、AlexNet\" class=\"headerlink\" title=\"1、AlexNet\"></a>1、AlexNet</h3><ul>\n<li><p>AlexNet。它是第一个在大规模视觉竞赛中击败传统计算机视觉模型的大型神经网络；</p>\n</li>\n<li><p>使用重复块的网络（VGG）。它利用许多重复的神经网络块；</p>\n</li>\n<li><p>网络中的网络（NiN）。它重复使用由卷积层和1×1卷积层（用来代替全连接层）来构建深层网络;</p>\n</li>\n<li><p>含并行连结的网络（GoogLeNet）。它使用并行连结的网络，通过不同窗口大小的卷积层和最大汇聚层来并行抽取信息；</p>\n</li>\n<li><p>残差网络（ResNet）。它通过残差块构建跨层的数据通道，是计算机视觉中最流行的体系架构；</p>\n</li>\n<li><p>稠密连接网络（DenseNet）。它的计算成本很高，但给我们带来了更好的效果。</p>\n</li>\n</ul>\n<p>学习表征观摩图</p>\n<p><img src=\"/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/filters.png\" alt=\"filters\"></p>\n<p><img src=\"/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/alexnet.svg\" alt=\"alexnet\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn\n<span class=\"token keyword\">from</span> d2l <span class=\"token keyword\">import</span> torch <span class=\"token keyword\">as</span> d2l\n\nnet <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n    <span class=\"token comment\"># 这里，我们使用一个11*11的更大窗口来捕捉对象。</span>\n    <span class=\"token comment\"># 同时，步幅为4，以减少输出的高度和宽度。</span>\n    <span class=\"token comment\"># 另外，输出通道的数目远大于LeNet</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 减小卷积窗口，使用填充为2来使得输入与输出的高和宽一致，且增大输出通道数</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 使用三个连续的卷积层和较小的卷积窗口。</span>\n    <span class=\"token comment\"># 除了最后的卷积层，输出通道的数量进一步增加。</span>\n    <span class=\"token comment\"># 在前两个卷积层之后，汇聚层不用于减少输入的高度和宽度</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 这里，全连接层的输出数量是LeNet中的好几倍。使用dropout层来减轻过拟合</span>\n    nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">6400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># 最后是输出层。由于这里使用Fashion-MNIST，所以用类别数为10，而非论文中的1000</span>\n    nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>观察网络每一层输出架构</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> layer <span class=\"token keyword\">in</span> net<span class=\"token punctuation\">:</span>\n    X<span class=\"token operator\">=</span>layer<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">,</span><span class=\"token string\">'output shape:\\t'</span><span class=\"token punctuation\">,</span>X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">Conv2d output shape:\t torch.Size([1, 96, 54, 54])\nReLU output shape:\t torch.Size([1, 96, 54, 54])\nMaxPool2d output shape:\t torch.Size([1, 96, 26, 26])\nConv2d output shape:\t torch.Size([1, 256, 26, 26])\nReLU output shape:\t torch.Size([1, 256, 26, 26])\nMaxPool2d output shape:\t torch.Size([1, 256, 12, 12])\nConv2d output shape:\t torch.Size([1, 384, 12, 12])\nReLU output shape:\t torch.Size([1, 384, 12, 12])\nConv2d output shape:\t torch.Size([1, 384, 12, 12])\nReLU output shape:\t torch.Size([1, 384, 12, 12])\nConv2d output shape:\t torch.Size([1, 256, 12, 12])\nReLU output shape:\t torch.Size([1, 256, 12, 12])\nMaxPool2d output shape:\t torch.Size([1, 256, 5, 5])\nFlatten output shape:\t torch.Size([1, 6400])\nLinear output shape:\t torch.Size([1, 4096])\nReLU output shape:\t torch.Size([1, 4096])\nDropout output shape:\t torch.Size([1, 4096])\nLinear output shape:\t torch.Size([1, 4096])\nReLU output shape:\t torch.Size([1, 4096])\nDropout output shape:\t torch.Size([1, 4096])\nLinear output shape:\t torch.Size([1, 10])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>使用更小的学习速率训练，这是因为网络更深更广、图像分辨率更高，训练卷积神经网络就更昂贵。</p>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>AlexNet的架构与LeNet相似，但使用了更多的卷积层和更多的参数来拟合大规模的ImageNet数据集。</li>\n<li>今天，AlexNet已经被更有效的架构所超越，但它是从浅层网络到深层网络的关键一步。</li>\n<li>尽管AlexNet的代码只比LeNet多出几行，但学术界花了很多年才接受深度学习这一概念，并应用其出色的实验结果。这也是由于缺乏有效的计算工具。</li>\n<li>Dropout、ReLU和预处理是提升计算机视觉任务性能的其他关键步骤。</li>\n</ul>\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><ol>\n<li>试着增加迭代轮数。对比LeNet的结果有什么不同？为什么？</li>\n<li>AlexNet对于Fashion-MNIST数据集来说可能太复杂了。<ol>\n<li>尝试简化模型以加快训练速度，同时确保准确性不会显著下降。</li>\n<li>设计一个更好的模型，可以直接在28×28图像上工作。</li>\n</ol>\n</li>\n<li>修改批量大小，并观察模型精度和GPU显存变化。</li>\n<li>分析了AlexNet的计算性能。<ol>\n<li>在AlexNet中主要是哪部分占用显存？</li>\n<li>在AlexNet中主要是哪部分需要更多的计算？</li>\n<li>计算结果时显存带宽如何？</li>\n</ol>\n</li>\n<li>将dropout和ReLU应用于LeNet-5，效果有提升吗？再试试预处理会怎么样？</li>\n</ol>\n<h3 id=\"2、使用块的网络：-VGG-和AlexNet-没有很大的差别\"><a href=\"#2、使用块的网络：-VGG-和AlexNet-没有很大的差别\" class=\"headerlink\" title=\"2、使用块的网络： VGG (和AlexNet 没有很大的差别)\"></a>2、使用块的网络： VGG (和AlexNet 没有很大的差别)</h3><p><img src=\"/ML-Dl-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/vgg.svg\" alt=\"vgg\"></p>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>VGG-11使用可复用的卷积块构造网络。不同的VGG模型可通过每个块中卷积层数量和输出通道数量的差异来定义。</li>\n<li>块的使用导致网络定义的非常简洁。使用块可以有效地设计复杂的网络。</li>\n<li>在VGG论文中，Simonyan和Ziserman尝试了各种架构。特别是他们发现深层且窄的卷积（即3×3）比较浅层且宽的卷积更有效。</li>\n</ul>\n<h4 id=\"3、网络中的网络-NiN\"><a href=\"#3、网络中的网络-NiN\" class=\"headerlink\" title=\"3、网络中的网络 - NiN\"></a>3、网络中的网络 - NiN</h4>",
            "tags": [
                "CNN",
                "卷积神经网络"
            ]
        },
        {
            "id": "https://www.kitx86.com/2022/03/25/ml-dl-zhen-ming-ji-jiu/",
            "url": "https://www.kitx86.com/2022/03/25/ml-dl-zhen-ming-ji-jiu/",
            "title": "Ml-Dl-朕命急救",
            "date_published": "2022-03-25T10:35:26.000Z",
            "content_html": "<h4 id=\"一、竞赛预处理-整理的样板\"><a href=\"#一、竞赛预处理-整理的样板\" class=\"headerlink\" title=\"一、竞赛预处理-整理的样板\"></a>一、竞赛预处理-整理的样板</h4><h5 id=\"1、导入常见库\"><a href=\"#1、导入常见库\" class=\"headerlink\" title=\"1、导入常见库\"></a>1、导入常见库</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np  <span class=\"token comment\"># Linear algebra</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd <span class=\"token comment\"># data processing, CSV file I/O</span>\n\n\n——————————————————————————————图像数据处理部分———————————————————————————\n<span class=\"token comment\"># 内嵌绘图，可以省略 plt.show()</span>\n<span class=\"token operator\">%</span>matplotlib inline \n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt  \n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>image <span class=\"token keyword\">as</span> mpimg\n\n<span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\nplt<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">(</span><span class=\"token string\">'seaborn'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 显示风格</span>\nsns<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>style<span class=\"token operator\">=</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">=</span><span class=\"token string\">'notebook'</span><span class=\"token punctuation\">,</span> palette<span class=\"token operator\">=</span><span class=\"token string\">'deep'</span><span class=\"token punctuation\">)</span>\n\n——————————————————————————语言token处理部分——————————————————————————\n<span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS\n\n —————————————————————————可添加补充—————————————————————————————————    \n<span class=\"token keyword\">from</span> IPython<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>interactiveshell <span class=\"token keyword\">import</span> InteractiveShell <span class=\"token comment\"># idk</span>\nInteractiveShell<span class=\"token punctuation\">.</span>ast_node_interactivity <span class=\"token operator\">=</span> <span class=\"token string\">\"all\"</span> <span class=\"token comment\"># idk</span>\nplt<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'figure.figsize'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span>\nplt<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">(</span><span class=\"token string\">'fivethirtyeight'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 科学计算用的库，包含很多数学和算法的实例，吐槽~哪有这么多科学计算库</span>\n<span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> stats \n\n<span class=\"token comment\"># 数据集环境</span>\n<span class=\"token keyword\">for</span> dirname<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> filenames <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span><span class=\"token string\">'/kaggle/input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> filenmae <span class=\"token keyword\">in</span> filenames<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              \n<span class=\"token keyword\">def</span> <span class=\"token function\">highlight_max</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> props <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> np<span class=\"token punctuation\">.</span>nanmax<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># idk</span>\n\n\n\n<span class=\"token comment\"># 辅助工具</span>\n <span class=\"token comment\"># 迭代进度条，只是为了好看</span>\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm \n<span class=\"token comment\"># 看起来有点老的样子</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image \n\n        \n————————————————————————————————————————————————————————————————————\n<span class=\"token comment\"># 系统局部环境</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token comment\"># 垃圾回收机制</span>\n<span class=\"token keyword\">import</span> gc \n\n<span class=\"token comment\"># 建立深度模型所需要的</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Sequential \n<span class=\"token keyword\">from</span> keras <span class=\"token keyword\">import</span>  backend <span class=\"token keyword\">as</span> K <span class=\"token comment\"># idk</span>\n\n—————————————————————————————图像部分模型层的简易解释——————————————————————————————————\n<span class=\"token comment\"># Conv2D : 二维卷积层，互相关运算，可使用填充、步幅和多通道输入/输出</span>\n<span class=\"token comment\"># Dense : 稠密层</span>\n<span class=\"token comment\"># Dropout : 丢弃层</span>\n<span class=\"token comment\"># pool2d : 2维汇聚层，对汇聚窗口所有元素计算最大值或平均值，可使用填充、步幅和多通道输入/输出</span>\n<span class=\"token comment\"># Flatten : 平滑层</span>\n<span class=\"token comment\"># MaxPool2D : 二维汇聚计算最大值</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> Dense <span class=\"token punctuation\">,</span> Dropout <span class=\"token punctuation\">,</span> Lambda<span class=\"token punctuation\">,</span> Flatten Conv2D<span class=\"token punctuation\">,</span> MaxPool2D \n\n<span class=\"token comment\"># 优化函数 rmsprop_v2 , adam_v2</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>optimizers <span class=\"token keyword\">import</span> Adam <span class=\"token punctuation\">,</span>RMSprop\n<span class=\"token comment\"># 训练、验证数据分离</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split \n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> confusion_matrix <span class=\"token comment\"># idk</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>preprocessing<span class=\"token punctuation\">.</span>image <span class=\"token keyword\">import</span> ImageDataGenerator <span class=\"token comment\"># idk</span>\n\n——————————————————————————语言模型的部分解释—————————————————————————————————\n\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> LabelEncoder <span class=\"token comment\"># idk</span>\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> StratifiedKFold <span class=\"token comment\"># idk</span>\n\n<span class=\"token keyword\">from</span> transformers <span class=\"token keyword\">import</span> AutoTokenizer<span class=\"token punctuation\">,</span> AutoConfig<span class=\"token punctuation\">,</span> AutoModel<span class=\"token punctuation\">,</span> get_linear_schedule_with_warmup \n\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>optim <span class=\"token keyword\">import</span> AdamW\n———————————————————————————————————————————————————————————————————————————\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>callbacks <span class=\"token keyword\">import</span> ReduceLROnPlateau <span class=\"token comment\"># idk</span>\n———————————————————————————————————忽略包环境的警告——————————————————————————\n<span class=\"token keyword\">import</span> warnings\nwarnings<span class=\"token punctuation\">.</span>filterwarnings<span class=\"token punctuation\">(</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span>\n\ndevice <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'cpu'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、检查环境状况</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> subprocess <span class=\"token keyword\">import</span> check_output\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ls\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../input\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"二、检查数据\"><a href=\"#二、检查数据\" class=\"headerlink\" title=\"二、检查数据\"></a>二、检查数据</h4><h5 id=\"1、加载提供的数据\"><a href=\"#1、加载提供的数据\" class=\"headerlink\" title=\"1、加载提供的数据\"></a>1、加载提供的数据</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/train.csv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 读入训练数据</span>\ntest <span class=\"token operator\">=</span> pd <span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../input/test.csv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 读入测试数据</span>\n\ntrain<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查看前面5行的信息</span>\ntrain<span class=\"token punctuation\">.</span>shape <span class=\"token comment\"># 返回整体 data 的 的信息</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Shape Dtrain:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Shape Dtest: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unique elements per column\"</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">.</span>nunique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Missing Value?\"</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n————————————————————————图像数据处理方法————————————————————————————\nX_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 形成array数组 </span>\ny_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 28*28 的值</span>\nX_test <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n\n\n———————————————————————————— 技巧 <span class=\"token punctuation\">(</span>tricks<span class=\"token punctuation\">)</span> ————————————————————————\n<span class=\"token comment\"># 一些技巧 - tricks</span>\n<span class=\"token keyword\">del</span> train <span class=\"token comment\"># can free some space ?</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2、数据可视化\"><a href=\"#2、数据可视化\" class=\"headerlink\" title=\"2、数据可视化\"></a>2、数据可视化</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># method 1</span>\nX_train <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 转变数据为图片，重新组织形状</span>\n\n<span class=\"token comment\"># method 2 : Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)</span>\nX_train <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n————————————————————————————————————————————————————————————————\nY_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 只取值的那一列标签</span>\nX_train <span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span>labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 不要值的那一列作为训练数据</span>\ncount <span class=\"token operator\">=</span> sns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>Y_train<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 计算 1-10 的数量</span>\nY_train<span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 柱状图显示 1 - 10 的数量</span>\n————————————————————————————————————————————————————————————————\n\ntop <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>anc <span class=\"token keyword\">for</span> anc <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Counter 计数标签'anchor'</span>\ntop <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取得前面 50 个</span>\n\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 绘制图表尺寸</span>\n\nsns<span class=\"token punctuation\">.</span>barplot<span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> palette <span class=\"token operator\">=</span> <span class=\"token string\">'hls'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 调色板为 hls</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>rotation <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x 轴标签可以做出一些调整</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Top 50 First Phrases (Anchor)\"</span><span class=\"token punctuation\">,</span> fontsize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n————————————————————————————————————————————————————————————————<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404083846939.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntext_len <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nsns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>text_len<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">'Word Count Distribution'</span><span class=\"token punctuation\">,</span>size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这还要取设置大小？</span>\n\navg_word_len <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 看起来这位小哥很喜欢 用 lambda 演算，分离 anchor 里的词向量来计算平均长度</span>\nsns<span class=\"token punctuation\">.</span>histplot<span class=\"token punctuation\">(</span>avg_word_len<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kde <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'#ffa408'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># kde 是开启核密度函数？,我只是看到一条线啊</span>\nax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">'Average Word Length Distribution'</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404091257020.png\"></p>\n<h2 id=\"时尚词云的display，需要配合图片组合\"><a href=\"#时尚词云的display，需要配合图片组合\" class=\"headerlink\" title=\"时尚词云的display，需要配合图片组合\"></a>时尚词云的display，需要配合图片组合</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntext <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'anchor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'./img.png'</span>\n<span class=\"token comment\"># url = 'https://static.vecteezy.com/system/resources/previews/000/263/280/non_2x/vector-open-book.jpg'</span>\n<span class=\"token comment\"># 我不知道为什么链接不能有效打开</span>\nim <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 所以我只能用我自己的方式来打开</span>\n<span class=\"token comment\"># im = np.array(Image.open(requests.get(url, stream=True).raw))</span>\ncloud <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span>stopwords <span class=\"token operator\">=</span> STOPWORDS<span class=\"token punctuation\">,</span>\n                  background_color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span>\n                  mask <span class=\"token operator\">=</span> im<span class=\"token punctuation\">,</span>\n                  max_words <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>cloud<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093146238.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 针对上面的 anchor 的特征来对 target 的信息抽取</span>\n<span class=\"token comment\"># 只需要把 anchor 替换成 taraget ,action ! </span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093640583.png\"></p>\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404093717734.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 看起来这个好像是 cm 来计量的</span>\nsns<span class=\"token punctuation\">.</span>countplot<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">'context'</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> train<span class=\"token punctuation\">,</span> palette <span class=\"token operator\">=</span> <span class=\"token string\">'hls'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 又来计算 context 的信息，但看起来特征 context 的信息有点多啊</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>rotation <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Distribution of Context'</span><span class=\"token punctuation\">,</span> fontsize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/ML-DL-%E6%9C%95%E4%B9%8B%E5%91%BD%E9%9C%80%E6%95%91/image-20220404094416376.png\"></p>\n<h6 id=\"3、特征标准化\"><a href=\"#3、特征标准化\" class=\"headerlink\" title=\"3、特征标准化\"></a>3、特征标准化</h6><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># method 1 : </span>\nmean_px <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 求其均值作为 np 的 float32 格式</span>\nstd_px <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span> \t\t<span class=\"token comment\"># 求其标准差作为 np 的 float32 格式</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">standardize</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>mean_px<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>std_px\n\n<span class=\"token comment\"># method 2 : Normalize the data</span>\nX_train <span class=\"token operator\">=</span> X_train <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span>\ntest <span class=\"token operator\">=</span> test <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"4、检查数据和缺失值\"><a href=\"#4、检查数据和缺失值\" class=\"headerlink\" title=\"4、检查数据和缺失值\"></a>4、检查数据和缺失值</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Check the data</span>\nX_train<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Encode labels to one hot vectors (ex : 2 -&gt; [0,0,1,0,0,0,0,0,0,0])</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>np_utils <span class=\"token keyword\">import</span> to_categorica\nY_train <span class=\"token operator\">=</span> to_categorical<span class=\"token punctuation\">(</span>Y_train<span class=\"token punctuation\">,</span> num_classes <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Set the random seed</span>\nrandom_seed <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\"># Split the train and the validation set for the fitting</span>\nX_train<span class=\"token punctuation\">,</span> X_val<span class=\"token punctuation\">,</span> Y_train<span class=\"token punctuation\">,</span> Y_val <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> Y_train<span class=\"token punctuation\">,</span> test_size <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span>random_seed<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 查看一个例子</span>\ng <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n——————————————————————————————————————————————————————————————————USPPM\nencoder <span class=\"token operator\">=</span> LabelEncoder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrain<span class=\"token punctuation\">[</span><span class=\"token string\">'score_encoded'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">[</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这里的 0 对应于 label 是 0，0.25 对应于 1 ，0.5 对应于 2。以此类推...</span>\nskf <span class=\"token operator\">=</span> StratifiedKFold<span class=\"token punctuation\">(</span>n_splits <span class=\"token operator\">=</span> CONFIG<span class=\"token punctuation\">.</span>num_fold<span class=\"token punctuation\">,</span>shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>random_state <span class=\"token operator\">=</span> CONFIG<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 分层k折</span>\n<span class=\"token comment\"># num_fold = 5, seed = 2022</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> val_ind<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>skf<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>X <span class=\"token operator\">=</span> train<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'score_encoded'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># enumerate 中分离出来的数据是 下标 加上 train 中的值</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val_ind<span class=\"token punctuation\">)</span> <span class=\"token comment\"># idk</span>\n    train<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>val_ind<span class=\"token punctuation\">,</span><span class=\"token string\">'fold'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k <span class=\"token comment\"># 将 val_ind 的下标分别 贴上 k 标志</span>\n    <span class=\"token comment\"># 通过行索引 index 中的具体值来取行数据</span>\n    <span class=\"token comment\"># iloc 是通过 行号来取行数据</span>\n<span class=\"token comment\">################# 效果还不错 ###################</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">2</span>    <span class=\"token number\">11</span>    <span class=\"token number\">13</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36468</span> <span class=\"token number\">36469</span> <span class=\"token number\">36470</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">0</span>     <span class=\"token number\">3</span>     <span class=\"token number\">5</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36459</span> <span class=\"token number\">36464</span> <span class=\"token number\">36467</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">6</span>    <span class=\"token number\">10</span>    <span class=\"token number\">14</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36465</span> <span class=\"token number\">36471</span> <span class=\"token number\">36472</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">4</span>    <span class=\"token number\">21</span>    <span class=\"token number\">26</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36457</span> <span class=\"token number\">36462</span> <span class=\"token number\">36466</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>    <span class=\"token number\">1</span>     <span class=\"token number\">8</span>     <span class=\"token number\">9</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">36455</span> <span class=\"token number\">36456</span> <span class=\"token number\">36460</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">###############################################</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"7-添加数据标签\"><a href=\"#7-添加数据标签\" class=\"headerlink\" title=\"7.添加数据标签\"></a>7.添加数据标签</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">train<span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span><span class=\"token string\">'context'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>df_cpc<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"我认为比较重要的数据集类\"><a href=\"#我认为比较重要的数据集类\" class=\"headerlink\" title=\"我认为比较重要的数据集类\"></a>我认为比较重要的数据集类</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dataset</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Dataset(data)\n      data (np.array or list-like): input_ids and y\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>max_length <span class=\"token operator\">=</span> max_length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Padding to max_length</span>\n        d <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">)</span>\n\n        input_ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        input_ids<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span>\n\n        attention_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>max_length<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        attention_mask<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">:</span> input_ids<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'attention_mask'</span><span class=\"token punctuation\">:</span> attention_mask<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Tokenize\"><a href=\"#Tokenize\" class=\"headerlink\" title=\"Tokenize\"></a>Tokenize</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_data</span><span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">,</span> tokenizer<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Create input_ids and label array y\n\n    Args:\n      train (pd.DataFrame)\n\n    Returns: list[dict]\n      input_ids (np.array[int])\n      n (int): seq length or number of tokens\n    \"\"\"</span>\n    sep <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>sep_token_id\n    <span class=\"token keyword\">if</span> tokenizer<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__ <span class=\"token operator\">==</span> <span class=\"token string\">'RobertaTokenizerFast'</span><span class=\"token punctuation\">:</span>\n        nsep <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        nsep <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        \n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> r <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">.</span>iterrows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        text <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>pn_history\n        feature_text <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>feature_text\n\n        o <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> feature_text<span class=\"token punctuation\">,</span>\n                      add_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span>max_length<span class=\"token punctuation\">,</span>\n                      truncation<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                      return_offsets_mapping<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Input ids</span>\n        input_ids <span class=\"token operator\">=</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_ids<span class=\"token punctuation\">)</span>\n\n        input_ids <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>input_ids <span class=\"token operator\">==</span> sep<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nsep  <span class=\"token comment\"># text and feature_text seperated by [SEP]; sep sep for roberta</span>\n        \n        <span class=\"token comment\"># Attention mask</span>\n        attention_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">'attention_mask'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>attention_mask <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'row_id'</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'input_ids'</span><span class=\"token punctuation\">:</span> input_ids<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'n'</span><span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">'offset_mapping'</span><span class=\"token punctuation\">:</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">'offset_mapping'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> model_dir<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> dropout<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> pretrained<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        config <span class=\"token operator\">=</span> AutoConfig<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>model_dir<span class=\"token punctuation\">,</span> add_pooling_layer<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> pretrained<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> AutoModel<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>model_dir<span class=\"token punctuation\">,</span> config<span class=\"token operator\">=</span>config<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> AutoModel<span class=\"token punctuation\">.</span>from_config<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>fc_dropout <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>dropout<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>_init_weights<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_init_weights</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        module<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>normal_<span class=\"token punctuation\">(</span>mean<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>initializer_range<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> module<span class=\"token punctuation\">.</span>bias <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            module<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>zero_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_ids<span class=\"token punctuation\">,</span> attention_mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">(</span>input_ids<span class=\"token punctuation\">,</span> attention_mask<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> out<span class=\"token punctuation\">[</span><span class=\"token string\">'last_hidden_state'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># batch_size x max_length (512) x 768</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc_dropout<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"三、建立模型（CNN、\"><a href=\"#三、建立模型（CNN、\" class=\"headerlink\" title=\"三、建立模型（CNN、)\"></a>三、建立模型（CNN、)</h4><h5 id=\"1、model\"><a href=\"#1、model\" class=\"headerlink\" title=\"1、model\"></a>1、model</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># A CNN model example</span>\nmodel <span class=\"token operator\">=</span> Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>MaxPool2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Conv2D<span class=\"token punctuation\">(</span>filters <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'Same'</span><span class=\"token punctuation\">,</span> \n                 activation <span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>MaxPool2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">\"relu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">\"softmax\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2、后续运作步骤\"><a href=\"#2、后续运作步骤\" class=\"headerlink\" title=\"2、后续运作步骤\"></a>2、后续运作步骤</h5><p>一旦我们的层被添加到模型中，我们需要设置一个评分函数、一个损失函数和一个优化算法。<br>我们定义损失函数来衡量我们的模型在具有已知标签的图像上的表现有多差。它是观察到的标签和预测的标签之间的错误率。我们使用称为“categorical crossentropy”的分类分类（&gt;2 类）的特定形式。<br>最重要的功能是优化器。这个函数将迭代地改进参数（过滤核值、权重和神经元的偏差……）以最小化损失。<br>我选择了 RMSprop（带有默认值），它是一个非常有效的优化器。 RMSProp 更新以一种非常简单的方式调整 Adagrad 方法，试图降低其激进的、单调递减的学习率。我们也可以使用随机梯度下降 (‘sgd’) 优化器，但它比 RMSprop 慢。<br>度量函数“准确度”用于评估我们模型的性能。该度量函数类似于损失函数，只是在训练模型时不使用度量评估的结果（仅用于评估）。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># Define the optimizer\noptimizer = rmsprop_v2(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0) # 这里有一点问题，不能正常运行\n\n# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了使优化器更快收敛并最接近损失函数的全局最小值，我使用了学习率（LR）的退火方法。<br>LR 是优化器遍历“损失情况”的步骤。 LR越高，步数越大，收敛越快。然而，高 LR 的采样非常差，优化器可能会陷入局部最小值。<br>最好在训练期间降低学习率，以有效地达到损失函数的全局最小值。<br>为了保持高 LR 的快速计算时间的优势，我每 X 步（时期）动态降低 LR，这取决于是否有必要（当精度没有提高时）。<br>使用 Keras.callbacks 中的 ReduceLROnPlateau 函数，如果 3 个 epoch 后精度没有提高，我选择将 LR 减少一半。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Set a learning rate annealer</span>\nlearning_rate_reduction <span class=\"token operator\">=</span> ReduceLROnPlateau<span class=\"token punctuation\">(</span>monitor<span class=\"token operator\">=</span><span class=\"token string\">'val_acc'</span><span class=\"token punctuation\">,</span> \n                                            patience<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> \n                                            verbose<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n                                            factor<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> \n                                            min_lr<span class=\"token operator\">=</span><span class=\"token number\">0.00001</span><span class=\"token punctuation\">)</span>\nepochs <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># Turn epochs to 30 to get 0.9967 accuracy</span>\nbatch_size <span class=\"token operator\">=</span> <span class=\"token number\">86</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"3、数据增加\"><a href=\"#3、数据增加\" class=\"headerlink\" title=\"3、数据增加\"></a>3、数据增加</h5><p>为了避免过拟合问题，我们需要人为地扩展我们的手写数字数据集。我们可以使您现有的数据集更大。这个想法是通过小的转换来改变训练数据，以重现当有人写数字时发生的变化。<br>比如数字不居中 比例不一样（有些人用大/小数字写） 图像旋转…<br>以改变数组表示同时保持标签相同的方式改变训练数据的方法被称为数据增强技术。人们使用的一些流行的增强是灰度、水平翻转、垂直翻转、随机裁剪、颜色抖动、平移、旋转等等。<br>通过将这些转换中的几个应用于我们的训练数据，我们可以轻松地将训练示例的数量增加一倍或三倍，并创建一个非常强大的模型。<br>改进很重要：<br>在没有数据增强的情况下，我获得了 98.114% 的准确率<br>通过数据增强，我达到了 99.67% 的准确率</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># With data augmentation to prevent overfitting (accuracy 0.99286)</span>\n\ndatagen <span class=\"token operator\">=</span> ImageDataGenerator<span class=\"token punctuation\">(</span>\n        featurewise_center<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># set input mean to 0 over the dataset</span>\n        samplewise_center<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># set each sample mean to 0</span>\n        featurewise_std_normalization<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># divide inputs by std of the dataset</span>\n        samplewise_std_normalization<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># divide each input by its std</span>\n        zca_whitening<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># apply ZCA whitening</span>\n        rotation_range<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly rotate images in the range (degrees, 0 to 180)</span>\n        zoom_range <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># Randomly zoom image </span>\n        width_shift_range<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly shift images horizontally (fraction of total width)</span>\n        height_shift_range<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly shift images vertically (fraction of total height)</span>\n        horizontal_flip<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># randomly flip images</span>\n        vertical_flip<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># randomly flip images</span>\n\n\ndatagen<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于数据扩充，我选择：<br>将一些训练图像随机旋转 10 度<br>一些训练图像随机缩放 10%<br>将图像水平随机移动 10% 的宽度<br>随机将图像垂直移动 10% 的高度<br>我没有应用vertical_flip 或horizontal_flip，因为它可能导致错误分类对称数字，例如6 和9。<br>一旦我们的模型准备好，我们就可以拟合训练数据集。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Fit the model</span>\nhistory <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>fit_generator<span class=\"token punctuation\">(</span>datagen<span class=\"token punctuation\">.</span>flow<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span>Y_train<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                              epochs <span class=\"token operator\">=</span> epochs<span class=\"token punctuation\">,</span> validation_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>X_val<span class=\"token punctuation\">,</span>Y_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                              verbose <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> steps_per_epoch<span class=\"token operator\">=</span>X_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> batch_size\n                              <span class=\"token punctuation\">,</span> callbacks<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>learning_rate_reduction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"四、评估模型\"><a href=\"#四、评估模型\" class=\"headerlink\" title=\"四、评估模型\"></a>四、评估模型</h4><h5 id=\"1、训练和验证曲线-Training-and-validation-curves\"><a href=\"#1、训练和验证曲线-Training-and-validation-curves\" class=\"headerlink\" title=\"1、训练和验证曲线-Training and validation curves\"></a>1、训练和验证曲线-Training and validation curves</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2.混淆矩阵</p>\n<p>混淆矩阵对于查看您的模型缺陷非常有帮助。<br>我绘制了验证结果的混淆矩阵。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] &gt; thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这里我们可以看到，考虑到验证集（4200 张图像）的大小，我们的 CNN 在所有数字上的表现都非常好，几乎没有错误。<br>但是，我们的 CNN 似乎在 4 位上有一些小问题，嘿嘿被误分类为 9。有时当曲线平滑时很难捕捉到 4 和 9 之间的差异。</p>\n<p>让我们调查一下错误。<br>我想看看最重要的错误。为此，我需要得到结果中实际值概率与预测值概率之间的差异。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Display some error results </span>\n\n<span class=\"token comment\"># Errors are difference between predicted labels and true labels</span>\nerrors <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Y_pred_classes <span class=\"token operator\">-</span> Y_true <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nY_pred_classes_errors <span class=\"token operator\">=</span> Y_pred_classes<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nY_pred_errors <span class=\"token operator\">=</span> Y_pred<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nY_true_errors <span class=\"token operator\">=</span> Y_true<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\nX_val_errors <span class=\"token operator\">=</span> X_val<span class=\"token punctuation\">[</span>errors<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">display_errors</span><span class=\"token punctuation\">(</span>errors_index<span class=\"token punctuation\">,</span>img_errors<span class=\"token punctuation\">,</span>pred_errors<span class=\"token punctuation\">,</span> obs_errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" This function shows 6 images with their predicted and real labels\"\"\"</span>\n    n <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    nrows <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    ncols <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>nrows<span class=\"token punctuation\">,</span>ncols<span class=\"token punctuation\">,</span>sharex<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>sharey<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>nrows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ncols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            error <span class=\"token operator\">=</span> errors_index<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n            ax<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>img_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            ax<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Predicted label :{}\\nTrue label :{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>pred_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>obs_errors<span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\"># Probabilities of the wrong predicted numbers</span>\nY_pred_errors_prob <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>Y_pred_errors<span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Predicted probabilities of the true values in the error set</span>\ntrue_prob_errors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>diagonal<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>take<span class=\"token punctuation\">(</span>Y_pred_errors<span class=\"token punctuation\">,</span> Y_true_errors<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Difference between the probability of the predicted label and the true label</span>\ndelta_pred_true_errors <span class=\"token operator\">=</span> Y_pred_errors_prob <span class=\"token operator\">-</span> true_prob_errors\n\n<span class=\"token comment\"># Sorted list of the delta prob errors</span>\nsorted_dela_errors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>delta_pred_true_errors<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Top 6 errors </span>\nmost_important_errors <span class=\"token operator\">=</span> sorted_dela_errors<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Show the top 6 errors</span>\ndisplay_errors<span class=\"token punctuation\">(</span>most_important_errors<span class=\"token punctuation\">,</span> X_val_errors<span class=\"token punctuation\">,</span> Y_pred_classes_errors<span class=\"token punctuation\">,</span> Y_true_errors<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最重要的错误也是最狡猾的。<br>对于这六个案例，该模型并不荒谬。其中一些错误也可能是人为的，特别是对于非常接近 4 的 9。最后的 9 也很容易产生误导，对我来说似乎是 0。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># predict results</span>\nresults <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># select the indix with the maximum probability</span>\nresults <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nresults <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Label\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">submission <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"ImageId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>results<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nsubmission<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"cnn_mnist_datagen.csv\"</span><span class=\"token punctuation\">,</span>index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "kaggle",
                "常见数据处理"
            ]
        }
    ]
}